// Commit when pulled: 0bfc71e7b522ab3d15f96746f7559960c2ae6d21
// Date of commit above: 2021-02-22
// Repo from where pulled: https://github.com/xkbcommon/libxkbcommon/xkbcommon/xkbcommon-keysyms.h

package xkbcommon

/* This file is autogenerated; please do not commit directly. */

const KEY_NoSymbol uint32 = 0x000000 /* Special KeySym */

/***********************************************************
Copyright 1987, 1994, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.


Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * The "X11 Window System Protocol" standard defines in Appendix A the
 * keysym codes. These 29-bit integer values identify characters or
 * functions associated with each key (e.g., via the visible
 * engraving) of a keyboard layout. This file assigns mnemonic macro
 * names for these keysyms.
 *
 * This file is also compiled (by src/util/makekeys.c in libX11) into
 * hash tables that can be accessed with X11 library functions such as
 * XStringToKeysym() and XKeysymToString().
 *
 * Where a keysym corresponds one-to-one to an ISO 10646 / Unicode
 * character, this is noted in a comment that provides both the U+xxxx
 * Unicode position, as well as the official Unicode name of the
 * character.
 *
 * Where the correspondence is either not one-to-one or semantically
 * unclear, the Unicode position and name are enclosed in
 * parentheses. Such legacy keysyms should be considered deprecated
 * and are not recommended for use in future keyboard mappings.
 *
 * For any future extension of the keysyms with characters already
 * found in ISO 10646 / Unicode, the following algorithm shall be
 * used. The new keysym code position will simply be the character's
 * Unicode number plus 0x01000000. The keysym values in the range
 * 0x01000100 to 0x0110ffff are reserved to represent Unicode
 * characters in the range U+0100 to U+10FFFF.
 *
 * While most newer Unicode-based X11 clients do already accept
 * Unicode-mapped keysyms in the range 0x01000100 to 0x0110ffff, it
 * will remain necessary for clients -- in the interest of
 * compatibility with existing servers -- to also understand the
 * existing legacy keysym values in the range 0x0100 to 0x20ff.
 *
 * Where several mnemonic names are defined for the same keysym in this
 * file, all but the first one listed should be considered deprecated.
 *
 * Mnemonic names for keysyms are defined in this file with lines
 * that match one of these Perl regular expressions:
 *
 *    /^\const KEY_([a-zA-Z_0-9]+)\s+0x([0-9a-f]+)\s*\/\* U\+([0-9A-F]{4,6}) (.*) \*\/\s*$/
 *    /^\const KEY_([a-zA-Z_0-9]+)\s+0x([0-9a-f]+)\s*\/\*\(U\+([0-9A-F]{4,6}) (.*)\)\*\/\s*$/
 *    /^\const KEY_([a-zA-Z_0-9]+)\s+0x([0-9a-f]+)\s*(\/\*\s*(.*)\s*\*\/)?\s*$/
 *
 * Before adding new keysyms, please do consider the following: In
 * addition to the keysym names defined in this file, the
 * XStringToKeysym() and XKeysymToString() functions will also handle
 * any keysym string of the form "U0020" to "U007E" and "U00A0" to
 * "U10FFFF" for all possible Unicode characters. In other words,
 * every possible Unicode character has already a keysym string
 * defined algorithmically, even if it is not listed here. Therefore,
 * defining an additional keysym macro is only necessary where a
 * non-hexadecimal mnemonic name is needed, or where the new keysym
 * does not represent any existing Unicode character.
 *
 * When adding new keysyms to this file, do not forget to also update the
 * following as needed:
 *
 *   - the mappings in src/KeyBind.c in the libX11 repo
 *     https://gitlab.freedesktop.org/xorg/lib/libx11
 *
 *   - the protocol specification in specs/keysyms.xml in this repo
 *     https://gitlab.freedesktop.org/xorg/proto/xorgproto
 *
 */

const KEY_VoidSymbol uint32 = 0xffffff /* Void symbol */

/*
 * TTY function keys, cleverly chosen to map to ASCII, for convenience of
 * programming, but could have been arbitrary (at the cost of lookup
 * tables in client code).
 */

const KEY_BackSpace uint32 = 0xff08 /* Back space, back char */
const KEY_Tab uint32 = 0xff09
const KEY_Linefeed uint32 = 0xff0a /* Linefeed, LF */
const KEY_Clear uint32 = 0xff0b
const KEY_Return uint32 = 0xff0d /* Return, enter */
const KEY_Pause uint32 = 0xff13  /* Pause, hold */
const KEY_Scroll_Lock uint32 = 0xff14
const KEY_Sys_Req uint32 = 0xff15
const KEY_Escape uint32 = 0xff1b
const KEY_Delete uint32 = 0xffff /* Delete, rubout */

/* International & multi-key character composition */

const KEY_Multi_key uint32 = 0xff20 /* Multi-key character compose */
const KEY_Codeinput uint32 = 0xff37
const KEY_SingleCandidate uint32 = 0xff3c
const KEY_MultipleCandidate uint32 = 0xff3d
const KEY_PreviousCandidate uint32 = 0xff3e

/* Japanese keyboard support */

const KEY_Kanji uint32 = 0xff21             /* Kanji, Kanji convert */
const KEY_Muhenkan uint32 = 0xff22          /* Cancel Conversion */
const KEY_Henkan_Mode uint32 = 0xff23       /* Start/Stop Conversion */
const KEY_Henkan uint32 = 0xff23            /* Alias for Henkan_Mode */
const KEY_Romaji uint32 = 0xff24            /* to Romaji */
const KEY_Hiragana uint32 = 0xff25          /* to Hiragana */
const KEY_Katakana uint32 = 0xff26          /* to Katakana */
const KEY_Hiragana_Katakana uint32 = 0xff27 /* Hiragana/Katakana toggle */
const KEY_Zenkaku uint32 = 0xff28           /* to Zenkaku */
const KEY_Hankaku uint32 = 0xff29           /* to Hankaku */
const KEY_Zenkaku_Hankaku uint32 = 0xff2a   /* Zenkaku/Hankaku toggle */
const KEY_Touroku uint32 = 0xff2b           /* Add to Dictionary */
const KEY_Massyo uint32 = 0xff2c            /* Delete from Dictionary */
const KEY_Kana_Lock uint32 = 0xff2d         /* Kana Lock */
const KEY_Kana_Shift uint32 = 0xff2e        /* Kana Shift */
const KEY_Eisu_Shift uint32 = 0xff2f        /* Alphanumeric Shift */
const KEY_Eisu_toggle uint32 = 0xff30       /* Alphanumeric toggle */
const KEY_Kanji_Bangou uint32 = 0xff37      /* Codeinput */
const KEY_Zen_Koho uint32 = 0xff3d          /* Multiple/All Candidate(s) */
const KEY_Mae_Koho uint32 = 0xff3e          /* Previous Candidate */

/* 0xff31 thru 0xff3f are under XK_KOREAN */

/* Cursor control & motion */

const KEY_Home uint32 = 0xff50
const KEY_Left uint32 = 0xff51  /* Move left, left arrow */
const KEY_Up uint32 = 0xff52    /* Move up, up arrow */
const KEY_Right uint32 = 0xff53 /* Move right, right arrow */
const KEY_Down uint32 = 0xff54  /* Move down, down arrow */
const KEY_Prior uint32 = 0xff55 /* Prior, previous */
const KEY_Page_Up uint32 = 0xff55
const KEY_Next uint32 = 0xff56 /* Next */
const KEY_Page_Down uint32 = 0xff56
const KEY_End uint32 = 0xff57   /* EOL */
const KEY_Begin uint32 = 0xff58 /* BOL */

/* Misc functions */

const KEY_Select uint32 = 0xff60 /* Select, mark */
const KEY_Print uint32 = 0xff61
const KEY_Execute uint32 = 0xff62 /* Execute, run, do */
const KEY_Insert uint32 = 0xff63  /* Insert, insert here */
const KEY_Undo uint32 = 0xff65
const KEY_Redo uint32 = 0xff66 /* Redo, again */
const KEY_Menu uint32 = 0xff67
const KEY_Find uint32 = 0xff68   /* Find, search */
const KEY_Cancel uint32 = 0xff69 /* Cancel, stop, abort, exit */
const KEY_Help uint32 = 0xff6a   /* Help */
const KEY_Break uint32 = 0xff6b
const KEY_Mode_switch uint32 = 0xff7e   /* Character set switch */
const KEY_script_switch uint32 = 0xff7e /* Alias for mode_switch */
const KEY_Num_Lock uint32 = 0xff7f

/* Keypad functions, keypad numbers cleverly chosen to map to ASCII */

const KEY_KP_Space uint32 = 0xff80 /* Space */
const KEY_KP_Tab uint32 = 0xff89
const KEY_KP_Enter uint32 = 0xff8d /* Enter */
const KEY_KP_F1 uint32 = 0xff91    /* PF1, KP_A, ... */
const KEY_KP_F2 uint32 = 0xff92
const KEY_KP_F3 uint32 = 0xff93
const KEY_KP_F4 uint32 = 0xff94
const KEY_KP_Home uint32 = 0xff95
const KEY_KP_Left uint32 = 0xff96
const KEY_KP_Up uint32 = 0xff97
const KEY_KP_Right uint32 = 0xff98
const KEY_KP_Down uint32 = 0xff99
const KEY_KP_Prior uint32 = 0xff9a
const KEY_KP_Page_Up uint32 = 0xff9a
const KEY_KP_Next uint32 = 0xff9b
const KEY_KP_Page_Down uint32 = 0xff9b
const KEY_KP_End uint32 = 0xff9c
const KEY_KP_Begin uint32 = 0xff9d
const KEY_KP_Insert uint32 = 0xff9e
const KEY_KP_Delete uint32 = 0xff9f
const KEY_KP_Equal uint32 = 0xffbd /* Equals */
const KEY_KP_Multiply uint32 = 0xffaa
const KEY_KP_Add uint32 = 0xffab
const KEY_KP_Separator uint32 = 0xffac /* Separator, often comma */
const KEY_KP_Subtract uint32 = 0xffad
const KEY_KP_Decimal uint32 = 0xffae
const KEY_KP_Divide uint32 = 0xffaf

const KEY_KP_0 uint32 = 0xffb0
const KEY_KP_1 uint32 = 0xffb1
const KEY_KP_2 uint32 = 0xffb2
const KEY_KP_3 uint32 = 0xffb3
const KEY_KP_4 uint32 = 0xffb4
const KEY_KP_5 uint32 = 0xffb5
const KEY_KP_6 uint32 = 0xffb6
const KEY_KP_7 uint32 = 0xffb7
const KEY_KP_8 uint32 = 0xffb8
const KEY_KP_9 uint32 = 0xffb9

/*
 * Auxiliary functions; note the duplicate definitions for left and right
 * function keys;  Sun keyboards and a few other manufacturers have such
 * function key groups on the left and/or right sides of the keyboard.
 * We've not found a keyboard with more than 35 function keys total.
 */

const KEY_F1 uint32 = 0xffbe
const KEY_F2 uint32 = 0xffbf
const KEY_F3 uint32 = 0xffc0
const KEY_F4 uint32 = 0xffc1
const KEY_F5 uint32 = 0xffc2
const KEY_F6 uint32 = 0xffc3
const KEY_F7 uint32 = 0xffc4
const KEY_F8 uint32 = 0xffc5
const KEY_F9 uint32 = 0xffc6
const KEY_F10 uint32 = 0xffc7
const KEY_F11 uint32 = 0xffc8
const KEY_L1 uint32 = 0xffc8
const KEY_F12 uint32 = 0xffc9
const KEY_L2 uint32 = 0xffc9
const KEY_F13 uint32 = 0xffca
const KEY_L3 uint32 = 0xffca
const KEY_F14 uint32 = 0xffcb
const KEY_L4 uint32 = 0xffcb
const KEY_F15 uint32 = 0xffcc
const KEY_L5 uint32 = 0xffcc
const KEY_F16 uint32 = 0xffcd
const KEY_L6 uint32 = 0xffcd
const KEY_F17 uint32 = 0xffce
const KEY_L7 uint32 = 0xffce
const KEY_F18 uint32 = 0xffcf
const KEY_L8 uint32 = 0xffcf
const KEY_F19 uint32 = 0xffd0
const KEY_L9 uint32 = 0xffd0
const KEY_F20 uint32 = 0xffd1
const KEY_L10 uint32 = 0xffd1
const KEY_F21 uint32 = 0xffd2
const KEY_R1 uint32 = 0xffd2
const KEY_F22 uint32 = 0xffd3
const KEY_R2 uint32 = 0xffd3
const KEY_F23 uint32 = 0xffd4
const KEY_R3 uint32 = 0xffd4
const KEY_F24 uint32 = 0xffd5
const KEY_R4 uint32 = 0xffd5
const KEY_F25 uint32 = 0xffd6
const KEY_R5 uint32 = 0xffd6
const KEY_F26 uint32 = 0xffd7
const KEY_R6 uint32 = 0xffd7
const KEY_F27 uint32 = 0xffd8
const KEY_R7 uint32 = 0xffd8
const KEY_F28 uint32 = 0xffd9
const KEY_R8 uint32 = 0xffd9
const KEY_F29 uint32 = 0xffda
const KEY_R9 uint32 = 0xffda
const KEY_F30 uint32 = 0xffdb
const KEY_R10 uint32 = 0xffdb
const KEY_F31 uint32 = 0xffdc
const KEY_R11 uint32 = 0xffdc
const KEY_F32 uint32 = 0xffdd
const KEY_R12 uint32 = 0xffdd
const KEY_F33 uint32 = 0xffde
const KEY_R13 uint32 = 0xffde
const KEY_F34 uint32 = 0xffdf
const KEY_R14 uint32 = 0xffdf
const KEY_F35 uint32 = 0xffe0
const KEY_R15 uint32 = 0xffe0

/* Modifiers */

const KEY_Shift_L uint32 = 0xffe1    /* Left shift */
const KEY_Shift_R uint32 = 0xffe2    /* Right shift */
const KEY_Control_L uint32 = 0xffe3  /* Left control */
const KEY_Control_R uint32 = 0xffe4  /* Right control */
const KEY_Caps_Lock uint32 = 0xffe5  /* Caps lock */
const KEY_Shift_Lock uint32 = 0xffe6 /* Shift lock */

const KEY_Meta_L uint32 = 0xffe7  /* Left meta */
const KEY_Meta_R uint32 = 0xffe8  /* Right meta */
const KEY_Alt_L uint32 = 0xffe9   /* Left alt */
const KEY_Alt_R uint32 = 0xffea   /* Right alt */
const KEY_Super_L uint32 = 0xffeb /* Left super */
const KEY_Super_R uint32 = 0xffec /* Right super */
const KEY_Hyper_L uint32 = 0xffed /* Left hyper */
const KEY_Hyper_R uint32 = 0xffee /* Right hyper */

/*
 * Keyboard (XKB) Extension function and modifier keys
 * (from Appendix C of "The X Keyboard Extension: Protocol Specification")
 * Byte 3 uint32 = 0xfe
 */

const KEY_ISO_Lock uint32 = 0xfe01
const KEY_ISO_Level2_Latch uint32 = 0xfe02
const KEY_ISO_Level3_Shift uint32 = 0xfe03
const KEY_ISO_Level3_Latch uint32 = 0xfe04
const KEY_ISO_Level3_Lock uint32 = 0xfe05
const KEY_ISO_Level5_Shift uint32 = 0xfe11
const KEY_ISO_Level5_Latch uint32 = 0xfe12
const KEY_ISO_Level5_Lock uint32 = 0xfe13
const KEY_ISO_Group_Shift uint32 = 0xff7e /* Alias for mode_switch */
const KEY_ISO_Group_Latch uint32 = 0xfe06
const KEY_ISO_Group_Lock uint32 = 0xfe07
const KEY_ISO_Next_Group uint32 = 0xfe08
const KEY_ISO_Next_Group_Lock uint32 = 0xfe09
const KEY_ISO_Prev_Group uint32 = 0xfe0a
const KEY_ISO_Prev_Group_Lock uint32 = 0xfe0b
const KEY_ISO_First_Group uint32 = 0xfe0c
const KEY_ISO_First_Group_Lock uint32 = 0xfe0d
const KEY_ISO_Last_Group uint32 = 0xfe0e
const KEY_ISO_Last_Group_Lock uint32 = 0xfe0f

const KEY_ISO_Left_Tab uint32 = 0xfe20
const KEY_ISO_Move_Line_Up uint32 = 0xfe21
const KEY_ISO_Move_Line_Down uint32 = 0xfe22
const KEY_ISO_Partial_Line_Up uint32 = 0xfe23
const KEY_ISO_Partial_Line_Down uint32 = 0xfe24
const KEY_ISO_Partial_Space_Left uint32 = 0xfe25
const KEY_ISO_Partial_Space_Right uint32 = 0xfe26
const KEY_ISO_Set_Margin_Left uint32 = 0xfe27
const KEY_ISO_Set_Margin_Right uint32 = 0xfe28
const KEY_ISO_Release_Margin_Left uint32 = 0xfe29
const KEY_ISO_Release_Margin_Right uint32 = 0xfe2a
const KEY_ISO_Release_Both_Margins uint32 = 0xfe2b
const KEY_ISO_Fast_Cursor_Left uint32 = 0xfe2c
const KEY_ISO_Fast_Cursor_Right uint32 = 0xfe2d
const KEY_ISO_Fast_Cursor_Up uint32 = 0xfe2e
const KEY_ISO_Fast_Cursor_Down uint32 = 0xfe2f
const KEY_ISO_Continuous_Underline uint32 = 0xfe30
const KEY_ISO_Discontinuous_Underline uint32 = 0xfe31
const KEY_ISO_Emphasize uint32 = 0xfe32
const KEY_ISO_Center_Object uint32 = 0xfe33
const KEY_ISO_Enter uint32 = 0xfe34

const KEY_dead_grave uint32 = 0xfe50
const KEY_dead_acute uint32 = 0xfe51
const KEY_dead_circumflex uint32 = 0xfe52
const KEY_dead_tilde uint32 = 0xfe53
const KEY_dead_perispomeni uint32 = 0xfe53 /* alias for dead_tilde */
const KEY_dead_macron uint32 = 0xfe54
const KEY_dead_breve uint32 = 0xfe55
const KEY_dead_abovedot uint32 = 0xfe56
const KEY_dead_diaeresis uint32 = 0xfe57
const KEY_dead_abovering uint32 = 0xfe58
const KEY_dead_doubleacute uint32 = 0xfe59
const KEY_dead_caron uint32 = 0xfe5a
const KEY_dead_cedilla uint32 = 0xfe5b
const KEY_dead_ogonek uint32 = 0xfe5c
const KEY_dead_iota uint32 = 0xfe5d
const KEY_dead_voiced_sound uint32 = 0xfe5e
const KEY_dead_semivoiced_sound uint32 = 0xfe5f
const KEY_dead_belowdot uint32 = 0xfe60
const KEY_dead_hook uint32 = 0xfe61
const KEY_dead_horn uint32 = 0xfe62
const KEY_dead_stroke uint32 = 0xfe63
const KEY_dead_abovecomma uint32 = 0xfe64
const KEY_dead_psili uint32 = 0xfe64 /* alias for dead_abovecomma */
const KEY_dead_abovereversedcomma uint32 = 0xfe65
const KEY_dead_dasia uint32 = 0xfe65 /* alias for dead_abovereversedcomma */
const KEY_dead_doublegrave uint32 = 0xfe66
const KEY_dead_belowring uint32 = 0xfe67
const KEY_dead_belowmacron uint32 = 0xfe68
const KEY_dead_belowcircumflex uint32 = 0xfe69
const KEY_dead_belowtilde uint32 = 0xfe6a
const KEY_dead_belowbreve uint32 = 0xfe6b
const KEY_dead_belowdiaeresis uint32 = 0xfe6c
const KEY_dead_invertedbreve uint32 = 0xfe6d
const KEY_dead_belowcomma uint32 = 0xfe6e
const KEY_dead_currency uint32 = 0xfe6f

/* extra dead elements for German T3 layout */
const KEY_dead_lowline uint32 = 0xfe90
const KEY_dead_aboveverticalline uint32 = 0xfe91
const KEY_dead_belowverticalline uint32 = 0xfe92
const KEY_dead_longsolidusoverlay uint32 = 0xfe93

/* dead vowels for universal syllable entry */
const KEY_dead_a uint32 = 0xfe80
const KEY_dead_A uint32 = 0xfe81
const KEY_dead_e uint32 = 0xfe82
const KEY_dead_E uint32 = 0xfe83
const KEY_dead_i uint32 = 0xfe84
const KEY_dead_I uint32 = 0xfe85
const KEY_dead_o uint32 = 0xfe86
const KEY_dead_O uint32 = 0xfe87
const KEY_dead_u uint32 = 0xfe88
const KEY_dead_U uint32 = 0xfe89
const KEY_dead_small_schwa uint32 = 0xfe8a
const KEY_dead_capital_schwa uint32 = 0xfe8b

const KEY_dead_greek uint32 = 0xfe8c

const KEY_First_Virtual_Screen uint32 = 0xfed0
const KEY_Prev_Virtual_Screen uint32 = 0xfed1
const KEY_Next_Virtual_Screen uint32 = 0xfed2
const KEY_Last_Virtual_Screen uint32 = 0xfed4
const KEY_Terminate_Server uint32 = 0xfed5

const KEY_AccessX_Enable uint32 = 0xfe70
const KEY_AccessX_Feedback_Enable uint32 = 0xfe71
const KEY_RepeatKeys_Enable uint32 = 0xfe72
const KEY_SlowKeys_Enable uint32 = 0xfe73
const KEY_BounceKeys_Enable uint32 = 0xfe74
const KEY_StickyKeys_Enable uint32 = 0xfe75
const KEY_MouseKeys_Enable uint32 = 0xfe76
const KEY_MouseKeys_Accel_Enable uint32 = 0xfe77
const KEY_Overlay1_Enable uint32 = 0xfe78
const KEY_Overlay2_Enable uint32 = 0xfe79
const KEY_AudibleBell_Enable uint32 = 0xfe7a

const KEY_Pointer_Left uint32 = 0xfee0
const KEY_Pointer_Right uint32 = 0xfee1
const KEY_Pointer_Up uint32 = 0xfee2
const KEY_Pointer_Down uint32 = 0xfee3
const KEY_Pointer_UpLeft uint32 = 0xfee4
const KEY_Pointer_UpRight uint32 = 0xfee5
const KEY_Pointer_DownLeft uint32 = 0xfee6
const KEY_Pointer_DownRight uint32 = 0xfee7
const KEY_Pointer_Button_Dflt uint32 = 0xfee8
const KEY_Pointer_Button1 uint32 = 0xfee9
const KEY_Pointer_Button2 uint32 = 0xfeea
const KEY_Pointer_Button3 uint32 = 0xfeeb
const KEY_Pointer_Button4 uint32 = 0xfeec
const KEY_Pointer_Button5 uint32 = 0xfeed
const KEY_Pointer_DblClick_Dflt uint32 = 0xfeee
const KEY_Pointer_DblClick1 uint32 = 0xfeef
const KEY_Pointer_DblClick2 uint32 = 0xfef0
const KEY_Pointer_DblClick3 uint32 = 0xfef1
const KEY_Pointer_DblClick4 uint32 = 0xfef2
const KEY_Pointer_DblClick5 uint32 = 0xfef3
const KEY_Pointer_Drag_Dflt uint32 = 0xfef4
const KEY_Pointer_Drag1 uint32 = 0xfef5
const KEY_Pointer_Drag2 uint32 = 0xfef6
const KEY_Pointer_Drag3 uint32 = 0xfef7
const KEY_Pointer_Drag4 uint32 = 0xfef8
const KEY_Pointer_Drag5 uint32 = 0xfefd

const KEY_Pointer_EnableKeys uint32 = 0xfef9
const KEY_Pointer_Accelerate uint32 = 0xfefa
const KEY_Pointer_DfltBtnNext uint32 = 0xfefb
const KEY_Pointer_DfltBtnPrev uint32 = 0xfefc

/* Single-Stroke Multiple-Character N-Graph Keysyms For The X Input Method */

const KEY_ch uint32 = 0xfea0
const KEY_Ch uint32 = 0xfea1
const KEY_CH uint32 = 0xfea2
const KEY_c_h uint32 = 0xfea3
const KEY_C_h uint32 = 0xfea4
const KEY_C_H uint32 = 0xfea5

/*
 * 3270 Terminal Keys
 * Byte 3 uint32 = 0xfd
 */

const KEY_3270_Duplicate uint32 = 0xfd01
const KEY_3270_FieldMark uint32 = 0xfd02
const KEY_3270_Right2 uint32 = 0xfd03
const KEY_3270_Left2 uint32 = 0xfd04
const KEY_3270_BackTab uint32 = 0xfd05
const KEY_3270_EraseEOF uint32 = 0xfd06
const KEY_3270_EraseInput uint32 = 0xfd07
const KEY_3270_Reset uint32 = 0xfd08
const KEY_3270_Quit uint32 = 0xfd09
const KEY_3270_PA1 uint32 = 0xfd0a
const KEY_3270_PA2 uint32 = 0xfd0b
const KEY_3270_PA3 uint32 = 0xfd0c
const KEY_3270_Test uint32 = 0xfd0d
const KEY_3270_Attn uint32 = 0xfd0e
const KEY_3270_CursorBlink uint32 = 0xfd0f
const KEY_3270_AltCursor uint32 = 0xfd10
const KEY_3270_KeyClick uint32 = 0xfd11
const KEY_3270_Jump uint32 = 0xfd12
const KEY_3270_Ident uint32 = 0xfd13
const KEY_3270_Rule uint32 = 0xfd14
const KEY_3270_Copy uint32 = 0xfd15
const KEY_3270_Play uint32 = 0xfd16
const KEY_3270_Setup uint32 = 0xfd17
const KEY_3270_Record uint32 = 0xfd18
const KEY_3270_ChangeScreen uint32 = 0xfd19
const KEY_3270_DeleteWord uint32 = 0xfd1a
const KEY_3270_ExSelect uint32 = 0xfd1b
const KEY_3270_CursorSelect uint32 = 0xfd1c
const KEY_3270_PrintScreen uint32 = 0xfd1d
const KEY_3270_Enter uint32 = 0xfd1e

/*
 * Latin 1
 * (ISO/IEC 8859-1 uint32 = Unicode U+0020..U+00FF)
 * Byte 3 uint32 = 0
 */
const KEY_space uint32 = 0x0020        /* U+0020 SPACE */
const KEY_exclam uint32 = 0x0021       /* U+0021 EXCLAMATION MARK */
const KEY_quotedbl uint32 = 0x0022     /* U+0022 QUOTATION MARK */
const KEY_numbersign uint32 = 0x0023   /* U+0023 NUMBER SIGN */
const KEY_dollar uint32 = 0x0024       /* U+0024 DOLLAR SIGN */
const KEY_percent uint32 = 0x0025      /* U+0025 PERCENT SIGN */
const KEY_ampersand uint32 = 0x0026    /* U+0026 AMPERSAND */
const KEY_apostrophe uint32 = 0x0027   /* U+0027 APOSTROPHE */
const KEY_quoteright uint32 = 0x0027   /* deprecated */
const KEY_parenleft uint32 = 0x0028    /* U+0028 LEFT PARENTHESIS */
const KEY_parenright uint32 = 0x0029   /* U+0029 RIGHT PARENTHESIS */
const KEY_asterisk uint32 = 0x002a     /* U+002A ASTERISK */
const KEY_plus uint32 = 0x002b         /* U+002B PLUS SIGN */
const KEY_comma uint32 = 0x002c        /* U+002C COMMA */
const KEY_minus uint32 = 0x002d        /* U+002D HYPHEN-MINUS */
const KEY_period uint32 = 0x002e       /* U+002E FULL STOP */
const KEY_slash uint32 = 0x002f        /* U+002F SOLIDUS */
const KEY_0 uint32 = 0x0030            /* U+0030 DIGIT ZERO */
const KEY_1 uint32 = 0x0031            /* U+0031 DIGIT ONE */
const KEY_2 uint32 = 0x0032            /* U+0032 DIGIT TWO */
const KEY_3 uint32 = 0x0033            /* U+0033 DIGIT THREE */
const KEY_4 uint32 = 0x0034            /* U+0034 DIGIT FOUR */
const KEY_5 uint32 = 0x0035            /* U+0035 DIGIT FIVE */
const KEY_6 uint32 = 0x0036            /* U+0036 DIGIT SIX */
const KEY_7 uint32 = 0x0037            /* U+0037 DIGIT SEVEN */
const KEY_8 uint32 = 0x0038            /* U+0038 DIGIT EIGHT */
const KEY_9 uint32 = 0x0039            /* U+0039 DIGIT NINE */
const KEY_colon uint32 = 0x003a        /* U+003A COLON */
const KEY_semicolon uint32 = 0x003b    /* U+003B SEMICOLON */
const KEY_less uint32 = 0x003c         /* U+003C LESS-THAN SIGN */
const KEY_equal uint32 = 0x003d        /* U+003D EQUALS SIGN */
const KEY_greater uint32 = 0x003e      /* U+003E GREATER-THAN SIGN */
const KEY_question uint32 = 0x003f     /* U+003F QUESTION MARK */
const KEY_at uint32 = 0x0040           /* U+0040 COMMERCIAL AT */
const KEY_A uint32 = 0x0041            /* U+0041 LATIN CAPITAL LETTER A */
const KEY_B uint32 = 0x0042            /* U+0042 LATIN CAPITAL LETTER B */
const KEY_C uint32 = 0x0043            /* U+0043 LATIN CAPITAL LETTER C */
const KEY_D uint32 = 0x0044            /* U+0044 LATIN CAPITAL LETTER D */
const KEY_E uint32 = 0x0045            /* U+0045 LATIN CAPITAL LETTER E */
const KEY_F uint32 = 0x0046            /* U+0046 LATIN CAPITAL LETTER F */
const KEY_G uint32 = 0x0047            /* U+0047 LATIN CAPITAL LETTER G */
const KEY_H uint32 = 0x0048            /* U+0048 LATIN CAPITAL LETTER H */
const KEY_I uint32 = 0x0049            /* U+0049 LATIN CAPITAL LETTER I */
const KEY_J uint32 = 0x004a            /* U+004A LATIN CAPITAL LETTER J */
const KEY_K uint32 = 0x004b            /* U+004B LATIN CAPITAL LETTER K */
const KEY_L uint32 = 0x004c            /* U+004C LATIN CAPITAL LETTER L */
const KEY_M uint32 = 0x004d            /* U+004D LATIN CAPITAL LETTER M */
const KEY_N uint32 = 0x004e            /* U+004E LATIN CAPITAL LETTER N */
const KEY_O uint32 = 0x004f            /* U+004F LATIN CAPITAL LETTER O */
const KEY_P uint32 = 0x0050            /* U+0050 LATIN CAPITAL LETTER P */
const KEY_Q uint32 = 0x0051            /* U+0051 LATIN CAPITAL LETTER Q */
const KEY_R uint32 = 0x0052            /* U+0052 LATIN CAPITAL LETTER R */
const KEY_S uint32 = 0x0053            /* U+0053 LATIN CAPITAL LETTER S */
const KEY_T uint32 = 0x0054            /* U+0054 LATIN CAPITAL LETTER T */
const KEY_U uint32 = 0x0055            /* U+0055 LATIN CAPITAL LETTER U */
const KEY_V uint32 = 0x0056            /* U+0056 LATIN CAPITAL LETTER V */
const KEY_W uint32 = 0x0057            /* U+0057 LATIN CAPITAL LETTER W */
const KEY_X uint32 = 0x0058            /* U+0058 LATIN CAPITAL LETTER X */
const KEY_Y uint32 = 0x0059            /* U+0059 LATIN CAPITAL LETTER Y */
const KEY_Z uint32 = 0x005a            /* U+005A LATIN CAPITAL LETTER Z */
const KEY_bracketleft uint32 = 0x005b  /* U+005B LEFT SQUARE BRACKET */
const KEY_backslash uint32 = 0x005c    /* U+005C REVERSE SOLIDUS */
const KEY_bracketright uint32 = 0x005d /* U+005D RIGHT SQUARE BRACKET */
const KEY_asciicircum uint32 = 0x005e  /* U+005E CIRCUMFLEX ACCENT */
const KEY_underscore uint32 = 0x005f   /* U+005F LOW LINE */
const KEY_grave uint32 = 0x0060        /* U+0060 GRAVE ACCENT */
const KEY_quoteleft uint32 = 0x0060    /* deprecated */
const KEY_a uint32 = 0x0061            /* U+0061 LATIN SMALL LETTER A */
const KEY_b uint32 = 0x0062            /* U+0062 LATIN SMALL LETTER B */
const KEY_c uint32 = 0x0063            /* U+0063 LATIN SMALL LETTER C */
const KEY_d uint32 = 0x0064            /* U+0064 LATIN SMALL LETTER D */
const KEY_e uint32 = 0x0065            /* U+0065 LATIN SMALL LETTER E */
const KEY_f uint32 = 0x0066            /* U+0066 LATIN SMALL LETTER F */
const KEY_g uint32 = 0x0067            /* U+0067 LATIN SMALL LETTER G */
const KEY_h uint32 = 0x0068            /* U+0068 LATIN SMALL LETTER H */
const KEY_i uint32 = 0x0069            /* U+0069 LATIN SMALL LETTER I */
const KEY_j uint32 = 0x006a            /* U+006A LATIN SMALL LETTER J */
const KEY_k uint32 = 0x006b            /* U+006B LATIN SMALL LETTER K */
const KEY_l uint32 = 0x006c            /* U+006C LATIN SMALL LETTER L */
const KEY_m uint32 = 0x006d            /* U+006D LATIN SMALL LETTER M */
const KEY_n uint32 = 0x006e            /* U+006E LATIN SMALL LETTER N */
const KEY_o uint32 = 0x006f            /* U+006F LATIN SMALL LETTER O */
const KEY_p uint32 = 0x0070            /* U+0070 LATIN SMALL LETTER P */
const KEY_q uint32 = 0x0071            /* U+0071 LATIN SMALL LETTER Q */
const KEY_r uint32 = 0x0072            /* U+0072 LATIN SMALL LETTER R */
const KEY_s uint32 = 0x0073            /* U+0073 LATIN SMALL LETTER S */
const KEY_t uint32 = 0x0074            /* U+0074 LATIN SMALL LETTER T */
const KEY_u uint32 = 0x0075            /* U+0075 LATIN SMALL LETTER U */
const KEY_v uint32 = 0x0076            /* U+0076 LATIN SMALL LETTER V */
const KEY_w uint32 = 0x0077            /* U+0077 LATIN SMALL LETTER W */
const KEY_x uint32 = 0x0078            /* U+0078 LATIN SMALL LETTER X */
const KEY_y uint32 = 0x0079            /* U+0079 LATIN SMALL LETTER Y */
const KEY_z uint32 = 0x007a            /* U+007A LATIN SMALL LETTER Z */
const KEY_braceleft uint32 = 0x007b    /* U+007B LEFT CURLY BRACKET */
const KEY_bar uint32 = 0x007c          /* U+007C VERTICAL LINE */
const KEY_braceright uint32 = 0x007d   /* U+007D RIGHT CURLY BRACKET */
const KEY_asciitilde uint32 = 0x007e   /* U+007E TILDE */

const KEY_nobreakspace uint32 = 0x00a0   /* U+00A0 NO-BREAK SPACE */
const KEY_exclamdown uint32 = 0x00a1     /* U+00A1 INVERTED EXCLAMATION MARK */
const KEY_cent uint32 = 0x00a2           /* U+00A2 CENT SIGN */
const KEY_sterling uint32 = 0x00a3       /* U+00A3 POUND SIGN */
const KEY_currency uint32 = 0x00a4       /* U+00A4 CURRENCY SIGN */
const KEY_yen uint32 = 0x00a5            /* U+00A5 YEN SIGN */
const KEY_brokenbar uint32 = 0x00a6      /* U+00A6 BROKEN BAR */
const KEY_section uint32 = 0x00a7        /* U+00A7 SECTION SIGN */
const KEY_diaeresis uint32 = 0x00a8      /* U+00A8 DIAERESIS */
const KEY_copyright uint32 = 0x00a9      /* U+00A9 COPYRIGHT SIGN */
const KEY_ordfeminine uint32 = 0x00aa    /* U+00AA FEMININE ORDINAL INDICATOR */
const KEY_guillemotleft uint32 = 0x00ab  /* U+00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK */
const KEY_notsign uint32 = 0x00ac        /* U+00AC NOT SIGN */
const KEY_hyphen uint32 = 0x00ad         /* U+00AD SOFT HYPHEN */
const KEY_registered uint32 = 0x00ae     /* U+00AE REGISTERED SIGN */
const KEY_macron uint32 = 0x00af         /* U+00AF MACRON */
const KEY_degree uint32 = 0x00b0         /* U+00B0 DEGREE SIGN */
const KEY_plusminus uint32 = 0x00b1      /* U+00B1 PLUS-MINUS SIGN */
const KEY_twosuperior uint32 = 0x00b2    /* U+00B2 SUPERSCRIPT TWO */
const KEY_threesuperior uint32 = 0x00b3  /* U+00B3 SUPERSCRIPT THREE */
const KEY_acute uint32 = 0x00b4          /* U+00B4 ACUTE ACCENT */
const KEY_mu uint32 = 0x00b5             /* U+00B5 MICRO SIGN */
const KEY_paragraph uint32 = 0x00b6      /* U+00B6 PILCROW SIGN */
const KEY_periodcentered uint32 = 0x00b7 /* U+00B7 MIDDLE DOT */
const KEY_cedilla uint32 = 0x00b8        /* U+00B8 CEDILLA */
const KEY_onesuperior uint32 = 0x00b9    /* U+00B9 SUPERSCRIPT ONE */
const KEY_masculine uint32 = 0x00ba      /* U+00BA MASCULINE ORDINAL INDICATOR */
const KEY_guillemotright uint32 = 0x00bb /* U+00BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK */
const KEY_onequarter uint32 = 0x00bc     /* U+00BC VULGAR FRACTION ONE QUARTER */
const KEY_onehalf uint32 = 0x00bd        /* U+00BD VULGAR FRACTION ONE HALF */
const KEY_threequarters uint32 = 0x00be  /* U+00BE VULGAR FRACTION THREE QUARTERS */
const KEY_questiondown uint32 = 0x00bf   /* U+00BF INVERTED QUESTION MARK */
const KEY_Agrave uint32 = 0x00c0         /* U+00C0 LATIN CAPITAL LETTER A WITH GRAVE */
const KEY_Aacute uint32 = 0x00c1         /* U+00C1 LATIN CAPITAL LETTER A WITH ACUTE */
const KEY_Acircumflex uint32 = 0x00c2    /* U+00C2 LATIN CAPITAL LETTER A WITH CIRCUMFLEX */
const KEY_Atilde uint32 = 0x00c3         /* U+00C3 LATIN CAPITAL LETTER A WITH TILDE */
const KEY_Adiaeresis uint32 = 0x00c4     /* U+00C4 LATIN CAPITAL LETTER A WITH DIAERESIS */
const KEY_Aring uint32 = 0x00c5          /* U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE */
const KEY_AE uint32 = 0x00c6             /* U+00C6 LATIN CAPITAL LETTER AE */
const KEY_Ccedilla uint32 = 0x00c7       /* U+00C7 LATIN CAPITAL LETTER C WITH CEDILLA */
const KEY_Egrave uint32 = 0x00c8         /* U+00C8 LATIN CAPITAL LETTER E WITH GRAVE */
const KEY_Eacute uint32 = 0x00c9         /* U+00C9 LATIN CAPITAL LETTER E WITH ACUTE */
const KEY_Ecircumflex uint32 = 0x00ca    /* U+00CA LATIN CAPITAL LETTER E WITH CIRCUMFLEX */
const KEY_Ediaeresis uint32 = 0x00cb     /* U+00CB LATIN CAPITAL LETTER E WITH DIAERESIS */
const KEY_Igrave uint32 = 0x00cc         /* U+00CC LATIN CAPITAL LETTER I WITH GRAVE */
const KEY_Iacute uint32 = 0x00cd         /* U+00CD LATIN CAPITAL LETTER I WITH ACUTE */
const KEY_Icircumflex uint32 = 0x00ce    /* U+00CE LATIN CAPITAL LETTER I WITH CIRCUMFLEX */
const KEY_Idiaeresis uint32 = 0x00cf     /* U+00CF LATIN CAPITAL LETTER I WITH DIAERESIS */
const KEY_ETH uint32 = 0x00d0            /* U+00D0 LATIN CAPITAL LETTER ETH */
const KEY_Eth uint32 = 0x00d0            /* deprecated */
const KEY_Ntilde uint32 = 0x00d1         /* U+00D1 LATIN CAPITAL LETTER N WITH TILDE */
const KEY_Ograve uint32 = 0x00d2         /* U+00D2 LATIN CAPITAL LETTER O WITH GRAVE */
const KEY_Oacute uint32 = 0x00d3         /* U+00D3 LATIN CAPITAL LETTER O WITH ACUTE */
const KEY_Ocircumflex uint32 = 0x00d4    /* U+00D4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX */
const KEY_Otilde uint32 = 0x00d5         /* U+00D5 LATIN CAPITAL LETTER O WITH TILDE */
const KEY_Odiaeresis uint32 = 0x00d6     /* U+00D6 LATIN CAPITAL LETTER O WITH DIAERESIS */
const KEY_multiply uint32 = 0x00d7       /* U+00D7 MULTIPLICATION SIGN */
const KEY_Oslash uint32 = 0x00d8         /* U+00D8 LATIN CAPITAL LETTER O WITH STROKE */
const KEY_Ooblique uint32 = 0x00d8       /* U+00D8 LATIN CAPITAL LETTER O WITH STROKE */
const KEY_Ugrave uint32 = 0x00d9         /* U+00D9 LATIN CAPITAL LETTER U WITH GRAVE */
const KEY_Uacute uint32 = 0x00da         /* U+00DA LATIN CAPITAL LETTER U WITH ACUTE */
const KEY_Ucircumflex uint32 = 0x00db    /* U+00DB LATIN CAPITAL LETTER U WITH CIRCUMFLEX */
const KEY_Udiaeresis uint32 = 0x00dc     /* U+00DC LATIN CAPITAL LETTER U WITH DIAERESIS */
const KEY_Yacute uint32 = 0x00dd         /* U+00DD LATIN CAPITAL LETTER Y WITH ACUTE */
const KEY_THORN uint32 = 0x00de          /* U+00DE LATIN CAPITAL LETTER THORN */
const KEY_Thorn uint32 = 0x00de          /* deprecated */
const KEY_ssharp uint32 = 0x00df         /* U+00DF LATIN SMALL LETTER SHARP S */
const KEY_agrave uint32 = 0x00e0         /* U+00E0 LATIN SMALL LETTER A WITH GRAVE */
const KEY_aacute uint32 = 0x00e1         /* U+00E1 LATIN SMALL LETTER A WITH ACUTE */
const KEY_acircumflex uint32 = 0x00e2    /* U+00E2 LATIN SMALL LETTER A WITH CIRCUMFLEX */
const KEY_atilde uint32 = 0x00e3         /* U+00E3 LATIN SMALL LETTER A WITH TILDE */
const KEY_adiaeresis uint32 = 0x00e4     /* U+00E4 LATIN SMALL LETTER A WITH DIAERESIS */
const KEY_aring uint32 = 0x00e5          /* U+00E5 LATIN SMALL LETTER A WITH RING ABOVE */
const KEY_ae uint32 = 0x00e6             /* U+00E6 LATIN SMALL LETTER AE */
const KEY_ccedilla uint32 = 0x00e7       /* U+00E7 LATIN SMALL LETTER C WITH CEDILLA */
const KEY_egrave uint32 = 0x00e8         /* U+00E8 LATIN SMALL LETTER E WITH GRAVE */
const KEY_eacute uint32 = 0x00e9         /* U+00E9 LATIN SMALL LETTER E WITH ACUTE */
const KEY_ecircumflex uint32 = 0x00ea    /* U+00EA LATIN SMALL LETTER E WITH CIRCUMFLEX */
const KEY_ediaeresis uint32 = 0x00eb     /* U+00EB LATIN SMALL LETTER E WITH DIAERESIS */
const KEY_igrave uint32 = 0x00ec         /* U+00EC LATIN SMALL LETTER I WITH GRAVE */
const KEY_iacute uint32 = 0x00ed         /* U+00ED LATIN SMALL LETTER I WITH ACUTE */
const KEY_icircumflex uint32 = 0x00ee    /* U+00EE LATIN SMALL LETTER I WITH CIRCUMFLEX */
const KEY_idiaeresis uint32 = 0x00ef     /* U+00EF LATIN SMALL LETTER I WITH DIAERESIS */
const KEY_eth uint32 = 0x00f0            /* U+00F0 LATIN SMALL LETTER ETH */
const KEY_ntilde uint32 = 0x00f1         /* U+00F1 LATIN SMALL LETTER N WITH TILDE */
const KEY_ograve uint32 = 0x00f2         /* U+00F2 LATIN SMALL LETTER O WITH GRAVE */
const KEY_oacute uint32 = 0x00f3         /* U+00F3 LATIN SMALL LETTER O WITH ACUTE */
const KEY_ocircumflex uint32 = 0x00f4    /* U+00F4 LATIN SMALL LETTER O WITH CIRCUMFLEX */
const KEY_otilde uint32 = 0x00f5         /* U+00F5 LATIN SMALL LETTER O WITH TILDE */
const KEY_odiaeresis uint32 = 0x00f6     /* U+00F6 LATIN SMALL LETTER O WITH DIAERESIS */
const KEY_division uint32 = 0x00f7       /* U+00F7 DIVISION SIGN */
const KEY_oslash uint32 = 0x00f8         /* U+00F8 LATIN SMALL LETTER O WITH STROKE */
const KEY_ooblique uint32 = 0x00f8       /* U+00F8 LATIN SMALL LETTER O WITH STROKE */
const KEY_ugrave uint32 = 0x00f9         /* U+00F9 LATIN SMALL LETTER U WITH GRAVE */
const KEY_uacute uint32 = 0x00fa         /* U+00FA LATIN SMALL LETTER U WITH ACUTE */
const KEY_ucircumflex uint32 = 0x00fb    /* U+00FB LATIN SMALL LETTER U WITH CIRCUMFLEX */
const KEY_udiaeresis uint32 = 0x00fc     /* U+00FC LATIN SMALL LETTER U WITH DIAERESIS */
const KEY_yacute uint32 = 0x00fd         /* U+00FD LATIN SMALL LETTER Y WITH ACUTE */
const KEY_thorn uint32 = 0x00fe          /* U+00FE LATIN SMALL LETTER THORN */
const KEY_ydiaeresis uint32 = 0x00ff     /* U+00FF LATIN SMALL LETTER Y WITH DIAERESIS */

/*
 * Latin 2
 * Byte 3 uint32 = 1
 */

const KEY_Aogonek uint32 = 0x01a1      /* U+0104 LATIN CAPITAL LETTER A WITH OGONEK */
const KEY_breve uint32 = 0x01a2        /* U+02D8 BREVE */
const KEY_Lstroke uint32 = 0x01a3      /* U+0141 LATIN CAPITAL LETTER L WITH STROKE */
const KEY_Lcaron uint32 = 0x01a5       /* U+013D LATIN CAPITAL LETTER L WITH CARON */
const KEY_Sacute uint32 = 0x01a6       /* U+015A LATIN CAPITAL LETTER S WITH ACUTE */
const KEY_Scaron uint32 = 0x01a9       /* U+0160 LATIN CAPITAL LETTER S WITH CARON */
const KEY_Scedilla uint32 = 0x01aa     /* U+015E LATIN CAPITAL LETTER S WITH CEDILLA */
const KEY_Tcaron uint32 = 0x01ab       /* U+0164 LATIN CAPITAL LETTER T WITH CARON */
const KEY_Zacute uint32 = 0x01ac       /* U+0179 LATIN CAPITAL LETTER Z WITH ACUTE */
const KEY_Zcaron uint32 = 0x01ae       /* U+017D LATIN CAPITAL LETTER Z WITH CARON */
const KEY_Zabovedot uint32 = 0x01af    /* U+017B LATIN CAPITAL LETTER Z WITH DOT ABOVE */
const KEY_aogonek uint32 = 0x01b1      /* U+0105 LATIN SMALL LETTER A WITH OGONEK */
const KEY_ogonek uint32 = 0x01b2       /* U+02DB OGONEK */
const KEY_lstroke uint32 = 0x01b3      /* U+0142 LATIN SMALL LETTER L WITH STROKE */
const KEY_lcaron uint32 = 0x01b5       /* U+013E LATIN SMALL LETTER L WITH CARON */
const KEY_sacute uint32 = 0x01b6       /* U+015B LATIN SMALL LETTER S WITH ACUTE */
const KEY_caron uint32 = 0x01b7        /* U+02C7 CARON */
const KEY_scaron uint32 = 0x01b9       /* U+0161 LATIN SMALL LETTER S WITH CARON */
const KEY_scedilla uint32 = 0x01ba     /* U+015F LATIN SMALL LETTER S WITH CEDILLA */
const KEY_tcaron uint32 = 0x01bb       /* U+0165 LATIN SMALL LETTER T WITH CARON */
const KEY_zacute uint32 = 0x01bc       /* U+017A LATIN SMALL LETTER Z WITH ACUTE */
const KEY_doubleacute uint32 = 0x01bd  /* U+02DD DOUBLE ACUTE ACCENT */
const KEY_zcaron uint32 = 0x01be       /* U+017E LATIN SMALL LETTER Z WITH CARON */
const KEY_zabovedot uint32 = 0x01bf    /* U+017C LATIN SMALL LETTER Z WITH DOT ABOVE */
const KEY_Racute uint32 = 0x01c0       /* U+0154 LATIN CAPITAL LETTER R WITH ACUTE */
const KEY_Abreve uint32 = 0x01c3       /* U+0102 LATIN CAPITAL LETTER A WITH BREVE */
const KEY_Lacute uint32 = 0x01c5       /* U+0139 LATIN CAPITAL LETTER L WITH ACUTE */
const KEY_Cacute uint32 = 0x01c6       /* U+0106 LATIN CAPITAL LETTER C WITH ACUTE */
const KEY_Ccaron uint32 = 0x01c8       /* U+010C LATIN CAPITAL LETTER C WITH CARON */
const KEY_Eogonek uint32 = 0x01ca      /* U+0118 LATIN CAPITAL LETTER E WITH OGONEK */
const KEY_Ecaron uint32 = 0x01cc       /* U+011A LATIN CAPITAL LETTER E WITH CARON */
const KEY_Dcaron uint32 = 0x01cf       /* U+010E LATIN CAPITAL LETTER D WITH CARON */
const KEY_Dstroke uint32 = 0x01d0      /* U+0110 LATIN CAPITAL LETTER D WITH STROKE */
const KEY_Nacute uint32 = 0x01d1       /* U+0143 LATIN CAPITAL LETTER N WITH ACUTE */
const KEY_Ncaron uint32 = 0x01d2       /* U+0147 LATIN CAPITAL LETTER N WITH CARON */
const KEY_Odoubleacute uint32 = 0x01d5 /* U+0150 LATIN CAPITAL LETTER O WITH DOUBLE ACUTE */
const KEY_Rcaron uint32 = 0x01d8       /* U+0158 LATIN CAPITAL LETTER R WITH CARON */
const KEY_Uring uint32 = 0x01d9        /* U+016E LATIN CAPITAL LETTER U WITH RING ABOVE */
const KEY_Udoubleacute uint32 = 0x01db /* U+0170 LATIN CAPITAL LETTER U WITH DOUBLE ACUTE */
const KEY_Tcedilla uint32 = 0x01de     /* U+0162 LATIN CAPITAL LETTER T WITH CEDILLA */
const KEY_racute uint32 = 0x01e0       /* U+0155 LATIN SMALL LETTER R WITH ACUTE */
const KEY_abreve uint32 = 0x01e3       /* U+0103 LATIN SMALL LETTER A WITH BREVE */
const KEY_lacute uint32 = 0x01e5       /* U+013A LATIN SMALL LETTER L WITH ACUTE */
const KEY_cacute uint32 = 0x01e6       /* U+0107 LATIN SMALL LETTER C WITH ACUTE */
const KEY_ccaron uint32 = 0x01e8       /* U+010D LATIN SMALL LETTER C WITH CARON */
const KEY_eogonek uint32 = 0x01ea      /* U+0119 LATIN SMALL LETTER E WITH OGONEK */
const KEY_ecaron uint32 = 0x01ec       /* U+011B LATIN SMALL LETTER E WITH CARON */
const KEY_dcaron uint32 = 0x01ef       /* U+010F LATIN SMALL LETTER D WITH CARON */
const KEY_dstroke uint32 = 0x01f0      /* U+0111 LATIN SMALL LETTER D WITH STROKE */
const KEY_nacute uint32 = 0x01f1       /* U+0144 LATIN SMALL LETTER N WITH ACUTE */
const KEY_ncaron uint32 = 0x01f2       /* U+0148 LATIN SMALL LETTER N WITH CARON */
const KEY_odoubleacute uint32 = 0x01f5 /* U+0151 LATIN SMALL LETTER O WITH DOUBLE ACUTE */
const KEY_rcaron uint32 = 0x01f8       /* U+0159 LATIN SMALL LETTER R WITH CARON */
const KEY_uring uint32 = 0x01f9        /* U+016F LATIN SMALL LETTER U WITH RING ABOVE */
const KEY_udoubleacute uint32 = 0x01fb /* U+0171 LATIN SMALL LETTER U WITH DOUBLE ACUTE */
const KEY_tcedilla uint32 = 0x01fe     /* U+0163 LATIN SMALL LETTER T WITH CEDILLA */
const KEY_abovedot uint32 = 0x01ff     /* U+02D9 DOT ABOVE */

/*
 * Latin 3
 * Byte 3 uint32 = 2
 */

const KEY_Hstroke uint32 = 0x02a1     /* U+0126 LATIN CAPITAL LETTER H WITH STROKE */
const KEY_Hcircumflex uint32 = 0x02a6 /* U+0124 LATIN CAPITAL LETTER H WITH CIRCUMFLEX */
const KEY_Iabovedot uint32 = 0x02a9   /* U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE */
const KEY_Gbreve uint32 = 0x02ab      /* U+011E LATIN CAPITAL LETTER G WITH BREVE */
const KEY_Jcircumflex uint32 = 0x02ac /* U+0134 LATIN CAPITAL LETTER J WITH CIRCUMFLEX */
const KEY_hstroke uint32 = 0x02b1     /* U+0127 LATIN SMALL LETTER H WITH STROKE */
const KEY_hcircumflex uint32 = 0x02b6 /* U+0125 LATIN SMALL LETTER H WITH CIRCUMFLEX */
const KEY_idotless uint32 = 0x02b9    /* U+0131 LATIN SMALL LETTER DOTLESS I */
const KEY_gbreve uint32 = 0x02bb      /* U+011F LATIN SMALL LETTER G WITH BREVE */
const KEY_jcircumflex uint32 = 0x02bc /* U+0135 LATIN SMALL LETTER J WITH CIRCUMFLEX */
const KEY_Cabovedot uint32 = 0x02c5   /* U+010A LATIN CAPITAL LETTER C WITH DOT ABOVE */
const KEY_Ccircumflex uint32 = 0x02c6 /* U+0108 LATIN CAPITAL LETTER C WITH CIRCUMFLEX */
const KEY_Gabovedot uint32 = 0x02d5   /* U+0120 LATIN CAPITAL LETTER G WITH DOT ABOVE */
const KEY_Gcircumflex uint32 = 0x02d8 /* U+011C LATIN CAPITAL LETTER G WITH CIRCUMFLEX */
const KEY_Ubreve uint32 = 0x02dd      /* U+016C LATIN CAPITAL LETTER U WITH BREVE */
const KEY_Scircumflex uint32 = 0x02de /* U+015C LATIN CAPITAL LETTER S WITH CIRCUMFLEX */
const KEY_cabovedot uint32 = 0x02e5   /* U+010B LATIN SMALL LETTER C WITH DOT ABOVE */
const KEY_ccircumflex uint32 = 0x02e6 /* U+0109 LATIN SMALL LETTER C WITH CIRCUMFLEX */
const KEY_gabovedot uint32 = 0x02f5   /* U+0121 LATIN SMALL LETTER G WITH DOT ABOVE */
const KEY_gcircumflex uint32 = 0x02f8 /* U+011D LATIN SMALL LETTER G WITH CIRCUMFLEX */
const KEY_ubreve uint32 = 0x02fd      /* U+016D LATIN SMALL LETTER U WITH BREVE */
const KEY_scircumflex uint32 = 0x02fe /* U+015D LATIN SMALL LETTER S WITH CIRCUMFLEX */

/*
 * Latin 4
 * Byte 3 uint32 = 3
 */

const KEY_kra uint32 = 0x03a2       /* U+0138 LATIN SMALL LETTER KRA */
const KEY_kappa uint32 = 0x03a2     /* deprecated */
const KEY_Rcedilla uint32 = 0x03a3  /* U+0156 LATIN CAPITAL LETTER R WITH CEDILLA */
const KEY_Itilde uint32 = 0x03a5    /* U+0128 LATIN CAPITAL LETTER I WITH TILDE */
const KEY_Lcedilla uint32 = 0x03a6  /* U+013B LATIN CAPITAL LETTER L WITH CEDILLA */
const KEY_Emacron uint32 = 0x03aa   /* U+0112 LATIN CAPITAL LETTER E WITH MACRON */
const KEY_Gcedilla uint32 = 0x03ab  /* U+0122 LATIN CAPITAL LETTER G WITH CEDILLA */
const KEY_Tslash uint32 = 0x03ac    /* U+0166 LATIN CAPITAL LETTER T WITH STROKE */
const KEY_rcedilla uint32 = 0x03b3  /* U+0157 LATIN SMALL LETTER R WITH CEDILLA */
const KEY_itilde uint32 = 0x03b5    /* U+0129 LATIN SMALL LETTER I WITH TILDE */
const KEY_lcedilla uint32 = 0x03b6  /* U+013C LATIN SMALL LETTER L WITH CEDILLA */
const KEY_emacron uint32 = 0x03ba   /* U+0113 LATIN SMALL LETTER E WITH MACRON */
const KEY_gcedilla uint32 = 0x03bb  /* U+0123 LATIN SMALL LETTER G WITH CEDILLA */
const KEY_tslash uint32 = 0x03bc    /* U+0167 LATIN SMALL LETTER T WITH STROKE */
const KEY_ENG uint32 = 0x03bd       /* U+014A LATIN CAPITAL LETTER ENG */
const KEY_eng uint32 = 0x03bf       /* U+014B LATIN SMALL LETTER ENG */
const KEY_Amacron uint32 = 0x03c0   /* U+0100 LATIN CAPITAL LETTER A WITH MACRON */
const KEY_Iogonek uint32 = 0x03c7   /* U+012E LATIN CAPITAL LETTER I WITH OGONEK */
const KEY_Eabovedot uint32 = 0x03cc /* U+0116 LATIN CAPITAL LETTER E WITH DOT ABOVE */
const KEY_Imacron uint32 = 0x03cf   /* U+012A LATIN CAPITAL LETTER I WITH MACRON */
const KEY_Ncedilla uint32 = 0x03d1  /* U+0145 LATIN CAPITAL LETTER N WITH CEDILLA */
const KEY_Omacron uint32 = 0x03d2   /* U+014C LATIN CAPITAL LETTER O WITH MACRON */
const KEY_Kcedilla uint32 = 0x03d3  /* U+0136 LATIN CAPITAL LETTER K WITH CEDILLA */
const KEY_Uogonek uint32 = 0x03d9   /* U+0172 LATIN CAPITAL LETTER U WITH OGONEK */
const KEY_Utilde uint32 = 0x03dd    /* U+0168 LATIN CAPITAL LETTER U WITH TILDE */
const KEY_Umacron uint32 = 0x03de   /* U+016A LATIN CAPITAL LETTER U WITH MACRON */
const KEY_amacron uint32 = 0x03e0   /* U+0101 LATIN SMALL LETTER A WITH MACRON */
const KEY_iogonek uint32 = 0x03e7   /* U+012F LATIN SMALL LETTER I WITH OGONEK */
const KEY_eabovedot uint32 = 0x03ec /* U+0117 LATIN SMALL LETTER E WITH DOT ABOVE */
const KEY_imacron uint32 = 0x03ef   /* U+012B LATIN SMALL LETTER I WITH MACRON */
const KEY_ncedilla uint32 = 0x03f1  /* U+0146 LATIN SMALL LETTER N WITH CEDILLA */
const KEY_omacron uint32 = 0x03f2   /* U+014D LATIN SMALL LETTER O WITH MACRON */
const KEY_kcedilla uint32 = 0x03f3  /* U+0137 LATIN SMALL LETTER K WITH CEDILLA */
const KEY_uogonek uint32 = 0x03f9   /* U+0173 LATIN SMALL LETTER U WITH OGONEK */
const KEY_utilde uint32 = 0x03fd    /* U+0169 LATIN SMALL LETTER U WITH TILDE */
const KEY_umacron uint32 = 0x03fe   /* U+016B LATIN SMALL LETTER U WITH MACRON */

/*
 * Latin 8
 */
const KEY_Wcircumflex uint32 = 0x1000174 /* U+0174 LATIN CAPITAL LETTER W WITH CIRCUMFLEX */
const KEY_wcircumflex uint32 = 0x1000175 /* U+0175 LATIN SMALL LETTER W WITH CIRCUMFLEX */
const KEY_Ycircumflex uint32 = 0x1000176 /* U+0176 LATIN CAPITAL LETTER Y WITH CIRCUMFLEX */
const KEY_ycircumflex uint32 = 0x1000177 /* U+0177 LATIN SMALL LETTER Y WITH CIRCUMFLEX */
const KEY_Babovedot uint32 = 0x1001e02   /* U+1E02 LATIN CAPITAL LETTER B WITH DOT ABOVE */
const KEY_babovedot uint32 = 0x1001e03   /* U+1E03 LATIN SMALL LETTER B WITH DOT ABOVE */
const KEY_Dabovedot uint32 = 0x1001e0a   /* U+1E0A LATIN CAPITAL LETTER D WITH DOT ABOVE */
const KEY_dabovedot uint32 = 0x1001e0b   /* U+1E0B LATIN SMALL LETTER D WITH DOT ABOVE */
const KEY_Fabovedot uint32 = 0x1001e1e   /* U+1E1E LATIN CAPITAL LETTER F WITH DOT ABOVE */
const KEY_fabovedot uint32 = 0x1001e1f   /* U+1E1F LATIN SMALL LETTER F WITH DOT ABOVE */
const KEY_Mabovedot uint32 = 0x1001e40   /* U+1E40 LATIN CAPITAL LETTER M WITH DOT ABOVE */
const KEY_mabovedot uint32 = 0x1001e41   /* U+1E41 LATIN SMALL LETTER M WITH DOT ABOVE */
const KEY_Pabovedot uint32 = 0x1001e56   /* U+1E56 LATIN CAPITAL LETTER P WITH DOT ABOVE */
const KEY_pabovedot uint32 = 0x1001e57   /* U+1E57 LATIN SMALL LETTER P WITH DOT ABOVE */
const KEY_Sabovedot uint32 = 0x1001e60   /* U+1E60 LATIN CAPITAL LETTER S WITH DOT ABOVE */
const KEY_sabovedot uint32 = 0x1001e61   /* U+1E61 LATIN SMALL LETTER S WITH DOT ABOVE */
const KEY_Tabovedot uint32 = 0x1001e6a   /* U+1E6A LATIN CAPITAL LETTER T WITH DOT ABOVE */
const KEY_tabovedot uint32 = 0x1001e6b   /* U+1E6B LATIN SMALL LETTER T WITH DOT ABOVE */
const KEY_Wgrave uint32 = 0x1001e80      /* U+1E80 LATIN CAPITAL LETTER W WITH GRAVE */
const KEY_wgrave uint32 = 0x1001e81      /* U+1E81 LATIN SMALL LETTER W WITH GRAVE */
const KEY_Wacute uint32 = 0x1001e82      /* U+1E82 LATIN CAPITAL LETTER W WITH ACUTE */
const KEY_wacute uint32 = 0x1001e83      /* U+1E83 LATIN SMALL LETTER W WITH ACUTE */
const KEY_Wdiaeresis uint32 = 0x1001e84  /* U+1E84 LATIN CAPITAL LETTER W WITH DIAERESIS */
const KEY_wdiaeresis uint32 = 0x1001e85  /* U+1E85 LATIN SMALL LETTER W WITH DIAERESIS */
const KEY_Ygrave uint32 = 0x1001ef2      /* U+1EF2 LATIN CAPITAL LETTER Y WITH GRAVE */
const KEY_ygrave uint32 = 0x1001ef3      /* U+1EF3 LATIN SMALL LETTER Y WITH GRAVE */

/*
 * Latin 9
 * Byte 3 uint32 = 0x13
 */

const KEY_OE uint32 = 0x13bc         /* U+0152 LATIN CAPITAL LIGATURE OE */
const KEY_oe uint32 = 0x13bd         /* U+0153 LATIN SMALL LIGATURE OE */
const KEY_Ydiaeresis uint32 = 0x13be /* U+0178 LATIN CAPITAL LETTER Y WITH DIAERESIS */

/*
 * Katakana
 * Byte 3 uint32 = 4
 */

const KEY_overline uint32 = 0x047e            /* U+203E OVERLINE */
const KEY_kana_fullstop uint32 = 0x04a1       /* U+3002 IDEOGRAPHIC FULL STOP */
const KEY_kana_openingbracket uint32 = 0x04a2 /* U+300C LEFT CORNER BRACKET */
const KEY_kana_closingbracket uint32 = 0x04a3 /* U+300D RIGHT CORNER BRACKET */
const KEY_kana_comma uint32 = 0x04a4          /* U+3001 IDEOGRAPHIC COMMA */
const KEY_kana_conjunctive uint32 = 0x04a5    /* U+30FB KATAKANA MIDDLE DOT */
const KEY_kana_middledot uint32 = 0x04a5      /* deprecated */
const KEY_kana_WO uint32 = 0x04a6             /* U+30F2 KATAKANA LETTER WO */
const KEY_kana_a uint32 = 0x04a7              /* U+30A1 KATAKANA LETTER SMALL A */
const KEY_kana_i uint32 = 0x04a8              /* U+30A3 KATAKANA LETTER SMALL I */
const KEY_kana_u uint32 = 0x04a9              /* U+30A5 KATAKANA LETTER SMALL U */
const KEY_kana_e uint32 = 0x04aa              /* U+30A7 KATAKANA LETTER SMALL E */
const KEY_kana_o uint32 = 0x04ab              /* U+30A9 KATAKANA LETTER SMALL O */
const KEY_kana_ya uint32 = 0x04ac             /* U+30E3 KATAKANA LETTER SMALL YA */
const KEY_kana_yu uint32 = 0x04ad             /* U+30E5 KATAKANA LETTER SMALL YU */
const KEY_kana_yo uint32 = 0x04ae             /* U+30E7 KATAKANA LETTER SMALL YO */
const KEY_kana_tsu uint32 = 0x04af            /* U+30C3 KATAKANA LETTER SMALL TU */
const KEY_kana_tu uint32 = 0x04af             /* deprecated */
const KEY_prolongedsound uint32 = 0x04b0      /* U+30FC KATAKANA-HIRAGANA PROLONGED SOUND MARK */
const KEY_kana_A uint32 = 0x04b1              /* U+30A2 KATAKANA LETTER A */
const KEY_kana_I uint32 = 0x04b2              /* U+30A4 KATAKANA LETTER I */
const KEY_kana_U uint32 = 0x04b3              /* U+30A6 KATAKANA LETTER U */
const KEY_kana_E uint32 = 0x04b4              /* U+30A8 KATAKANA LETTER E */
const KEY_kana_O uint32 = 0x04b5              /* U+30AA KATAKANA LETTER O */
const KEY_kana_KA uint32 = 0x04b6             /* U+30AB KATAKANA LETTER KA */
const KEY_kana_KI uint32 = 0x04b7             /* U+30AD KATAKANA LETTER KI */
const KEY_kana_KU uint32 = 0x04b8             /* U+30AF KATAKANA LETTER KU */
const KEY_kana_KE uint32 = 0x04b9             /* U+30B1 KATAKANA LETTER KE */
const KEY_kana_KO uint32 = 0x04ba             /* U+30B3 KATAKANA LETTER KO */
const KEY_kana_SA uint32 = 0x04bb             /* U+30B5 KATAKANA LETTER SA */
const KEY_kana_SHI uint32 = 0x04bc            /* U+30B7 KATAKANA LETTER SI */
const KEY_kana_SU uint32 = 0x04bd             /* U+30B9 KATAKANA LETTER SU */
const KEY_kana_SE uint32 = 0x04be             /* U+30BB KATAKANA LETTER SE */
const KEY_kana_SO uint32 = 0x04bf             /* U+30BD KATAKANA LETTER SO */
const KEY_kana_TA uint32 = 0x04c0             /* U+30BF KATAKANA LETTER TA */
const KEY_kana_CHI uint32 = 0x04c1            /* U+30C1 KATAKANA LETTER TI */
const KEY_kana_TI uint32 = 0x04c1             /* deprecated */
const KEY_kana_TSU uint32 = 0x04c2            /* U+30C4 KATAKANA LETTER TU */
const KEY_kana_TU uint32 = 0x04c2             /* deprecated */
const KEY_kana_TE uint32 = 0x04c3             /* U+30C6 KATAKANA LETTER TE */
const KEY_kana_TO uint32 = 0x04c4             /* U+30C8 KATAKANA LETTER TO */
const KEY_kana_NA uint32 = 0x04c5             /* U+30CA KATAKANA LETTER NA */
const KEY_kana_NI uint32 = 0x04c6             /* U+30CB KATAKANA LETTER NI */
const KEY_kana_NU uint32 = 0x04c7             /* U+30CC KATAKANA LETTER NU */
const KEY_kana_NE uint32 = 0x04c8             /* U+30CD KATAKANA LETTER NE */
const KEY_kana_NO uint32 = 0x04c9             /* U+30CE KATAKANA LETTER NO */
const KEY_kana_HA uint32 = 0x04ca             /* U+30CF KATAKANA LETTER HA */
const KEY_kana_HI uint32 = 0x04cb             /* U+30D2 KATAKANA LETTER HI */
const KEY_kana_FU uint32 = 0x04cc             /* U+30D5 KATAKANA LETTER HU */
const KEY_kana_HU uint32 = 0x04cc             /* deprecated */
const KEY_kana_HE uint32 = 0x04cd             /* U+30D8 KATAKANA LETTER HE */
const KEY_kana_HO uint32 = 0x04ce             /* U+30DB KATAKANA LETTER HO */
const KEY_kana_MA uint32 = 0x04cf             /* U+30DE KATAKANA LETTER MA */
const KEY_kana_MI uint32 = 0x04d0             /* U+30DF KATAKANA LETTER MI */
const KEY_kana_MU uint32 = 0x04d1             /* U+30E0 KATAKANA LETTER MU */
const KEY_kana_ME uint32 = 0x04d2             /* U+30E1 KATAKANA LETTER ME */
const KEY_kana_MO uint32 = 0x04d3             /* U+30E2 KATAKANA LETTER MO */
const KEY_kana_YA uint32 = 0x04d4             /* U+30E4 KATAKANA LETTER YA */
const KEY_kana_YU uint32 = 0x04d5             /* U+30E6 KATAKANA LETTER YU */
const KEY_kana_YO uint32 = 0x04d6             /* U+30E8 KATAKANA LETTER YO */
const KEY_kana_RA uint32 = 0x04d7             /* U+30E9 KATAKANA LETTER RA */
const KEY_kana_RI uint32 = 0x04d8             /* U+30EA KATAKANA LETTER RI */
const KEY_kana_RU uint32 = 0x04d9             /* U+30EB KATAKANA LETTER RU */
const KEY_kana_RE uint32 = 0x04da             /* U+30EC KATAKANA LETTER RE */
const KEY_kana_RO uint32 = 0x04db             /* U+30ED KATAKANA LETTER RO */
const KEY_kana_WA uint32 = 0x04dc             /* U+30EF KATAKANA LETTER WA */
const KEY_kana_N uint32 = 0x04dd              /* U+30F3 KATAKANA LETTER N */
const KEY_voicedsound uint32 = 0x04de         /* U+309B KATAKANA-HIRAGANA VOICED SOUND MARK */
const KEY_semivoicedsound uint32 = 0x04df     /* U+309C KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK */
const KEY_kana_switch uint32 = 0xff7e         /* Alias for mode_switch */

/*
 * Arabic
 * Byte 3 uint32 = 5
 */

const KEY_Farsi_0 uint32 = 0x10006f0                 /* U+06F0 EXTENDED ARABIC-INDIC DIGIT ZERO */
const KEY_Farsi_1 uint32 = 0x10006f1                 /* U+06F1 EXTENDED ARABIC-INDIC DIGIT ONE */
const KEY_Farsi_2 uint32 = 0x10006f2                 /* U+06F2 EXTENDED ARABIC-INDIC DIGIT TWO */
const KEY_Farsi_3 uint32 = 0x10006f3                 /* U+06F3 EXTENDED ARABIC-INDIC DIGIT THREE */
const KEY_Farsi_4 uint32 = 0x10006f4                 /* U+06F4 EXTENDED ARABIC-INDIC DIGIT FOUR */
const KEY_Farsi_5 uint32 = 0x10006f5                 /* U+06F5 EXTENDED ARABIC-INDIC DIGIT FIVE */
const KEY_Farsi_6 uint32 = 0x10006f6                 /* U+06F6 EXTENDED ARABIC-INDIC DIGIT SIX */
const KEY_Farsi_7 uint32 = 0x10006f7                 /* U+06F7 EXTENDED ARABIC-INDIC DIGIT SEVEN */
const KEY_Farsi_8 uint32 = 0x10006f8                 /* U+06F8 EXTENDED ARABIC-INDIC DIGIT EIGHT */
const KEY_Farsi_9 uint32 = 0x10006f9                 /* U+06F9 EXTENDED ARABIC-INDIC DIGIT NINE */
const KEY_Arabic_percent uint32 = 0x100066a          /* U+066A ARABIC PERCENT SIGN */
const KEY_Arabic_superscript_alef uint32 = 0x1000670 /* U+0670 ARABIC LETTER SUPERSCRIPT ALEF */
const KEY_Arabic_tteh uint32 = 0x1000679             /* U+0679 ARABIC LETTER TTEH */
const KEY_Arabic_peh uint32 = 0x100067e              /* U+067E ARABIC LETTER PEH */
const KEY_Arabic_tcheh uint32 = 0x1000686            /* U+0686 ARABIC LETTER TCHEH */
const KEY_Arabic_ddal uint32 = 0x1000688             /* U+0688 ARABIC LETTER DDAL */
const KEY_Arabic_rreh uint32 = 0x1000691             /* U+0691 ARABIC LETTER RREH */
const KEY_Arabic_comma uint32 = 0x05ac               /* U+060C ARABIC COMMA */
const KEY_Arabic_fullstop uint32 = 0x10006d4         /* U+06D4 ARABIC FULL STOP */
const KEY_Arabic_0 uint32 = 0x1000660                /* U+0660 ARABIC-INDIC DIGIT ZERO */
const KEY_Arabic_1 uint32 = 0x1000661                /* U+0661 ARABIC-INDIC DIGIT ONE */
const KEY_Arabic_2 uint32 = 0x1000662                /* U+0662 ARABIC-INDIC DIGIT TWO */
const KEY_Arabic_3 uint32 = 0x1000663                /* U+0663 ARABIC-INDIC DIGIT THREE */
const KEY_Arabic_4 uint32 = 0x1000664                /* U+0664 ARABIC-INDIC DIGIT FOUR */
const KEY_Arabic_5 uint32 = 0x1000665                /* U+0665 ARABIC-INDIC DIGIT FIVE */
const KEY_Arabic_6 uint32 = 0x1000666                /* U+0666 ARABIC-INDIC DIGIT SIX */
const KEY_Arabic_7 uint32 = 0x1000667                /* U+0667 ARABIC-INDIC DIGIT SEVEN */
const KEY_Arabic_8 uint32 = 0x1000668                /* U+0668 ARABIC-INDIC DIGIT EIGHT */
const KEY_Arabic_9 uint32 = 0x1000669                /* U+0669 ARABIC-INDIC DIGIT NINE */
const KEY_Arabic_semicolon uint32 = 0x05bb           /* U+061B ARABIC SEMICOLON */
const KEY_Arabic_question_mark uint32 = 0x05bf       /* U+061F ARABIC QUESTION MARK */
const KEY_Arabic_hamza uint32 = 0x05c1               /* U+0621 ARABIC LETTER HAMZA */
const KEY_Arabic_maddaonalef uint32 = 0x05c2         /* U+0622 ARABIC LETTER ALEF WITH MADDA ABOVE */
const KEY_Arabic_hamzaonalef uint32 = 0x05c3         /* U+0623 ARABIC LETTER ALEF WITH HAMZA ABOVE */
const KEY_Arabic_hamzaonwaw uint32 = 0x05c4          /* U+0624 ARABIC LETTER WAW WITH HAMZA ABOVE */
const KEY_Arabic_hamzaunderalef uint32 = 0x05c5      /* U+0625 ARABIC LETTER ALEF WITH HAMZA BELOW */
const KEY_Arabic_hamzaonyeh uint32 = 0x05c6          /* U+0626 ARABIC LETTER YEH WITH HAMZA ABOVE */
const KEY_Arabic_alef uint32 = 0x05c7                /* U+0627 ARABIC LETTER ALEF */
const KEY_Arabic_beh uint32 = 0x05c8                 /* U+0628 ARABIC LETTER BEH */
const KEY_Arabic_tehmarbuta uint32 = 0x05c9          /* U+0629 ARABIC LETTER TEH MARBUTA */
const KEY_Arabic_teh uint32 = 0x05ca                 /* U+062A ARABIC LETTER TEH */
const KEY_Arabic_theh uint32 = 0x05cb                /* U+062B ARABIC LETTER THEH */
const KEY_Arabic_jeem uint32 = 0x05cc                /* U+062C ARABIC LETTER JEEM */
const KEY_Arabic_hah uint32 = 0x05cd                 /* U+062D ARABIC LETTER HAH */
const KEY_Arabic_khah uint32 = 0x05ce                /* U+062E ARABIC LETTER KHAH */
const KEY_Arabic_dal uint32 = 0x05cf                 /* U+062F ARABIC LETTER DAL */
const KEY_Arabic_thal uint32 = 0x05d0                /* U+0630 ARABIC LETTER THAL */
const KEY_Arabic_ra uint32 = 0x05d1                  /* U+0631 ARABIC LETTER REH */
const KEY_Arabic_zain uint32 = 0x05d2                /* U+0632 ARABIC LETTER ZAIN */
const KEY_Arabic_seen uint32 = 0x05d3                /* U+0633 ARABIC LETTER SEEN */
const KEY_Arabic_sheen uint32 = 0x05d4               /* U+0634 ARABIC LETTER SHEEN */
const KEY_Arabic_sad uint32 = 0x05d5                 /* U+0635 ARABIC LETTER SAD */
const KEY_Arabic_dad uint32 = 0x05d6                 /* U+0636 ARABIC LETTER DAD */
const KEY_Arabic_tah uint32 = 0x05d7                 /* U+0637 ARABIC LETTER TAH */
const KEY_Arabic_zah uint32 = 0x05d8                 /* U+0638 ARABIC LETTER ZAH */
const KEY_Arabic_ain uint32 = 0x05d9                 /* U+0639 ARABIC LETTER AIN */
const KEY_Arabic_ghain uint32 = 0x05da               /* U+063A ARABIC LETTER GHAIN */
const KEY_Arabic_tatweel uint32 = 0x05e0             /* U+0640 ARABIC TATWEEL */
const KEY_Arabic_feh uint32 = 0x05e1                 /* U+0641 ARABIC LETTER FEH */
const KEY_Arabic_qaf uint32 = 0x05e2                 /* U+0642 ARABIC LETTER QAF */
const KEY_Arabic_kaf uint32 = 0x05e3                 /* U+0643 ARABIC LETTER KAF */
const KEY_Arabic_lam uint32 = 0x05e4                 /* U+0644 ARABIC LETTER LAM */
const KEY_Arabic_meem uint32 = 0x05e5                /* U+0645 ARABIC LETTER MEEM */
const KEY_Arabic_noon uint32 = 0x05e6                /* U+0646 ARABIC LETTER NOON */
const KEY_Arabic_ha uint32 = 0x05e7                  /* U+0647 ARABIC LETTER HEH */
const KEY_Arabic_heh uint32 = 0x05e7                 /* deprecated */
const KEY_Arabic_waw uint32 = 0x05e8                 /* U+0648 ARABIC LETTER WAW */
const KEY_Arabic_alefmaksura uint32 = 0x05e9         /* U+0649 ARABIC LETTER ALEF MAKSURA */
const KEY_Arabic_yeh uint32 = 0x05ea                 /* U+064A ARABIC LETTER YEH */
const KEY_Arabic_fathatan uint32 = 0x05eb            /* U+064B ARABIC FATHATAN */
const KEY_Arabic_dammatan uint32 = 0x05ec            /* U+064C ARABIC DAMMATAN */
const KEY_Arabic_kasratan uint32 = 0x05ed            /* U+064D ARABIC KASRATAN */
const KEY_Arabic_fatha uint32 = 0x05ee               /* U+064E ARABIC FATHA */
const KEY_Arabic_damma uint32 = 0x05ef               /* U+064F ARABIC DAMMA */
const KEY_Arabic_kasra uint32 = 0x05f0               /* U+0650 ARABIC KASRA */
const KEY_Arabic_shadda uint32 = 0x05f1              /* U+0651 ARABIC SHADDA */
const KEY_Arabic_sukun uint32 = 0x05f2               /* U+0652 ARABIC SUKUN */
const KEY_Arabic_madda_above uint32 = 0x1000653      /* U+0653 ARABIC MADDAH ABOVE */
const KEY_Arabic_hamza_above uint32 = 0x1000654      /* U+0654 ARABIC HAMZA ABOVE */
const KEY_Arabic_hamza_below uint32 = 0x1000655      /* U+0655 ARABIC HAMZA BELOW */
const KEY_Arabic_jeh uint32 = 0x1000698              /* U+0698 ARABIC LETTER JEH */
const KEY_Arabic_veh uint32 = 0x10006a4              /* U+06A4 ARABIC LETTER VEH */
const KEY_Arabic_keheh uint32 = 0x10006a9            /* U+06A9 ARABIC LETTER KEHEH */
const KEY_Arabic_gaf uint32 = 0x10006af              /* U+06AF ARABIC LETTER GAF */
const KEY_Arabic_noon_ghunna uint32 = 0x10006ba      /* U+06BA ARABIC LETTER NOON GHUNNA */
const KEY_Arabic_heh_doachashmee uint32 = 0x10006be  /* U+06BE ARABIC LETTER HEH DOACHASHMEE */
const KEY_Farsi_yeh uint32 = 0x10006cc               /* U+06CC ARABIC LETTER FARSI YEH */
const KEY_Arabic_farsi_yeh uint32 = 0x10006cc        /* U+06CC ARABIC LETTER FARSI YEH */
const KEY_Arabic_yeh_baree uint32 = 0x10006d2        /* U+06D2 ARABIC LETTER YEH BARREE */
const KEY_Arabic_heh_goal uint32 = 0x10006c1         /* U+06C1 ARABIC LETTER HEH GOAL */
const KEY_Arabic_switch uint32 = 0xff7e              /* Alias for mode_switch */

/*
 * Cyrillic
 * Byte 3 uint32 = 6
 */
const KEY_Cyrillic_GHE_bar uint32 = 0x1000492        /* U+0492 CYRILLIC CAPITAL LETTER GHE WITH STROKE */
const KEY_Cyrillic_ghe_bar uint32 = 0x1000493        /* U+0493 CYRILLIC SMALL LETTER GHE WITH STROKE */
const KEY_Cyrillic_ZHE_descender uint32 = 0x1000496  /* U+0496 CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER */
const KEY_Cyrillic_zhe_descender uint32 = 0x1000497  /* U+0497 CYRILLIC SMALL LETTER ZHE WITH DESCENDER */
const KEY_Cyrillic_KA_descender uint32 = 0x100049a   /* U+049A CYRILLIC CAPITAL LETTER KA WITH DESCENDER */
const KEY_Cyrillic_ka_descender uint32 = 0x100049b   /* U+049B CYRILLIC SMALL LETTER KA WITH DESCENDER */
const KEY_Cyrillic_KA_vertstroke uint32 = 0x100049c  /* U+049C CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE */
const KEY_Cyrillic_ka_vertstroke uint32 = 0x100049d  /* U+049D CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE */
const KEY_Cyrillic_EN_descender uint32 = 0x10004a2   /* U+04A2 CYRILLIC CAPITAL LETTER EN WITH DESCENDER */
const KEY_Cyrillic_en_descender uint32 = 0x10004a3   /* U+04A3 CYRILLIC SMALL LETTER EN WITH DESCENDER */
const KEY_Cyrillic_U_straight uint32 = 0x10004ae     /* U+04AE CYRILLIC CAPITAL LETTER STRAIGHT U */
const KEY_Cyrillic_u_straight uint32 = 0x10004af     /* U+04AF CYRILLIC SMALL LETTER STRAIGHT U */
const KEY_Cyrillic_U_straight_bar uint32 = 0x10004b0 /* U+04B0 CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE */
const KEY_Cyrillic_u_straight_bar uint32 = 0x10004b1 /* U+04B1 CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE */
const KEY_Cyrillic_HA_descender uint32 = 0x10004b2   /* U+04B2 CYRILLIC CAPITAL LETTER HA WITH DESCENDER */
const KEY_Cyrillic_ha_descender uint32 = 0x10004b3   /* U+04B3 CYRILLIC SMALL LETTER HA WITH DESCENDER */
const KEY_Cyrillic_CHE_descender uint32 = 0x10004b6  /* U+04B6 CYRILLIC CAPITAL LETTER CHE WITH DESCENDER */
const KEY_Cyrillic_che_descender uint32 = 0x10004b7  /* U+04B7 CYRILLIC SMALL LETTER CHE WITH DESCENDER */
const KEY_Cyrillic_CHE_vertstroke uint32 = 0x10004b8 /* U+04B8 CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE */
const KEY_Cyrillic_che_vertstroke uint32 = 0x10004b9 /* U+04B9 CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE */
const KEY_Cyrillic_SHHA uint32 = 0x10004ba           /* U+04BA CYRILLIC CAPITAL LETTER SHHA */
const KEY_Cyrillic_shha uint32 = 0x10004bb           /* U+04BB CYRILLIC SMALL LETTER SHHA */

const KEY_Cyrillic_SCHWA uint32 = 0x10004d8    /* U+04D8 CYRILLIC CAPITAL LETTER SCHWA */
const KEY_Cyrillic_schwa uint32 = 0x10004d9    /* U+04D9 CYRILLIC SMALL LETTER SCHWA */
const KEY_Cyrillic_I_macron uint32 = 0x10004e2 /* U+04E2 CYRILLIC CAPITAL LETTER I WITH MACRON */
const KEY_Cyrillic_i_macron uint32 = 0x10004e3 /* U+04E3 CYRILLIC SMALL LETTER I WITH MACRON */
const KEY_Cyrillic_O_bar uint32 = 0x10004e8    /* U+04E8 CYRILLIC CAPITAL LETTER BARRED O */
const KEY_Cyrillic_o_bar uint32 = 0x10004e9    /* U+04E9 CYRILLIC SMALL LETTER BARRED O */
const KEY_Cyrillic_U_macron uint32 = 0x10004ee /* U+04EE CYRILLIC CAPITAL LETTER U WITH MACRON */
const KEY_Cyrillic_u_macron uint32 = 0x10004ef /* U+04EF CYRILLIC SMALL LETTER U WITH MACRON */

const KEY_Serbian_dje uint32 = 0x06a1               /* U+0452 CYRILLIC SMALL LETTER DJE */
const KEY_Macedonia_gje uint32 = 0x06a2             /* U+0453 CYRILLIC SMALL LETTER GJE */
const KEY_Cyrillic_io uint32 = 0x06a3               /* U+0451 CYRILLIC SMALL LETTER IO */
const KEY_Ukrainian_ie uint32 = 0x06a4              /* U+0454 CYRILLIC SMALL LETTER UKRAINIAN IE */
const KEY_Ukranian_je uint32 = 0x06a4               /* deprecated */
const KEY_Macedonia_dse uint32 = 0x06a5             /* U+0455 CYRILLIC SMALL LETTER DZE */
const KEY_Ukrainian_i uint32 = 0x06a6               /* U+0456 CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I */
const KEY_Ukranian_i uint32 = 0x06a6                /* deprecated */
const KEY_Ukrainian_yi uint32 = 0x06a7              /* U+0457 CYRILLIC SMALL LETTER YI */
const KEY_Ukranian_yi uint32 = 0x06a7               /* deprecated */
const KEY_Cyrillic_je uint32 = 0x06a8               /* U+0458 CYRILLIC SMALL LETTER JE */
const KEY_Serbian_je uint32 = 0x06a8                /* deprecated */
const KEY_Cyrillic_lje uint32 = 0x06a9              /* U+0459 CYRILLIC SMALL LETTER LJE */
const KEY_Serbian_lje uint32 = 0x06a9               /* deprecated */
const KEY_Cyrillic_nje uint32 = 0x06aa              /* U+045A CYRILLIC SMALL LETTER NJE */
const KEY_Serbian_nje uint32 = 0x06aa               /* deprecated */
const KEY_Serbian_tshe uint32 = 0x06ab              /* U+045B CYRILLIC SMALL LETTER TSHE */
const KEY_Macedonia_kje uint32 = 0x06ac             /* U+045C CYRILLIC SMALL LETTER KJE */
const KEY_Ukrainian_ghe_with_upturn uint32 = 0x06ad /* U+0491 CYRILLIC SMALL LETTER GHE WITH UPTURN */
const KEY_Byelorussian_shortu uint32 = 0x06ae       /* U+045E CYRILLIC SMALL LETTER SHORT U */
const KEY_Cyrillic_dzhe uint32 = 0x06af             /* U+045F CYRILLIC SMALL LETTER DZHE */
const KEY_Serbian_dze uint32 = 0x06af               /* deprecated */
const KEY_numerosign uint32 = 0x06b0                /* U+2116 NUMERO SIGN */
const KEY_Serbian_DJE uint32 = 0x06b1               /* U+0402 CYRILLIC CAPITAL LETTER DJE */
const KEY_Macedonia_GJE uint32 = 0x06b2             /* U+0403 CYRILLIC CAPITAL LETTER GJE */
const KEY_Cyrillic_IO uint32 = 0x06b3               /* U+0401 CYRILLIC CAPITAL LETTER IO */
const KEY_Ukrainian_IE uint32 = 0x06b4              /* U+0404 CYRILLIC CAPITAL LETTER UKRAINIAN IE */
const KEY_Ukranian_JE uint32 = 0x06b4               /* deprecated */
const KEY_Macedonia_DSE uint32 = 0x06b5             /* U+0405 CYRILLIC CAPITAL LETTER DZE */
const KEY_Ukrainian_I uint32 = 0x06b6               /* U+0406 CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I */
const KEY_Ukranian_I uint32 = 0x06b6                /* deprecated */
const KEY_Ukrainian_YI uint32 = 0x06b7              /* U+0407 CYRILLIC CAPITAL LETTER YI */
const KEY_Ukranian_YI uint32 = 0x06b7               /* deprecated */
const KEY_Cyrillic_JE uint32 = 0x06b8               /* U+0408 CYRILLIC CAPITAL LETTER JE */
const KEY_Serbian_JE uint32 = 0x06b8                /* deprecated */
const KEY_Cyrillic_LJE uint32 = 0x06b9              /* U+0409 CYRILLIC CAPITAL LETTER LJE */
const KEY_Serbian_LJE uint32 = 0x06b9               /* deprecated */
const KEY_Cyrillic_NJE uint32 = 0x06ba              /* U+040A CYRILLIC CAPITAL LETTER NJE */
const KEY_Serbian_NJE uint32 = 0x06ba               /* deprecated */
const KEY_Serbian_TSHE uint32 = 0x06bb              /* U+040B CYRILLIC CAPITAL LETTER TSHE */
const KEY_Macedonia_KJE uint32 = 0x06bc             /* U+040C CYRILLIC CAPITAL LETTER KJE */
const KEY_Ukrainian_GHE_WITH_UPTURN uint32 = 0x06bd /* U+0490 CYRILLIC CAPITAL LETTER GHE WITH UPTURN */
const KEY_Byelorussian_SHORTU uint32 = 0x06be       /* U+040E CYRILLIC CAPITAL LETTER SHORT U */
const KEY_Cyrillic_DZHE uint32 = 0x06bf             /* U+040F CYRILLIC CAPITAL LETTER DZHE */
const KEY_Serbian_DZE uint32 = 0x06bf               /* deprecated */
const KEY_Cyrillic_yu uint32 = 0x06c0               /* U+044E CYRILLIC SMALL LETTER YU */
const KEY_Cyrillic_a uint32 = 0x06c1                /* U+0430 CYRILLIC SMALL LETTER A */
const KEY_Cyrillic_be uint32 = 0x06c2               /* U+0431 CYRILLIC SMALL LETTER BE */
const KEY_Cyrillic_tse uint32 = 0x06c3              /* U+0446 CYRILLIC SMALL LETTER TSE */
const KEY_Cyrillic_de uint32 = 0x06c4               /* U+0434 CYRILLIC SMALL LETTER DE */
const KEY_Cyrillic_ie uint32 = 0x06c5               /* U+0435 CYRILLIC SMALL LETTER IE */
const KEY_Cyrillic_ef uint32 = 0x06c6               /* U+0444 CYRILLIC SMALL LETTER EF */
const KEY_Cyrillic_ghe uint32 = 0x06c7              /* U+0433 CYRILLIC SMALL LETTER GHE */
const KEY_Cyrillic_ha uint32 = 0x06c8               /* U+0445 CYRILLIC SMALL LETTER HA */
const KEY_Cyrillic_i uint32 = 0x06c9                /* U+0438 CYRILLIC SMALL LETTER I */
const KEY_Cyrillic_shorti uint32 = 0x06ca           /* U+0439 CYRILLIC SMALL LETTER SHORT I */
const KEY_Cyrillic_ka uint32 = 0x06cb               /* U+043A CYRILLIC SMALL LETTER KA */
const KEY_Cyrillic_el uint32 = 0x06cc               /* U+043B CYRILLIC SMALL LETTER EL */
const KEY_Cyrillic_em uint32 = 0x06cd               /* U+043C CYRILLIC SMALL LETTER EM */
const KEY_Cyrillic_en uint32 = 0x06ce               /* U+043D CYRILLIC SMALL LETTER EN */
const KEY_Cyrillic_o uint32 = 0x06cf                /* U+043E CYRILLIC SMALL LETTER O */
const KEY_Cyrillic_pe uint32 = 0x06d0               /* U+043F CYRILLIC SMALL LETTER PE */
const KEY_Cyrillic_ya uint32 = 0x06d1               /* U+044F CYRILLIC SMALL LETTER YA */
const KEY_Cyrillic_er uint32 = 0x06d2               /* U+0440 CYRILLIC SMALL LETTER ER */
const KEY_Cyrillic_es uint32 = 0x06d3               /* U+0441 CYRILLIC SMALL LETTER ES */
const KEY_Cyrillic_te uint32 = 0x06d4               /* U+0442 CYRILLIC SMALL LETTER TE */
const KEY_Cyrillic_u uint32 = 0x06d5                /* U+0443 CYRILLIC SMALL LETTER U */
const KEY_Cyrillic_zhe uint32 = 0x06d6              /* U+0436 CYRILLIC SMALL LETTER ZHE */
const KEY_Cyrillic_ve uint32 = 0x06d7               /* U+0432 CYRILLIC SMALL LETTER VE */
const KEY_Cyrillic_softsign uint32 = 0x06d8         /* U+044C CYRILLIC SMALL LETTER SOFT SIGN */
const KEY_Cyrillic_yeru uint32 = 0x06d9             /* U+044B CYRILLIC SMALL LETTER YERU */
const KEY_Cyrillic_ze uint32 = 0x06da               /* U+0437 CYRILLIC SMALL LETTER ZE */
const KEY_Cyrillic_sha uint32 = 0x06db              /* U+0448 CYRILLIC SMALL LETTER SHA */
const KEY_Cyrillic_e uint32 = 0x06dc                /* U+044D CYRILLIC SMALL LETTER E */
const KEY_Cyrillic_shcha uint32 = 0x06dd            /* U+0449 CYRILLIC SMALL LETTER SHCHA */
const KEY_Cyrillic_che uint32 = 0x06de              /* U+0447 CYRILLIC SMALL LETTER CHE */
const KEY_Cyrillic_hardsign uint32 = 0x06df         /* U+044A CYRILLIC SMALL LETTER HARD SIGN */
const KEY_Cyrillic_YU uint32 = 0x06e0               /* U+042E CYRILLIC CAPITAL LETTER YU */
const KEY_Cyrillic_A uint32 = 0x06e1                /* U+0410 CYRILLIC CAPITAL LETTER A */
const KEY_Cyrillic_BE uint32 = 0x06e2               /* U+0411 CYRILLIC CAPITAL LETTER BE */
const KEY_Cyrillic_TSE uint32 = 0x06e3              /* U+0426 CYRILLIC CAPITAL LETTER TSE */
const KEY_Cyrillic_DE uint32 = 0x06e4               /* U+0414 CYRILLIC CAPITAL LETTER DE */
const KEY_Cyrillic_IE uint32 = 0x06e5               /* U+0415 CYRILLIC CAPITAL LETTER IE */
const KEY_Cyrillic_EF uint32 = 0x06e6               /* U+0424 CYRILLIC CAPITAL LETTER EF */
const KEY_Cyrillic_GHE uint32 = 0x06e7              /* U+0413 CYRILLIC CAPITAL LETTER GHE */
const KEY_Cyrillic_HA uint32 = 0x06e8               /* U+0425 CYRILLIC CAPITAL LETTER HA */
const KEY_Cyrillic_I uint32 = 0x06e9                /* U+0418 CYRILLIC CAPITAL LETTER I */
const KEY_Cyrillic_SHORTI uint32 = 0x06ea           /* U+0419 CYRILLIC CAPITAL LETTER SHORT I */
const KEY_Cyrillic_KA uint32 = 0x06eb               /* U+041A CYRILLIC CAPITAL LETTER KA */
const KEY_Cyrillic_EL uint32 = 0x06ec               /* U+041B CYRILLIC CAPITAL LETTER EL */
const KEY_Cyrillic_EM uint32 = 0x06ed               /* U+041C CYRILLIC CAPITAL LETTER EM */
const KEY_Cyrillic_EN uint32 = 0x06ee               /* U+041D CYRILLIC CAPITAL LETTER EN */
const KEY_Cyrillic_O uint32 = 0x06ef                /* U+041E CYRILLIC CAPITAL LETTER O */
const KEY_Cyrillic_PE uint32 = 0x06f0               /* U+041F CYRILLIC CAPITAL LETTER PE */
const KEY_Cyrillic_YA uint32 = 0x06f1               /* U+042F CYRILLIC CAPITAL LETTER YA */
const KEY_Cyrillic_ER uint32 = 0x06f2               /* U+0420 CYRILLIC CAPITAL LETTER ER */
const KEY_Cyrillic_ES uint32 = 0x06f3               /* U+0421 CYRILLIC CAPITAL LETTER ES */
const KEY_Cyrillic_TE uint32 = 0x06f4               /* U+0422 CYRILLIC CAPITAL LETTER TE */
const KEY_Cyrillic_U uint32 = 0x06f5                /* U+0423 CYRILLIC CAPITAL LETTER U */
const KEY_Cyrillic_ZHE uint32 = 0x06f6              /* U+0416 CYRILLIC CAPITAL LETTER ZHE */
const KEY_Cyrillic_VE uint32 = 0x06f7               /* U+0412 CYRILLIC CAPITAL LETTER VE */
const KEY_Cyrillic_SOFTSIGN uint32 = 0x06f8         /* U+042C CYRILLIC CAPITAL LETTER SOFT SIGN */
const KEY_Cyrillic_YERU uint32 = 0x06f9             /* U+042B CYRILLIC CAPITAL LETTER YERU */
const KEY_Cyrillic_ZE uint32 = 0x06fa               /* U+0417 CYRILLIC CAPITAL LETTER ZE */
const KEY_Cyrillic_SHA uint32 = 0x06fb              /* U+0428 CYRILLIC CAPITAL LETTER SHA */
const KEY_Cyrillic_E uint32 = 0x06fc                /* U+042D CYRILLIC CAPITAL LETTER E */
const KEY_Cyrillic_SHCHA uint32 = 0x06fd            /* U+0429 CYRILLIC CAPITAL LETTER SHCHA */
const KEY_Cyrillic_CHE uint32 = 0x06fe              /* U+0427 CYRILLIC CAPITAL LETTER CHE */
const KEY_Cyrillic_HARDSIGN uint32 = 0x06ff         /* U+042A CYRILLIC CAPITAL LETTER HARD SIGN */

/*
 * Greek
 * (based on an early draft of, and not quite identical to, ISO/IEC 8859-7)
 * Byte 3 uint32 = 7
 */

const KEY_Greek_ALPHAaccent uint32 = 0x07a1           /* U+0386 GREEK CAPITAL LETTER ALPHA WITH TONOS */
const KEY_Greek_EPSILONaccent uint32 = 0x07a2         /* U+0388 GREEK CAPITAL LETTER EPSILON WITH TONOS */
const KEY_Greek_ETAaccent uint32 = 0x07a3             /* U+0389 GREEK CAPITAL LETTER ETA WITH TONOS */
const KEY_Greek_IOTAaccent uint32 = 0x07a4            /* U+038A GREEK CAPITAL LETTER IOTA WITH TONOS */
const KEY_Greek_IOTAdieresis uint32 = 0x07a5          /* U+03AA GREEK CAPITAL LETTER IOTA WITH DIALYTIKA */
const KEY_Greek_IOTAdiaeresis uint32 = 0x07a5         /* old typo */
const KEY_Greek_OMICRONaccent uint32 = 0x07a7         /* U+038C GREEK CAPITAL LETTER OMICRON WITH TONOS */
const KEY_Greek_UPSILONaccent uint32 = 0x07a8         /* U+038E GREEK CAPITAL LETTER UPSILON WITH TONOS */
const KEY_Greek_UPSILONdieresis uint32 = 0x07a9       /* U+03AB GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA */
const KEY_Greek_OMEGAaccent uint32 = 0x07ab           /* U+038F GREEK CAPITAL LETTER OMEGA WITH TONOS */
const KEY_Greek_accentdieresis uint32 = 0x07ae        /* U+0385 GREEK DIALYTIKA TONOS */
const KEY_Greek_horizbar uint32 = 0x07af              /* U+2015 HORIZONTAL BAR */
const KEY_Greek_alphaaccent uint32 = 0x07b1           /* U+03AC GREEK SMALL LETTER ALPHA WITH TONOS */
const KEY_Greek_epsilonaccent uint32 = 0x07b2         /* U+03AD GREEK SMALL LETTER EPSILON WITH TONOS */
const KEY_Greek_etaaccent uint32 = 0x07b3             /* U+03AE GREEK SMALL LETTER ETA WITH TONOS */
const KEY_Greek_iotaaccent uint32 = 0x07b4            /* U+03AF GREEK SMALL LETTER IOTA WITH TONOS */
const KEY_Greek_iotadieresis uint32 = 0x07b5          /* U+03CA GREEK SMALL LETTER IOTA WITH DIALYTIKA */
const KEY_Greek_iotaaccentdieresis uint32 = 0x07b6    /* U+0390 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS */
const KEY_Greek_omicronaccent uint32 = 0x07b7         /* U+03CC GREEK SMALL LETTER OMICRON WITH TONOS */
const KEY_Greek_upsilonaccent uint32 = 0x07b8         /* U+03CD GREEK SMALL LETTER UPSILON WITH TONOS */
const KEY_Greek_upsilondieresis uint32 = 0x07b9       /* U+03CB GREEK SMALL LETTER UPSILON WITH DIALYTIKA */
const KEY_Greek_upsilonaccentdieresis uint32 = 0x07ba /* U+03B0 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS */
const KEY_Greek_omegaaccent uint32 = 0x07bb           /* U+03CE GREEK SMALL LETTER OMEGA WITH TONOS */
const KEY_Greek_ALPHA uint32 = 0x07c1                 /* U+0391 GREEK CAPITAL LETTER ALPHA */
const KEY_Greek_BETA uint32 = 0x07c2                  /* U+0392 GREEK CAPITAL LETTER BETA */
const KEY_Greek_GAMMA uint32 = 0x07c3                 /* U+0393 GREEK CAPITAL LETTER GAMMA */
const KEY_Greek_DELTA uint32 = 0x07c4                 /* U+0394 GREEK CAPITAL LETTER DELTA */
const KEY_Greek_EPSILON uint32 = 0x07c5               /* U+0395 GREEK CAPITAL LETTER EPSILON */
const KEY_Greek_ZETA uint32 = 0x07c6                  /* U+0396 GREEK CAPITAL LETTER ZETA */
const KEY_Greek_ETA uint32 = 0x07c7                   /* U+0397 GREEK CAPITAL LETTER ETA */
const KEY_Greek_THETA uint32 = 0x07c8                 /* U+0398 GREEK CAPITAL LETTER THETA */
const KEY_Greek_IOTA uint32 = 0x07c9                  /* U+0399 GREEK CAPITAL LETTER IOTA */
const KEY_Greek_KAPPA uint32 = 0x07ca                 /* U+039A GREEK CAPITAL LETTER KAPPA */
const KEY_Greek_LAMDA uint32 = 0x07cb                 /* U+039B GREEK CAPITAL LETTER LAMDA */
const KEY_Greek_LAMBDA uint32 = 0x07cb                /* U+039B GREEK CAPITAL LETTER LAMDA */
const KEY_Greek_MU uint32 = 0x07cc                    /* U+039C GREEK CAPITAL LETTER MU */
const KEY_Greek_NU uint32 = 0x07cd                    /* U+039D GREEK CAPITAL LETTER NU */
const KEY_Greek_XI uint32 = 0x07ce                    /* U+039E GREEK CAPITAL LETTER XI */
const KEY_Greek_OMICRON uint32 = 0x07cf               /* U+039F GREEK CAPITAL LETTER OMICRON */
const KEY_Greek_PI uint32 = 0x07d0                    /* U+03A0 GREEK CAPITAL LETTER PI */
const KEY_Greek_RHO uint32 = 0x07d1                   /* U+03A1 GREEK CAPITAL LETTER RHO */
const KEY_Greek_SIGMA uint32 = 0x07d2                 /* U+03A3 GREEK CAPITAL LETTER SIGMA */
const KEY_Greek_TAU uint32 = 0x07d4                   /* U+03A4 GREEK CAPITAL LETTER TAU */
const KEY_Greek_UPSILON uint32 = 0x07d5               /* U+03A5 GREEK CAPITAL LETTER UPSILON */
const KEY_Greek_PHI uint32 = 0x07d6                   /* U+03A6 GREEK CAPITAL LETTER PHI */
const KEY_Greek_CHI uint32 = 0x07d7                   /* U+03A7 GREEK CAPITAL LETTER CHI */
const KEY_Greek_PSI uint32 = 0x07d8                   /* U+03A8 GREEK CAPITAL LETTER PSI */
const KEY_Greek_OMEGA uint32 = 0x07d9                 /* U+03A9 GREEK CAPITAL LETTER OMEGA */
const KEY_Greek_alpha uint32 = 0x07e1                 /* U+03B1 GREEK SMALL LETTER ALPHA */
const KEY_Greek_beta uint32 = 0x07e2                  /* U+03B2 GREEK SMALL LETTER BETA */
const KEY_Greek_gamma uint32 = 0x07e3                 /* U+03B3 GREEK SMALL LETTER GAMMA */
const KEY_Greek_delta uint32 = 0x07e4                 /* U+03B4 GREEK SMALL LETTER DELTA */
const KEY_Greek_epsilon uint32 = 0x07e5               /* U+03B5 GREEK SMALL LETTER EPSILON */
const KEY_Greek_zeta uint32 = 0x07e6                  /* U+03B6 GREEK SMALL LETTER ZETA */
const KEY_Greek_eta uint32 = 0x07e7                   /* U+03B7 GREEK SMALL LETTER ETA */
const KEY_Greek_theta uint32 = 0x07e8                 /* U+03B8 GREEK SMALL LETTER THETA */
const KEY_Greek_iota uint32 = 0x07e9                  /* U+03B9 GREEK SMALL LETTER IOTA */
const KEY_Greek_kappa uint32 = 0x07ea                 /* U+03BA GREEK SMALL LETTER KAPPA */
const KEY_Greek_lamda uint32 = 0x07eb                 /* U+03BB GREEK SMALL LETTER LAMDA */
const KEY_Greek_lambda uint32 = 0x07eb                /* U+03BB GREEK SMALL LETTER LAMDA */
const KEY_Greek_mu uint32 = 0x07ec                    /* U+03BC GREEK SMALL LETTER MU */
const KEY_Greek_nu uint32 = 0x07ed                    /* U+03BD GREEK SMALL LETTER NU */
const KEY_Greek_xi uint32 = 0x07ee                    /* U+03BE GREEK SMALL LETTER XI */
const KEY_Greek_omicron uint32 = 0x07ef               /* U+03BF GREEK SMALL LETTER OMICRON */
const KEY_Greek_pi uint32 = 0x07f0                    /* U+03C0 GREEK SMALL LETTER PI */
const KEY_Greek_rho uint32 = 0x07f1                   /* U+03C1 GREEK SMALL LETTER RHO */
const KEY_Greek_sigma uint32 = 0x07f2                 /* U+03C3 GREEK SMALL LETTER SIGMA */
const KEY_Greek_finalsmallsigma uint32 = 0x07f3       /* U+03C2 GREEK SMALL LETTER FINAL SIGMA */
const KEY_Greek_tau uint32 = 0x07f4                   /* U+03C4 GREEK SMALL LETTER TAU */
const KEY_Greek_upsilon uint32 = 0x07f5               /* U+03C5 GREEK SMALL LETTER UPSILON */
const KEY_Greek_phi uint32 = 0x07f6                   /* U+03C6 GREEK SMALL LETTER PHI */
const KEY_Greek_chi uint32 = 0x07f7                   /* U+03C7 GREEK SMALL LETTER CHI */
const KEY_Greek_psi uint32 = 0x07f8                   /* U+03C8 GREEK SMALL LETTER PSI */
const KEY_Greek_omega uint32 = 0x07f9                 /* U+03C9 GREEK SMALL LETTER OMEGA */
const KEY_Greek_switch uint32 = 0xff7e                /* Alias for mode_switch */

/*
 * Technical
 * (from the DEC VT330/VT420 Technical Character Set, http://vt100.net/charsets/technical.html)
 * Byte 3 uint32 = 8
 */

const KEY_leftradical uint32 = 0x08a1           /* U+23B7 RADICAL SYMBOL BOTTOM */
const KEY_topleftradical uint32 = 0x08a2        /*(U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT)*/
const KEY_horizconnector uint32 = 0x08a3        /*(U+2500 BOX DRAWINGS LIGHT HORIZONTAL)*/
const KEY_topintegral uint32 = 0x08a4           /* U+2320 TOP HALF INTEGRAL */
const KEY_botintegral uint32 = 0x08a5           /* U+2321 BOTTOM HALF INTEGRAL */
const KEY_vertconnector uint32 = 0x08a6         /*(U+2502 BOX DRAWINGS LIGHT VERTICAL)*/
const KEY_topleftsqbracket uint32 = 0x08a7      /* U+23A1 LEFT SQUARE BRACKET UPPER CORNER */
const KEY_botleftsqbracket uint32 = 0x08a8      /* U+23A3 LEFT SQUARE BRACKET LOWER CORNER */
const KEY_toprightsqbracket uint32 = 0x08a9     /* U+23A4 RIGHT SQUARE BRACKET UPPER CORNER */
const KEY_botrightsqbracket uint32 = 0x08aa     /* U+23A6 RIGHT SQUARE BRACKET LOWER CORNER */
const KEY_topleftparens uint32 = 0x08ab         /* U+239B LEFT PARENTHESIS UPPER HOOK */
const KEY_botleftparens uint32 = 0x08ac         /* U+239D LEFT PARENTHESIS LOWER HOOK */
const KEY_toprightparens uint32 = 0x08ad        /* U+239E RIGHT PARENTHESIS UPPER HOOK */
const KEY_botrightparens uint32 = 0x08ae        /* U+23A0 RIGHT PARENTHESIS LOWER HOOK */
const KEY_leftmiddlecurlybrace uint32 = 0x08af  /* U+23A8 LEFT CURLY BRACKET MIDDLE PIECE */
const KEY_rightmiddlecurlybrace uint32 = 0x08b0 /* U+23AC RIGHT CURLY BRACKET MIDDLE PIECE */
const KEY_topleftsummation uint32 = 0x08b1
const KEY_botleftsummation uint32 = 0x08b2
const KEY_topvertsummationconnector uint32 = 0x08b3
const KEY_botvertsummationconnector uint32 = 0x08b4
const KEY_toprightsummation uint32 = 0x08b5
const KEY_botrightsummation uint32 = 0x08b6
const KEY_rightmiddlesummation uint32 = 0x08b7
const KEY_lessthanequal uint32 = 0x08bc     /* U+2264 LESS-THAN OR EQUAL TO */
const KEY_notequal uint32 = 0x08bd          /* U+2260 NOT EQUAL TO */
const KEY_greaterthanequal uint32 = 0x08be  /* U+2265 GREATER-THAN OR EQUAL TO */
const KEY_integral uint32 = 0x08bf          /* U+222B INTEGRAL */
const KEY_therefore uint32 = 0x08c0         /* U+2234 THEREFORE */
const KEY_variation uint32 = 0x08c1         /* U+221D PROPORTIONAL TO */
const KEY_infinity uint32 = 0x08c2          /* U+221E INFINITY */
const KEY_nabla uint32 = 0x08c5             /* U+2207 NABLA */
const KEY_approximate uint32 = 0x08c8       /* U+223C TILDE OPERATOR */
const KEY_similarequal uint32 = 0x08c9      /* U+2243 ASYMPTOTICALLY EQUAL TO */
const KEY_ifonlyif uint32 = 0x08cd          /* U+21D4 LEFT RIGHT DOUBLE ARROW */
const KEY_implies uint32 = 0x08ce           /* U+21D2 RIGHTWARDS DOUBLE ARROW */
const KEY_identical uint32 = 0x08cf         /* U+2261 IDENTICAL TO */
const KEY_radical uint32 = 0x08d6           /* U+221A SQUARE ROOT */
const KEY_includedin uint32 = 0x08da        /* U+2282 SUBSET OF */
const KEY_includes uint32 = 0x08db          /* U+2283 SUPERSET OF */
const KEY_intersection uint32 = 0x08dc      /* U+2229 INTERSECTION */
const KEY_union uint32 = 0x08dd             /* U+222A UNION */
const KEY_logicaland uint32 = 0x08de        /* U+2227 LOGICAL AND */
const KEY_logicalor uint32 = 0x08df         /* U+2228 LOGICAL OR */
const KEY_partialderivative uint32 = 0x08ef /* U+2202 PARTIAL DIFFERENTIAL */
const KEY_function uint32 = 0x08f6          /* U+0192 LATIN SMALL LETTER F WITH HOOK */
const KEY_leftarrow uint32 = 0x08fb         /* U+2190 LEFTWARDS ARROW */
const KEY_uparrow uint32 = 0x08fc           /* U+2191 UPWARDS ARROW */
const KEY_rightarrow uint32 = 0x08fd        /* U+2192 RIGHTWARDS ARROW */
const KEY_downarrow uint32 = 0x08fe         /* U+2193 DOWNWARDS ARROW */

/*
 * Special
 * (from the DEC VT100 Special Graphics Character Set)
 * Byte 3 uint32 = 9
 */

const KEY_blank uint32 = 0x09df
const KEY_soliddiamond uint32 = 0x09e0   /* U+25C6 BLACK DIAMOND */
const KEY_checkerboard uint32 = 0x09e1   /* U+2592 MEDIUM SHADE */
const KEY_ht uint32 = 0x09e2             /* U+2409 SYMBOL FOR HORIZONTAL TABULATION */
const KEY_ff uint32 = 0x09e3             /* U+240C SYMBOL FOR FORM FEED */
const KEY_cr uint32 = 0x09e4             /* U+240D SYMBOL FOR CARRIAGE RETURN */
const KEY_lf uint32 = 0x09e5             /* U+240A SYMBOL FOR LINE FEED */
const KEY_nl uint32 = 0x09e8             /* U+2424 SYMBOL FOR NEWLINE */
const KEY_vt uint32 = 0x09e9             /* U+240B SYMBOL FOR VERTICAL TABULATION */
const KEY_lowrightcorner uint32 = 0x09ea /* U+2518 BOX DRAWINGS LIGHT UP AND LEFT */
const KEY_uprightcorner uint32 = 0x09eb  /* U+2510 BOX DRAWINGS LIGHT DOWN AND LEFT */
const KEY_upleftcorner uint32 = 0x09ec   /* U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT */
const KEY_lowleftcorner uint32 = 0x09ed  /* U+2514 BOX DRAWINGS LIGHT UP AND RIGHT */
const KEY_crossinglines uint32 = 0x09ee  /* U+253C BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL */
const KEY_horizlinescan1 uint32 = 0x09ef /* U+23BA HORIZONTAL SCAN LINE-1 */
const KEY_horizlinescan3 uint32 = 0x09f0 /* U+23BB HORIZONTAL SCAN LINE-3 */
const KEY_horizlinescan5 uint32 = 0x09f1 /* U+2500 BOX DRAWINGS LIGHT HORIZONTAL */
const KEY_horizlinescan7 uint32 = 0x09f2 /* U+23BC HORIZONTAL SCAN LINE-7 */
const KEY_horizlinescan9 uint32 = 0x09f3 /* U+23BD HORIZONTAL SCAN LINE-9 */
const KEY_leftt uint32 = 0x09f4          /* U+251C BOX DRAWINGS LIGHT VERTICAL AND RIGHT */
const KEY_rightt uint32 = 0x09f5         /* U+2524 BOX DRAWINGS LIGHT VERTICAL AND LEFT */
const KEY_bott uint32 = 0x09f6           /* U+2534 BOX DRAWINGS LIGHT UP AND HORIZONTAL */
const KEY_topt uint32 = 0x09f7           /* U+252C BOX DRAWINGS LIGHT DOWN AND HORIZONTAL */
const KEY_vertbar uint32 = 0x09f8        /* U+2502 BOX DRAWINGS LIGHT VERTICAL */

/*
 * Publishing
 * (these are probably from a long forgotten DEC Publishing
 * font that once shipped with DECwrite)
 * Byte 3 uint32 = 0x0a
 */

const KEY_emspace uint32 = 0x0aa1           /* U+2003 EM SPACE */
const KEY_enspace uint32 = 0x0aa2           /* U+2002 EN SPACE */
const KEY_em3space uint32 = 0x0aa3          /* U+2004 THREE-PER-EM SPACE */
const KEY_em4space uint32 = 0x0aa4          /* U+2005 FOUR-PER-EM SPACE */
const KEY_digitspace uint32 = 0x0aa5        /* U+2007 FIGURE SPACE */
const KEY_punctspace uint32 = 0x0aa6        /* U+2008 PUNCTUATION SPACE */
const KEY_thinspace uint32 = 0x0aa7         /* U+2009 THIN SPACE */
const KEY_hairspace uint32 = 0x0aa8         /* U+200A HAIR SPACE */
const KEY_emdash uint32 = 0x0aa9            /* U+2014 EM DASH */
const KEY_endash uint32 = 0x0aaa            /* U+2013 EN DASH */
const KEY_signifblank uint32 = 0x0aac       /*(U+2423 OPEN BOX)*/
const KEY_ellipsis uint32 = 0x0aae          /* U+2026 HORIZONTAL ELLIPSIS */
const KEY_doubbaselinedot uint32 = 0x0aaf   /* U+2025 TWO DOT LEADER */
const KEY_onethird uint32 = 0x0ab0          /* U+2153 VULGAR FRACTION ONE THIRD */
const KEY_twothirds uint32 = 0x0ab1         /* U+2154 VULGAR FRACTION TWO THIRDS */
const KEY_onefifth uint32 = 0x0ab2          /* U+2155 VULGAR FRACTION ONE FIFTH */
const KEY_twofifths uint32 = 0x0ab3         /* U+2156 VULGAR FRACTION TWO FIFTHS */
const KEY_threefifths uint32 = 0x0ab4       /* U+2157 VULGAR FRACTION THREE FIFTHS */
const KEY_fourfifths uint32 = 0x0ab5        /* U+2158 VULGAR FRACTION FOUR FIFTHS */
const KEY_onesixth uint32 = 0x0ab6          /* U+2159 VULGAR FRACTION ONE SIXTH */
const KEY_fivesixths uint32 = 0x0ab7        /* U+215A VULGAR FRACTION FIVE SIXTHS */
const KEY_careof uint32 = 0x0ab8            /* U+2105 CARE OF */
const KEY_figdash uint32 = 0x0abb           /* U+2012 FIGURE DASH */
const KEY_leftanglebracket uint32 = 0x0abc  /*(U+2329 LEFT-POINTING ANGLE BRACKET)*/
const KEY_decimalpoint uint32 = 0x0abd      /*(U+002E FULL STOP)*/
const KEY_rightanglebracket uint32 = 0x0abe /*(U+232A RIGHT-POINTING ANGLE BRACKET)*/
const KEY_marker uint32 = 0x0abf
const KEY_oneeighth uint32 = 0x0ac3     /* U+215B VULGAR FRACTION ONE EIGHTH */
const KEY_threeeighths uint32 = 0x0ac4  /* U+215C VULGAR FRACTION THREE EIGHTHS */
const KEY_fiveeighths uint32 = 0x0ac5   /* U+215D VULGAR FRACTION FIVE EIGHTHS */
const KEY_seveneighths uint32 = 0x0ac6  /* U+215E VULGAR FRACTION SEVEN EIGHTHS */
const KEY_trademark uint32 = 0x0ac9     /* U+2122 TRADE MARK SIGN */
const KEY_signaturemark uint32 = 0x0aca /*(U+2613 SALTIRE)*/
const KEY_trademarkincircle uint32 = 0x0acb
const KEY_leftopentriangle uint32 = 0x0acc     /*(U+25C1 WHITE LEFT-POINTING TRIANGLE)*/
const KEY_rightopentriangle uint32 = 0x0acd    /*(U+25B7 WHITE RIGHT-POINTING TRIANGLE)*/
const KEY_emopencircle uint32 = 0x0ace         /*(U+25CB WHITE CIRCLE)*/
const KEY_emopenrectangle uint32 = 0x0acf      /*(U+25AF WHITE VERTICAL RECTANGLE)*/
const KEY_leftsinglequotemark uint32 = 0x0ad0  /* U+2018 LEFT SINGLE QUOTATION MARK */
const KEY_rightsinglequotemark uint32 = 0x0ad1 /* U+2019 RIGHT SINGLE QUOTATION MARK */
const KEY_leftdoublequotemark uint32 = 0x0ad2  /* U+201C LEFT DOUBLE QUOTATION MARK */
const KEY_rightdoublequotemark uint32 = 0x0ad3 /* U+201D RIGHT DOUBLE QUOTATION MARK */
const KEY_prescription uint32 = 0x0ad4         /* U+211E PRESCRIPTION TAKE */
const KEY_permille uint32 = 0x0ad5             /* U+2030 PER MILLE SIGN */
const KEY_minutes uint32 = 0x0ad6              /* U+2032 PRIME */
const KEY_seconds uint32 = 0x0ad7              /* U+2033 DOUBLE PRIME */
const KEY_latincross uint32 = 0x0ad9           /* U+271D LATIN CROSS */
const KEY_hexagram uint32 = 0x0ada
const KEY_filledrectbullet uint32 = 0x0adb     /*(U+25AC BLACK RECTANGLE)*/
const KEY_filledlefttribullet uint32 = 0x0adc  /*(U+25C0 BLACK LEFT-POINTING TRIANGLE)*/
const KEY_filledrighttribullet uint32 = 0x0add /*(U+25B6 BLACK RIGHT-POINTING TRIANGLE)*/
const KEY_emfilledcircle uint32 = 0x0ade       /*(U+25CF BLACK CIRCLE)*/
const KEY_emfilledrect uint32 = 0x0adf         /*(U+25AE BLACK VERTICAL RECTANGLE)*/
const KEY_enopencircbullet uint32 = 0x0ae0     /*(U+25E6 WHITE BULLET)*/
const KEY_enopensquarebullet uint32 = 0x0ae1   /*(U+25AB WHITE SMALL SQUARE)*/
const KEY_openrectbullet uint32 = 0x0ae2       /*(U+25AD WHITE RECTANGLE)*/
const KEY_opentribulletup uint32 = 0x0ae3      /*(U+25B3 WHITE UP-POINTING TRIANGLE)*/
const KEY_opentribulletdown uint32 = 0x0ae4    /*(U+25BD WHITE DOWN-POINTING TRIANGLE)*/
const KEY_openstar uint32 = 0x0ae5             /*(U+2606 WHITE STAR)*/
const KEY_enfilledcircbullet uint32 = 0x0ae6   /*(U+2022 BULLET)*/
const KEY_enfilledsqbullet uint32 = 0x0ae7     /*(U+25AA BLACK SMALL SQUARE)*/
const KEY_filledtribulletup uint32 = 0x0ae8    /*(U+25B2 BLACK UP-POINTING TRIANGLE)*/
const KEY_filledtribulletdown uint32 = 0x0ae9  /*(U+25BC BLACK DOWN-POINTING TRIANGLE)*/
const KEY_leftpointer uint32 = 0x0aea          /*(U+261C WHITE LEFT POINTING INDEX)*/
const KEY_rightpointer uint32 = 0x0aeb         /*(U+261E WHITE RIGHT POINTING INDEX)*/
const KEY_club uint32 = 0x0aec                 /* U+2663 BLACK CLUB SUIT */
const KEY_diamond uint32 = 0x0aed              /* U+2666 BLACK DIAMOND SUIT */
const KEY_heart uint32 = 0x0aee                /* U+2665 BLACK HEART SUIT */
const KEY_maltesecross uint32 = 0x0af0         /* U+2720 MALTESE CROSS */
const KEY_dagger uint32 = 0x0af1               /* U+2020 DAGGER */
const KEY_doubledagger uint32 = 0x0af2         /* U+2021 DOUBLE DAGGER */
const KEY_checkmark uint32 = 0x0af3            /* U+2713 CHECK MARK */
const KEY_ballotcross uint32 = 0x0af4          /* U+2717 BALLOT X */
const KEY_musicalsharp uint32 = 0x0af5         /* U+266F MUSIC SHARP SIGN */
const KEY_musicalflat uint32 = 0x0af6          /* U+266D MUSIC FLAT SIGN */
const KEY_malesymbol uint32 = 0x0af7           /* U+2642 MALE SIGN */
const KEY_femalesymbol uint32 = 0x0af8         /* U+2640 FEMALE SIGN */
const KEY_telephone uint32 = 0x0af9            /* U+260E BLACK TELEPHONE */
const KEY_telephonerecorder uint32 = 0x0afa    /* U+2315 TELEPHONE RECORDER */
const KEY_phonographcopyright uint32 = 0x0afb  /* U+2117 SOUND RECORDING COPYRIGHT */
const KEY_caret uint32 = 0x0afc                /* U+2038 CARET */
const KEY_singlelowquotemark uint32 = 0x0afd   /* U+201A SINGLE LOW-9 QUOTATION MARK */
const KEY_doublelowquotemark uint32 = 0x0afe   /* U+201E DOUBLE LOW-9 QUOTATION MARK */
const KEY_cursor uint32 = 0x0aff

/*
 * APL
 * Byte 3 uint32 = 0x0b
 */

const KEY_leftcaret uint32 = 0x0ba3  /*(U+003C LESS-THAN SIGN)*/
const KEY_rightcaret uint32 = 0x0ba6 /*(U+003E GREATER-THAN SIGN)*/
const KEY_downcaret uint32 = 0x0ba8  /*(U+2228 LOGICAL OR)*/
const KEY_upcaret uint32 = 0x0ba9    /*(U+2227 LOGICAL AND)*/
const KEY_overbar uint32 = 0x0bc0    /*(U+00AF MACRON)*/
const KEY_downtack uint32 = 0x0bc2   /* U+22A4 DOWN TACK */
const KEY_upshoe uint32 = 0x0bc3     /*(U+2229 INTERSECTION)*/
const KEY_downstile uint32 = 0x0bc4  /* U+230A LEFT FLOOR */
const KEY_underbar uint32 = 0x0bc6   /*(U+005F LOW LINE)*/
const KEY_jot uint32 = 0x0bca        /* U+2218 RING OPERATOR */
const KEY_quad uint32 = 0x0bcc       /* U+2395 APL FUNCTIONAL SYMBOL QUAD */
const KEY_uptack uint32 = 0x0bce     /* U+22A5 UP TACK */
const KEY_circle uint32 = 0x0bcf     /* U+25CB WHITE CIRCLE */
const KEY_upstile uint32 = 0x0bd3    /* U+2308 LEFT CEILING */
const KEY_downshoe uint32 = 0x0bd6   /*(U+222A UNION)*/
const KEY_rightshoe uint32 = 0x0bd8  /*(U+2283 SUPERSET OF)*/
const KEY_leftshoe uint32 = 0x0bda   /*(U+2282 SUBSET OF)*/
const KEY_lefttack uint32 = 0x0bdc   /* U+22A3 LEFT TACK */
const KEY_righttack uint32 = 0x0bfc  /* U+22A2 RIGHT TACK */

/*
 * Hebrew
 * Byte 3 uint32 = 0x0c
 */

const KEY_hebrew_doublelowline uint32 = 0x0cdf /* U+2017 DOUBLE LOW LINE */
const KEY_hebrew_aleph uint32 = 0x0ce0         /* U+05D0 HEBREW LETTER ALEF */
const KEY_hebrew_bet uint32 = 0x0ce1           /* U+05D1 HEBREW LETTER BET */
const KEY_hebrew_beth uint32 = 0x0ce1          /* deprecated */
const KEY_hebrew_gimel uint32 = 0x0ce2         /* U+05D2 HEBREW LETTER GIMEL */
const KEY_hebrew_gimmel uint32 = 0x0ce2        /* deprecated */
const KEY_hebrew_dalet uint32 = 0x0ce3         /* U+05D3 HEBREW LETTER DALET */
const KEY_hebrew_daleth uint32 = 0x0ce3        /* deprecated */
const KEY_hebrew_he uint32 = 0x0ce4            /* U+05D4 HEBREW LETTER HE */
const KEY_hebrew_waw uint32 = 0x0ce5           /* U+05D5 HEBREW LETTER VAV */
const KEY_hebrew_zain uint32 = 0x0ce6          /* U+05D6 HEBREW LETTER ZAYIN */
const KEY_hebrew_zayin uint32 = 0x0ce6         /* deprecated */
const KEY_hebrew_chet uint32 = 0x0ce7          /* U+05D7 HEBREW LETTER HET */
const KEY_hebrew_het uint32 = 0x0ce7           /* deprecated */
const KEY_hebrew_tet uint32 = 0x0ce8           /* U+05D8 HEBREW LETTER TET */
const KEY_hebrew_teth uint32 = 0x0ce8          /* deprecated */
const KEY_hebrew_yod uint32 = 0x0ce9           /* U+05D9 HEBREW LETTER YOD */
const KEY_hebrew_finalkaph uint32 = 0x0cea     /* U+05DA HEBREW LETTER FINAL KAF */
const KEY_hebrew_kaph uint32 = 0x0ceb          /* U+05DB HEBREW LETTER KAF */
const KEY_hebrew_lamed uint32 = 0x0cec         /* U+05DC HEBREW LETTER LAMED */
const KEY_hebrew_finalmem uint32 = 0x0ced      /* U+05DD HEBREW LETTER FINAL MEM */
const KEY_hebrew_mem uint32 = 0x0cee           /* U+05DE HEBREW LETTER MEM */
const KEY_hebrew_finalnun uint32 = 0x0cef      /* U+05DF HEBREW LETTER FINAL NUN */
const KEY_hebrew_nun uint32 = 0x0cf0           /* U+05E0 HEBREW LETTER NUN */
const KEY_hebrew_samech uint32 = 0x0cf1        /* U+05E1 HEBREW LETTER SAMEKH */
const KEY_hebrew_samekh uint32 = 0x0cf1        /* deprecated */
const KEY_hebrew_ayin uint32 = 0x0cf2          /* U+05E2 HEBREW LETTER AYIN */
const KEY_hebrew_finalpe uint32 = 0x0cf3       /* U+05E3 HEBREW LETTER FINAL PE */
const KEY_hebrew_pe uint32 = 0x0cf4            /* U+05E4 HEBREW LETTER PE */
const KEY_hebrew_finalzade uint32 = 0x0cf5     /* U+05E5 HEBREW LETTER FINAL TSADI */
const KEY_hebrew_finalzadi uint32 = 0x0cf5     /* deprecated */
const KEY_hebrew_zade uint32 = 0x0cf6          /* U+05E6 HEBREW LETTER TSADI */
const KEY_hebrew_zadi uint32 = 0x0cf6          /* deprecated */
const KEY_hebrew_qoph uint32 = 0x0cf7          /* U+05E7 HEBREW LETTER QOF */
const KEY_hebrew_kuf uint32 = 0x0cf7           /* deprecated */
const KEY_hebrew_resh uint32 = 0x0cf8          /* U+05E8 HEBREW LETTER RESH */
const KEY_hebrew_shin uint32 = 0x0cf9          /* U+05E9 HEBREW LETTER SHIN */
const KEY_hebrew_taw uint32 = 0x0cfa           /* U+05EA HEBREW LETTER TAV */
const KEY_hebrew_taf uint32 = 0x0cfa           /* deprecated */
const KEY_Hebrew_switch uint32 = 0xff7e        /* Alias for mode_switch */

/*
 * Thai
 * Byte 3 uint32 = 0x0d
 */

const KEY_Thai_kokai uint32 = 0x0da1         /* U+0E01 THAI CHARACTER KO KAI */
const KEY_Thai_khokhai uint32 = 0x0da2       /* U+0E02 THAI CHARACTER KHO KHAI */
const KEY_Thai_khokhuat uint32 = 0x0da3      /* U+0E03 THAI CHARACTER KHO KHUAT */
const KEY_Thai_khokhwai uint32 = 0x0da4      /* U+0E04 THAI CHARACTER KHO KHWAI */
const KEY_Thai_khokhon uint32 = 0x0da5       /* U+0E05 THAI CHARACTER KHO KHON */
const KEY_Thai_khorakhang uint32 = 0x0da6    /* U+0E06 THAI CHARACTER KHO RAKHANG */
const KEY_Thai_ngongu uint32 = 0x0da7        /* U+0E07 THAI CHARACTER NGO NGU */
const KEY_Thai_chochan uint32 = 0x0da8       /* U+0E08 THAI CHARACTER CHO CHAN */
const KEY_Thai_choching uint32 = 0x0da9      /* U+0E09 THAI CHARACTER CHO CHING */
const KEY_Thai_chochang uint32 = 0x0daa      /* U+0E0A THAI CHARACTER CHO CHANG */
const KEY_Thai_soso uint32 = 0x0dab          /* U+0E0B THAI CHARACTER SO SO */
const KEY_Thai_chochoe uint32 = 0x0dac       /* U+0E0C THAI CHARACTER CHO CHOE */
const KEY_Thai_yoying uint32 = 0x0dad        /* U+0E0D THAI CHARACTER YO YING */
const KEY_Thai_dochada uint32 = 0x0dae       /* U+0E0E THAI CHARACTER DO CHADA */
const KEY_Thai_topatak uint32 = 0x0daf       /* U+0E0F THAI CHARACTER TO PATAK */
const KEY_Thai_thothan uint32 = 0x0db0       /* U+0E10 THAI CHARACTER THO THAN */
const KEY_Thai_thonangmontho uint32 = 0x0db1 /* U+0E11 THAI CHARACTER THO NANGMONTHO */
const KEY_Thai_thophuthao uint32 = 0x0db2    /* U+0E12 THAI CHARACTER THO PHUTHAO */
const KEY_Thai_nonen uint32 = 0x0db3         /* U+0E13 THAI CHARACTER NO NEN */
const KEY_Thai_dodek uint32 = 0x0db4         /* U+0E14 THAI CHARACTER DO DEK */
const KEY_Thai_totao uint32 = 0x0db5         /* U+0E15 THAI CHARACTER TO TAO */
const KEY_Thai_thothung uint32 = 0x0db6      /* U+0E16 THAI CHARACTER THO THUNG */
const KEY_Thai_thothahan uint32 = 0x0db7     /* U+0E17 THAI CHARACTER THO THAHAN */
const KEY_Thai_thothong uint32 = 0x0db8      /* U+0E18 THAI CHARACTER THO THONG */
const KEY_Thai_nonu uint32 = 0x0db9          /* U+0E19 THAI CHARACTER NO NU */
const KEY_Thai_bobaimai uint32 = 0x0dba      /* U+0E1A THAI CHARACTER BO BAIMAI */
const KEY_Thai_popla uint32 = 0x0dbb         /* U+0E1B THAI CHARACTER PO PLA */
const KEY_Thai_phophung uint32 = 0x0dbc      /* U+0E1C THAI CHARACTER PHO PHUNG */
const KEY_Thai_fofa uint32 = 0x0dbd          /* U+0E1D THAI CHARACTER FO FA */
const KEY_Thai_phophan uint32 = 0x0dbe       /* U+0E1E THAI CHARACTER PHO PHAN */
const KEY_Thai_fofan uint32 = 0x0dbf         /* U+0E1F THAI CHARACTER FO FAN */
const KEY_Thai_phosamphao uint32 = 0x0dc0    /* U+0E20 THAI CHARACTER PHO SAMPHAO */
const KEY_Thai_moma uint32 = 0x0dc1          /* U+0E21 THAI CHARACTER MO MA */
const KEY_Thai_yoyak uint32 = 0x0dc2         /* U+0E22 THAI CHARACTER YO YAK */
const KEY_Thai_rorua uint32 = 0x0dc3         /* U+0E23 THAI CHARACTER RO RUA */
const KEY_Thai_ru uint32 = 0x0dc4            /* U+0E24 THAI CHARACTER RU */
const KEY_Thai_loling uint32 = 0x0dc5        /* U+0E25 THAI CHARACTER LO LING */
const KEY_Thai_lu uint32 = 0x0dc6            /* U+0E26 THAI CHARACTER LU */
const KEY_Thai_wowaen uint32 = 0x0dc7        /* U+0E27 THAI CHARACTER WO WAEN */
const KEY_Thai_sosala uint32 = 0x0dc8        /* U+0E28 THAI CHARACTER SO SALA */
const KEY_Thai_sorusi uint32 = 0x0dc9        /* U+0E29 THAI CHARACTER SO RUSI */
const KEY_Thai_sosua uint32 = 0x0dca         /* U+0E2A THAI CHARACTER SO SUA */
const KEY_Thai_hohip uint32 = 0x0dcb         /* U+0E2B THAI CHARACTER HO HIP */
const KEY_Thai_lochula uint32 = 0x0dcc       /* U+0E2C THAI CHARACTER LO CHULA */
const KEY_Thai_oang uint32 = 0x0dcd          /* U+0E2D THAI CHARACTER O ANG */
const KEY_Thai_honokhuk uint32 = 0x0dce      /* U+0E2E THAI CHARACTER HO NOKHUK */
const KEY_Thai_paiyannoi uint32 = 0x0dcf     /* U+0E2F THAI CHARACTER PAIYANNOI */
const KEY_Thai_saraa uint32 = 0x0dd0         /* U+0E30 THAI CHARACTER SARA A */
const KEY_Thai_maihanakat uint32 = 0x0dd1    /* U+0E31 THAI CHARACTER MAI HAN-AKAT */
const KEY_Thai_saraaa uint32 = 0x0dd2        /* U+0E32 THAI CHARACTER SARA AA */
const KEY_Thai_saraam uint32 = 0x0dd3        /* U+0E33 THAI CHARACTER SARA AM */
const KEY_Thai_sarai uint32 = 0x0dd4         /* U+0E34 THAI CHARACTER SARA I */
const KEY_Thai_saraii uint32 = 0x0dd5        /* U+0E35 THAI CHARACTER SARA II */
const KEY_Thai_saraue uint32 = 0x0dd6        /* U+0E36 THAI CHARACTER SARA UE */
const KEY_Thai_sarauee uint32 = 0x0dd7       /* U+0E37 THAI CHARACTER SARA UEE */
const KEY_Thai_sarau uint32 = 0x0dd8         /* U+0E38 THAI CHARACTER SARA U */
const KEY_Thai_sarauu uint32 = 0x0dd9        /* U+0E39 THAI CHARACTER SARA UU */
const KEY_Thai_phinthu uint32 = 0x0dda       /* U+0E3A THAI CHARACTER PHINTHU */
const KEY_Thai_maihanakat_maitho uint32 = 0x0dde
const KEY_Thai_baht uint32 = 0x0ddf           /* U+0E3F THAI CURRENCY SYMBOL BAHT */
const KEY_Thai_sarae uint32 = 0x0de0          /* U+0E40 THAI CHARACTER SARA E */
const KEY_Thai_saraae uint32 = 0x0de1         /* U+0E41 THAI CHARACTER SARA AE */
const KEY_Thai_sarao uint32 = 0x0de2          /* U+0E42 THAI CHARACTER SARA O */
const KEY_Thai_saraaimaimuan uint32 = 0x0de3  /* U+0E43 THAI CHARACTER SARA AI MAIMUAN */
const KEY_Thai_saraaimaimalai uint32 = 0x0de4 /* U+0E44 THAI CHARACTER SARA AI MAIMALAI */
const KEY_Thai_lakkhangyao uint32 = 0x0de5    /* U+0E45 THAI CHARACTER LAKKHANGYAO */
const KEY_Thai_maiyamok uint32 = 0x0de6       /* U+0E46 THAI CHARACTER MAIYAMOK */
const KEY_Thai_maitaikhu uint32 = 0x0de7      /* U+0E47 THAI CHARACTER MAITAIKHU */
const KEY_Thai_maiek uint32 = 0x0de8          /* U+0E48 THAI CHARACTER MAI EK */
const KEY_Thai_maitho uint32 = 0x0de9         /* U+0E49 THAI CHARACTER MAI THO */
const KEY_Thai_maitri uint32 = 0x0dea         /* U+0E4A THAI CHARACTER MAI TRI */
const KEY_Thai_maichattawa uint32 = 0x0deb    /* U+0E4B THAI CHARACTER MAI CHATTAWA */
const KEY_Thai_thanthakhat uint32 = 0x0dec    /* U+0E4C THAI CHARACTER THANTHAKHAT */
const KEY_Thai_nikhahit uint32 = 0x0ded       /* U+0E4D THAI CHARACTER NIKHAHIT */
const KEY_Thai_leksun uint32 = 0x0df0         /* U+0E50 THAI DIGIT ZERO */
const KEY_Thai_leknung uint32 = 0x0df1        /* U+0E51 THAI DIGIT ONE */
const KEY_Thai_leksong uint32 = 0x0df2        /* U+0E52 THAI DIGIT TWO */
const KEY_Thai_leksam uint32 = 0x0df3         /* U+0E53 THAI DIGIT THREE */
const KEY_Thai_leksi uint32 = 0x0df4          /* U+0E54 THAI DIGIT FOUR */
const KEY_Thai_lekha uint32 = 0x0df5          /* U+0E55 THAI DIGIT FIVE */
const KEY_Thai_lekhok uint32 = 0x0df6         /* U+0E56 THAI DIGIT SIX */
const KEY_Thai_lekchet uint32 = 0x0df7        /* U+0E57 THAI DIGIT SEVEN */
const KEY_Thai_lekpaet uint32 = 0x0df8        /* U+0E58 THAI DIGIT EIGHT */
const KEY_Thai_lekkao uint32 = 0x0df9         /* U+0E59 THAI DIGIT NINE */

/*
 * Korean
 * Byte 3 uint32 = 0x0e
 */

const KEY_Hangul uint32 = 0xff31                   /* Hangul start/stop(toggle) */
const KEY_Hangul_Start uint32 = 0xff32             /* Hangul start */
const KEY_Hangul_End uint32 = 0xff33               /* Hangul end, English start */
const KEY_Hangul_Hanja uint32 = 0xff34             /* Start Hangul->Hanja Conversion */
const KEY_Hangul_Jamo uint32 = 0xff35              /* Hangul Jamo mode */
const KEY_Hangul_Romaja uint32 = 0xff36            /* Hangul Romaja mode */
const KEY_Hangul_Codeinput uint32 = 0xff37         /* Hangul code input mode */
const KEY_Hangul_Jeonja uint32 = 0xff38            /* Jeonja mode */
const KEY_Hangul_Banja uint32 = 0xff39             /* Banja mode */
const KEY_Hangul_PreHanja uint32 = 0xff3a          /* Pre Hanja conversion */
const KEY_Hangul_PostHanja uint32 = 0xff3b         /* Post Hanja conversion */
const KEY_Hangul_SingleCandidate uint32 = 0xff3c   /* Single candidate */
const KEY_Hangul_MultipleCandidate uint32 = 0xff3d /* Multiple candidate */
const KEY_Hangul_PreviousCandidate uint32 = 0xff3e /* Previous candidate */
const KEY_Hangul_Special uint32 = 0xff3f           /* Special symbols */
const KEY_Hangul_switch uint32 = 0xff7e            /* Alias for mode_switch */

/* Hangul Consonant Characters */
const KEY_Hangul_Kiyeog uint32 = 0x0ea1      /* U+3131 HANGUL LETTER KIYEOK */
const KEY_Hangul_SsangKiyeog uint32 = 0x0ea2 /* U+3132 HANGUL LETTER SSANGKIYEOK */
const KEY_Hangul_KiyeogSios uint32 = 0x0ea3  /* U+3133 HANGUL LETTER KIYEOK-SIOS */
const KEY_Hangul_Nieun uint32 = 0x0ea4       /* U+3134 HANGUL LETTER NIEUN */
const KEY_Hangul_NieunJieuj uint32 = 0x0ea5  /* U+3135 HANGUL LETTER NIEUN-CIEUC */
const KEY_Hangul_NieunHieuh uint32 = 0x0ea6  /* U+3136 HANGUL LETTER NIEUN-HIEUH */
const KEY_Hangul_Dikeud uint32 = 0x0ea7      /* U+3137 HANGUL LETTER TIKEUT */
const KEY_Hangul_SsangDikeud uint32 = 0x0ea8 /* U+3138 HANGUL LETTER SSANGTIKEUT */
const KEY_Hangul_Rieul uint32 = 0x0ea9       /* U+3139 HANGUL LETTER RIEUL */
const KEY_Hangul_RieulKiyeog uint32 = 0x0eaa /* U+313A HANGUL LETTER RIEUL-KIYEOK */
const KEY_Hangul_RieulMieum uint32 = 0x0eab  /* U+313B HANGUL LETTER RIEUL-MIEUM */
const KEY_Hangul_RieulPieub uint32 = 0x0eac  /* U+313C HANGUL LETTER RIEUL-PIEUP */
const KEY_Hangul_RieulSios uint32 = 0x0ead   /* U+313D HANGUL LETTER RIEUL-SIOS */
const KEY_Hangul_RieulTieut uint32 = 0x0eae  /* U+313E HANGUL LETTER RIEUL-THIEUTH */
const KEY_Hangul_RieulPhieuf uint32 = 0x0eaf /* U+313F HANGUL LETTER RIEUL-PHIEUPH */
const KEY_Hangul_RieulHieuh uint32 = 0x0eb0  /* U+3140 HANGUL LETTER RIEUL-HIEUH */
const KEY_Hangul_Mieum uint32 = 0x0eb1       /* U+3141 HANGUL LETTER MIEUM */
const KEY_Hangul_Pieub uint32 = 0x0eb2       /* U+3142 HANGUL LETTER PIEUP */
const KEY_Hangul_SsangPieub uint32 = 0x0eb3  /* U+3143 HANGUL LETTER SSANGPIEUP */
const KEY_Hangul_PieubSios uint32 = 0x0eb4   /* U+3144 HANGUL LETTER PIEUP-SIOS */
const KEY_Hangul_Sios uint32 = 0x0eb5        /* U+3145 HANGUL LETTER SIOS */
const KEY_Hangul_SsangSios uint32 = 0x0eb6   /* U+3146 HANGUL LETTER SSANGSIOS */
const KEY_Hangul_Ieung uint32 = 0x0eb7       /* U+3147 HANGUL LETTER IEUNG */
const KEY_Hangul_Jieuj uint32 = 0x0eb8       /* U+3148 HANGUL LETTER CIEUC */
const KEY_Hangul_SsangJieuj uint32 = 0x0eb9  /* U+3149 HANGUL LETTER SSANGCIEUC */
const KEY_Hangul_Cieuc uint32 = 0x0eba       /* U+314A HANGUL LETTER CHIEUCH */
const KEY_Hangul_Khieuq uint32 = 0x0ebb      /* U+314B HANGUL LETTER KHIEUKH */
const KEY_Hangul_Tieut uint32 = 0x0ebc       /* U+314C HANGUL LETTER THIEUTH */
const KEY_Hangul_Phieuf uint32 = 0x0ebd      /* U+314D HANGUL LETTER PHIEUPH */
const KEY_Hangul_Hieuh uint32 = 0x0ebe       /* U+314E HANGUL LETTER HIEUH */

/* Hangul Vowel Characters */
const KEY_Hangul_A uint32 = 0x0ebf   /* U+314F HANGUL LETTER A */
const KEY_Hangul_AE uint32 = 0x0ec0  /* U+3150 HANGUL LETTER AE */
const KEY_Hangul_YA uint32 = 0x0ec1  /* U+3151 HANGUL LETTER YA */
const KEY_Hangul_YAE uint32 = 0x0ec2 /* U+3152 HANGUL LETTER YAE */
const KEY_Hangul_EO uint32 = 0x0ec3  /* U+3153 HANGUL LETTER EO */
const KEY_Hangul_E uint32 = 0x0ec4   /* U+3154 HANGUL LETTER E */
const KEY_Hangul_YEO uint32 = 0x0ec5 /* U+3155 HANGUL LETTER YEO */
const KEY_Hangul_YE uint32 = 0x0ec6  /* U+3156 HANGUL LETTER YE */
const KEY_Hangul_O uint32 = 0x0ec7   /* U+3157 HANGUL LETTER O */
const KEY_Hangul_WA uint32 = 0x0ec8  /* U+3158 HANGUL LETTER WA */
const KEY_Hangul_WAE uint32 = 0x0ec9 /* U+3159 HANGUL LETTER WAE */
const KEY_Hangul_OE uint32 = 0x0eca  /* U+315A HANGUL LETTER OE */
const KEY_Hangul_YO uint32 = 0x0ecb  /* U+315B HANGUL LETTER YO */
const KEY_Hangul_U uint32 = 0x0ecc   /* U+315C HANGUL LETTER U */
const KEY_Hangul_WEO uint32 = 0x0ecd /* U+315D HANGUL LETTER WEO */
const KEY_Hangul_WE uint32 = 0x0ece  /* U+315E HANGUL LETTER WE */
const KEY_Hangul_WI uint32 = 0x0ecf  /* U+315F HANGUL LETTER WI */
const KEY_Hangul_YU uint32 = 0x0ed0  /* U+3160 HANGUL LETTER YU */
const KEY_Hangul_EU uint32 = 0x0ed1  /* U+3161 HANGUL LETTER EU */
const KEY_Hangul_YI uint32 = 0x0ed2  /* U+3162 HANGUL LETTER YI */
const KEY_Hangul_I uint32 = 0x0ed3   /* U+3163 HANGUL LETTER I */

/* Hangul syllable-final (JongSeong) Characters */
const KEY_Hangul_J_Kiyeog uint32 = 0x0ed4      /* U+11A8 HANGUL JONGSEONG KIYEOK */
const KEY_Hangul_J_SsangKiyeog uint32 = 0x0ed5 /* U+11A9 HANGUL JONGSEONG SSANGKIYEOK */
const KEY_Hangul_J_KiyeogSios uint32 = 0x0ed6  /* U+11AA HANGUL JONGSEONG KIYEOK-SIOS */
const KEY_Hangul_J_Nieun uint32 = 0x0ed7       /* U+11AB HANGUL JONGSEONG NIEUN */
const KEY_Hangul_J_NieunJieuj uint32 = 0x0ed8  /* U+11AC HANGUL JONGSEONG NIEUN-CIEUC */
const KEY_Hangul_J_NieunHieuh uint32 = 0x0ed9  /* U+11AD HANGUL JONGSEONG NIEUN-HIEUH */
const KEY_Hangul_J_Dikeud uint32 = 0x0eda      /* U+11AE HANGUL JONGSEONG TIKEUT */
const KEY_Hangul_J_Rieul uint32 = 0x0edb       /* U+11AF HANGUL JONGSEONG RIEUL */
const KEY_Hangul_J_RieulKiyeog uint32 = 0x0edc /* U+11B0 HANGUL JONGSEONG RIEUL-KIYEOK */
const KEY_Hangul_J_RieulMieum uint32 = 0x0edd  /* U+11B1 HANGUL JONGSEONG RIEUL-MIEUM */
const KEY_Hangul_J_RieulPieub uint32 = 0x0ede  /* U+11B2 HANGUL JONGSEONG RIEUL-PIEUP */
const KEY_Hangul_J_RieulSios uint32 = 0x0edf   /* U+11B3 HANGUL JONGSEONG RIEUL-SIOS */
const KEY_Hangul_J_RieulTieut uint32 = 0x0ee0  /* U+11B4 HANGUL JONGSEONG RIEUL-THIEUTH */
const KEY_Hangul_J_RieulPhieuf uint32 = 0x0ee1 /* U+11B5 HANGUL JONGSEONG RIEUL-PHIEUPH */
const KEY_Hangul_J_RieulHieuh uint32 = 0x0ee2  /* U+11B6 HANGUL JONGSEONG RIEUL-HIEUH */
const KEY_Hangul_J_Mieum uint32 = 0x0ee3       /* U+11B7 HANGUL JONGSEONG MIEUM */
const KEY_Hangul_J_Pieub uint32 = 0x0ee4       /* U+11B8 HANGUL JONGSEONG PIEUP */
const KEY_Hangul_J_PieubSios uint32 = 0x0ee5   /* U+11B9 HANGUL JONGSEONG PIEUP-SIOS */
const KEY_Hangul_J_Sios uint32 = 0x0ee6        /* U+11BA HANGUL JONGSEONG SIOS */
const KEY_Hangul_J_SsangSios uint32 = 0x0ee7   /* U+11BB HANGUL JONGSEONG SSANGSIOS */
const KEY_Hangul_J_Ieung uint32 = 0x0ee8       /* U+11BC HANGUL JONGSEONG IEUNG */
const KEY_Hangul_J_Jieuj uint32 = 0x0ee9       /* U+11BD HANGUL JONGSEONG CIEUC */
const KEY_Hangul_J_Cieuc uint32 = 0x0eea       /* U+11BE HANGUL JONGSEONG CHIEUCH */
const KEY_Hangul_J_Khieuq uint32 = 0x0eeb      /* U+11BF HANGUL JONGSEONG KHIEUKH */
const KEY_Hangul_J_Tieut uint32 = 0x0eec       /* U+11C0 HANGUL JONGSEONG THIEUTH */
const KEY_Hangul_J_Phieuf uint32 = 0x0eed      /* U+11C1 HANGUL JONGSEONG PHIEUPH */
const KEY_Hangul_J_Hieuh uint32 = 0x0eee       /* U+11C2 HANGUL JONGSEONG HIEUH */

/* Ancient Hangul Consonant Characters */
const KEY_Hangul_RieulYeorinHieuh uint32 = 0x0eef   /* U+316D HANGUL LETTER RIEUL-YEORINHIEUH */
const KEY_Hangul_SunkyeongeumMieum uint32 = 0x0ef0  /* U+3171 HANGUL LETTER KAPYEOUNMIEUM */
const KEY_Hangul_SunkyeongeumPieub uint32 = 0x0ef1  /* U+3178 HANGUL LETTER KAPYEOUNPIEUP */
const KEY_Hangul_PanSios uint32 = 0x0ef2            /* U+317F HANGUL LETTER PANSIOS */
const KEY_Hangul_KkogjiDalrinIeung uint32 = 0x0ef3  /* U+3181 HANGUL LETTER YESIEUNG */
const KEY_Hangul_SunkyeongeumPhieuf uint32 = 0x0ef4 /* U+3184 HANGUL LETTER KAPYEOUNPHIEUPH */
const KEY_Hangul_YeorinHieuh uint32 = 0x0ef5        /* U+3186 HANGUL LETTER YEORINHIEUH */

/* Ancient Hangul Vowel Characters */
const KEY_Hangul_AraeA uint32 = 0x0ef6  /* U+318D HANGUL LETTER ARAEA */
const KEY_Hangul_AraeAE uint32 = 0x0ef7 /* U+318E HANGUL LETTER ARAEAE */

/* Ancient Hangul syllable-final (JongSeong) Characters */
const KEY_Hangul_J_PanSios uint32 = 0x0ef8           /* U+11EB HANGUL JONGSEONG PANSIOS */
const KEY_Hangul_J_KkogjiDalrinIeung uint32 = 0x0ef9 /* U+11F0 HANGUL JONGSEONG YESIEUNG */
const KEY_Hangul_J_YeorinHieuh uint32 = 0x0efa       /* U+11F9 HANGUL JONGSEONG YEORINHIEUH */

/* Korean currency symbol */
const KEY_Korean_Won uint32 = 0x0eff /*(U+20A9 WON SIGN)*/

/*
 * Armenian
 */

const KEY_Armenian_ligature_ew uint32 = 0x1000587     /* U+0587 ARMENIAN SMALL LIGATURE ECH YIWN */
const KEY_Armenian_full_stop uint32 = 0x1000589       /* U+0589 ARMENIAN FULL STOP */
const KEY_Armenian_verjaket uint32 = 0x1000589        /* U+0589 ARMENIAN FULL STOP */
const KEY_Armenian_separation_mark uint32 = 0x100055d /* U+055D ARMENIAN COMMA */
const KEY_Armenian_but uint32 = 0x100055d             /* U+055D ARMENIAN COMMA */
const KEY_Armenian_hyphen uint32 = 0x100058a          /* U+058A ARMENIAN HYPHEN */
const KEY_Armenian_yentamna uint32 = 0x100058a        /* U+058A ARMENIAN HYPHEN */
const KEY_Armenian_exclam uint32 = 0x100055c          /* U+055C ARMENIAN EXCLAMATION MARK */
const KEY_Armenian_amanak uint32 = 0x100055c          /* U+055C ARMENIAN EXCLAMATION MARK */
const KEY_Armenian_accent uint32 = 0x100055b          /* U+055B ARMENIAN EMPHASIS MARK */
const KEY_Armenian_shesht uint32 = 0x100055b          /* U+055B ARMENIAN EMPHASIS MARK */
const KEY_Armenian_question uint32 = 0x100055e        /* U+055E ARMENIAN QUESTION MARK */
const KEY_Armenian_paruyk uint32 = 0x100055e          /* U+055E ARMENIAN QUESTION MARK */
const KEY_Armenian_AYB uint32 = 0x1000531             /* U+0531 ARMENIAN CAPITAL LETTER AYB */
const KEY_Armenian_ayb uint32 = 0x1000561             /* U+0561 ARMENIAN SMALL LETTER AYB */
const KEY_Armenian_BEN uint32 = 0x1000532             /* U+0532 ARMENIAN CAPITAL LETTER BEN */
const KEY_Armenian_ben uint32 = 0x1000562             /* U+0562 ARMENIAN SMALL LETTER BEN */
const KEY_Armenian_GIM uint32 = 0x1000533             /* U+0533 ARMENIAN CAPITAL LETTER GIM */
const KEY_Armenian_gim uint32 = 0x1000563             /* U+0563 ARMENIAN SMALL LETTER GIM */
const KEY_Armenian_DA uint32 = 0x1000534              /* U+0534 ARMENIAN CAPITAL LETTER DA */
const KEY_Armenian_da uint32 = 0x1000564              /* U+0564 ARMENIAN SMALL LETTER DA */
const KEY_Armenian_YECH uint32 = 0x1000535            /* U+0535 ARMENIAN CAPITAL LETTER ECH */
const KEY_Armenian_yech uint32 = 0x1000565            /* U+0565 ARMENIAN SMALL LETTER ECH */
const KEY_Armenian_ZA uint32 = 0x1000536              /* U+0536 ARMENIAN CAPITAL LETTER ZA */
const KEY_Armenian_za uint32 = 0x1000566              /* U+0566 ARMENIAN SMALL LETTER ZA */
const KEY_Armenian_E uint32 = 0x1000537               /* U+0537 ARMENIAN CAPITAL LETTER EH */
const KEY_Armenian_e uint32 = 0x1000567               /* U+0567 ARMENIAN SMALL LETTER EH */
const KEY_Armenian_AT uint32 = 0x1000538              /* U+0538 ARMENIAN CAPITAL LETTER ET */
const KEY_Armenian_at uint32 = 0x1000568              /* U+0568 ARMENIAN SMALL LETTER ET */
const KEY_Armenian_TO uint32 = 0x1000539              /* U+0539 ARMENIAN CAPITAL LETTER TO */
const KEY_Armenian_to uint32 = 0x1000569              /* U+0569 ARMENIAN SMALL LETTER TO */
const KEY_Armenian_ZHE uint32 = 0x100053a             /* U+053A ARMENIAN CAPITAL LETTER ZHE */
const KEY_Armenian_zhe uint32 = 0x100056a             /* U+056A ARMENIAN SMALL LETTER ZHE */
const KEY_Armenian_INI uint32 = 0x100053b             /* U+053B ARMENIAN CAPITAL LETTER INI */
const KEY_Armenian_ini uint32 = 0x100056b             /* U+056B ARMENIAN SMALL LETTER INI */
const KEY_Armenian_LYUN uint32 = 0x100053c            /* U+053C ARMENIAN CAPITAL LETTER LIWN */
const KEY_Armenian_lyun uint32 = 0x100056c            /* U+056C ARMENIAN SMALL LETTER LIWN */
const KEY_Armenian_KHE uint32 = 0x100053d             /* U+053D ARMENIAN CAPITAL LETTER XEH */
const KEY_Armenian_khe uint32 = 0x100056d             /* U+056D ARMENIAN SMALL LETTER XEH */
const KEY_Armenian_TSA uint32 = 0x100053e             /* U+053E ARMENIAN CAPITAL LETTER CA */
const KEY_Armenian_tsa uint32 = 0x100056e             /* U+056E ARMENIAN SMALL LETTER CA */
const KEY_Armenian_KEN uint32 = 0x100053f             /* U+053F ARMENIAN CAPITAL LETTER KEN */
const KEY_Armenian_ken uint32 = 0x100056f             /* U+056F ARMENIAN SMALL LETTER KEN */
const KEY_Armenian_HO uint32 = 0x1000540              /* U+0540 ARMENIAN CAPITAL LETTER HO */
const KEY_Armenian_ho uint32 = 0x1000570              /* U+0570 ARMENIAN SMALL LETTER HO */
const KEY_Armenian_DZA uint32 = 0x1000541             /* U+0541 ARMENIAN CAPITAL LETTER JA */
const KEY_Armenian_dza uint32 = 0x1000571             /* U+0571 ARMENIAN SMALL LETTER JA */
const KEY_Armenian_GHAT uint32 = 0x1000542            /* U+0542 ARMENIAN CAPITAL LETTER GHAD */
const KEY_Armenian_ghat uint32 = 0x1000572            /* U+0572 ARMENIAN SMALL LETTER GHAD */
const KEY_Armenian_TCHE uint32 = 0x1000543            /* U+0543 ARMENIAN CAPITAL LETTER CHEH */
const KEY_Armenian_tche uint32 = 0x1000573            /* U+0573 ARMENIAN SMALL LETTER CHEH */
const KEY_Armenian_MEN uint32 = 0x1000544             /* U+0544 ARMENIAN CAPITAL LETTER MEN */
const KEY_Armenian_men uint32 = 0x1000574             /* U+0574 ARMENIAN SMALL LETTER MEN */
const KEY_Armenian_HI uint32 = 0x1000545              /* U+0545 ARMENIAN CAPITAL LETTER YI */
const KEY_Armenian_hi uint32 = 0x1000575              /* U+0575 ARMENIAN SMALL LETTER YI */
const KEY_Armenian_NU uint32 = 0x1000546              /* U+0546 ARMENIAN CAPITAL LETTER NOW */
const KEY_Armenian_nu uint32 = 0x1000576              /* U+0576 ARMENIAN SMALL LETTER NOW */
const KEY_Armenian_SHA uint32 = 0x1000547             /* U+0547 ARMENIAN CAPITAL LETTER SHA */
const KEY_Armenian_sha uint32 = 0x1000577             /* U+0577 ARMENIAN SMALL LETTER SHA */
const KEY_Armenian_VO uint32 = 0x1000548              /* U+0548 ARMENIAN CAPITAL LETTER VO */
const KEY_Armenian_vo uint32 = 0x1000578              /* U+0578 ARMENIAN SMALL LETTER VO */
const KEY_Armenian_CHA uint32 = 0x1000549             /* U+0549 ARMENIAN CAPITAL LETTER CHA */
const KEY_Armenian_cha uint32 = 0x1000579             /* U+0579 ARMENIAN SMALL LETTER CHA */
const KEY_Armenian_PE uint32 = 0x100054a              /* U+054A ARMENIAN CAPITAL LETTER PEH */
const KEY_Armenian_pe uint32 = 0x100057a              /* U+057A ARMENIAN SMALL LETTER PEH */
const KEY_Armenian_JE uint32 = 0x100054b              /* U+054B ARMENIAN CAPITAL LETTER JHEH */
const KEY_Armenian_je uint32 = 0x100057b              /* U+057B ARMENIAN SMALL LETTER JHEH */
const KEY_Armenian_RA uint32 = 0x100054c              /* U+054C ARMENIAN CAPITAL LETTER RA */
const KEY_Armenian_ra uint32 = 0x100057c              /* U+057C ARMENIAN SMALL LETTER RA */
const KEY_Armenian_SE uint32 = 0x100054d              /* U+054D ARMENIAN CAPITAL LETTER SEH */
const KEY_Armenian_se uint32 = 0x100057d              /* U+057D ARMENIAN SMALL LETTER SEH */
const KEY_Armenian_VEV uint32 = 0x100054e             /* U+054E ARMENIAN CAPITAL LETTER VEW */
const KEY_Armenian_vev uint32 = 0x100057e             /* U+057E ARMENIAN SMALL LETTER VEW */
const KEY_Armenian_TYUN uint32 = 0x100054f            /* U+054F ARMENIAN CAPITAL LETTER TIWN */
const KEY_Armenian_tyun uint32 = 0x100057f            /* U+057F ARMENIAN SMALL LETTER TIWN */
const KEY_Armenian_RE uint32 = 0x1000550              /* U+0550 ARMENIAN CAPITAL LETTER REH */
const KEY_Armenian_re uint32 = 0x1000580              /* U+0580 ARMENIAN SMALL LETTER REH */
const KEY_Armenian_TSO uint32 = 0x1000551             /* U+0551 ARMENIAN CAPITAL LETTER CO */
const KEY_Armenian_tso uint32 = 0x1000581             /* U+0581 ARMENIAN SMALL LETTER CO */
const KEY_Armenian_VYUN uint32 = 0x1000552            /* U+0552 ARMENIAN CAPITAL LETTER YIWN */
const KEY_Armenian_vyun uint32 = 0x1000582            /* U+0582 ARMENIAN SMALL LETTER YIWN */
const KEY_Armenian_PYUR uint32 = 0x1000553            /* U+0553 ARMENIAN CAPITAL LETTER PIWR */
const KEY_Armenian_pyur uint32 = 0x1000583            /* U+0583 ARMENIAN SMALL LETTER PIWR */
const KEY_Armenian_KE uint32 = 0x1000554              /* U+0554 ARMENIAN CAPITAL LETTER KEH */
const KEY_Armenian_ke uint32 = 0x1000584              /* U+0584 ARMENIAN SMALL LETTER KEH */
const KEY_Armenian_O uint32 = 0x1000555               /* U+0555 ARMENIAN CAPITAL LETTER OH */
const KEY_Armenian_o uint32 = 0x1000585               /* U+0585 ARMENIAN SMALL LETTER OH */
const KEY_Armenian_FE uint32 = 0x1000556              /* U+0556 ARMENIAN CAPITAL LETTER FEH */
const KEY_Armenian_fe uint32 = 0x1000586              /* U+0586 ARMENIAN SMALL LETTER FEH */
const KEY_Armenian_apostrophe uint32 = 0x100055a      /* U+055A ARMENIAN APOSTROPHE */

/*
 * Georgian
 */

const KEY_Georgian_an uint32 = 0x10010d0   /* U+10D0 GEORGIAN LETTER AN */
const KEY_Georgian_ban uint32 = 0x10010d1  /* U+10D1 GEORGIAN LETTER BAN */
const KEY_Georgian_gan uint32 = 0x10010d2  /* U+10D2 GEORGIAN LETTER GAN */
const KEY_Georgian_don uint32 = 0x10010d3  /* U+10D3 GEORGIAN LETTER DON */
const KEY_Georgian_en uint32 = 0x10010d4   /* U+10D4 GEORGIAN LETTER EN */
const KEY_Georgian_vin uint32 = 0x10010d5  /* U+10D5 GEORGIAN LETTER VIN */
const KEY_Georgian_zen uint32 = 0x10010d6  /* U+10D6 GEORGIAN LETTER ZEN */
const KEY_Georgian_tan uint32 = 0x10010d7  /* U+10D7 GEORGIAN LETTER TAN */
const KEY_Georgian_in uint32 = 0x10010d8   /* U+10D8 GEORGIAN LETTER IN */
const KEY_Georgian_kan uint32 = 0x10010d9  /* U+10D9 GEORGIAN LETTER KAN */
const KEY_Georgian_las uint32 = 0x10010da  /* U+10DA GEORGIAN LETTER LAS */
const KEY_Georgian_man uint32 = 0x10010db  /* U+10DB GEORGIAN LETTER MAN */
const KEY_Georgian_nar uint32 = 0x10010dc  /* U+10DC GEORGIAN LETTER NAR */
const KEY_Georgian_on uint32 = 0x10010dd   /* U+10DD GEORGIAN LETTER ON */
const KEY_Georgian_par uint32 = 0x10010de  /* U+10DE GEORGIAN LETTER PAR */
const KEY_Georgian_zhar uint32 = 0x10010df /* U+10DF GEORGIAN LETTER ZHAR */
const KEY_Georgian_rae uint32 = 0x10010e0  /* U+10E0 GEORGIAN LETTER RAE */
const KEY_Georgian_san uint32 = 0x10010e1  /* U+10E1 GEORGIAN LETTER SAN */
const KEY_Georgian_tar uint32 = 0x10010e2  /* U+10E2 GEORGIAN LETTER TAR */
const KEY_Georgian_un uint32 = 0x10010e3   /* U+10E3 GEORGIAN LETTER UN */
const KEY_Georgian_phar uint32 = 0x10010e4 /* U+10E4 GEORGIAN LETTER PHAR */
const KEY_Georgian_khar uint32 = 0x10010e5 /* U+10E5 GEORGIAN LETTER KHAR */
const KEY_Georgian_ghan uint32 = 0x10010e6 /* U+10E6 GEORGIAN LETTER GHAN */
const KEY_Georgian_qar uint32 = 0x10010e7  /* U+10E7 GEORGIAN LETTER QAR */
const KEY_Georgian_shin uint32 = 0x10010e8 /* U+10E8 GEORGIAN LETTER SHIN */
const KEY_Georgian_chin uint32 = 0x10010e9 /* U+10E9 GEORGIAN LETTER CHIN */
const KEY_Georgian_can uint32 = 0x10010ea  /* U+10EA GEORGIAN LETTER CAN */
const KEY_Georgian_jil uint32 = 0x10010eb  /* U+10EB GEORGIAN LETTER JIL */
const KEY_Georgian_cil uint32 = 0x10010ec  /* U+10EC GEORGIAN LETTER CIL */
const KEY_Georgian_char uint32 = 0x10010ed /* U+10ED GEORGIAN LETTER CHAR */
const KEY_Georgian_xan uint32 = 0x10010ee  /* U+10EE GEORGIAN LETTER XAN */
const KEY_Georgian_jhan uint32 = 0x10010ef /* U+10EF GEORGIAN LETTER JHAN */
const KEY_Georgian_hae uint32 = 0x10010f0  /* U+10F0 GEORGIAN LETTER HAE */
const KEY_Georgian_he uint32 = 0x10010f1   /* U+10F1 GEORGIAN LETTER HE */
const KEY_Georgian_hie uint32 = 0x10010f2  /* U+10F2 GEORGIAN LETTER HIE */
const KEY_Georgian_we uint32 = 0x10010f3   /* U+10F3 GEORGIAN LETTER WE */
const KEY_Georgian_har uint32 = 0x10010f4  /* U+10F4 GEORGIAN LETTER HAR */
const KEY_Georgian_hoe uint32 = 0x10010f5  /* U+10F5 GEORGIAN LETTER HOE */
const KEY_Georgian_fi uint32 = 0x10010f6   /* U+10F6 GEORGIAN LETTER FI */

/*
 * Azeri (and other Turkic or Caucasian languages)
 */

/* latin */
const KEY_Xabovedot uint32 = 0x1001e8a /* U+1E8A LATIN CAPITAL LETTER X WITH DOT ABOVE */
const KEY_Ibreve uint32 = 0x100012c    /* U+012C LATIN CAPITAL LETTER I WITH BREVE */
const KEY_Zstroke uint32 = 0x10001b5   /* U+01B5 LATIN CAPITAL LETTER Z WITH STROKE */
const KEY_Gcaron uint32 = 0x10001e6    /* U+01E6 LATIN CAPITAL LETTER G WITH CARON */
const KEY_Ocaron uint32 = 0x10001d1    /* U+01D1 LATIN CAPITAL LETTER O WITH CARON */
const KEY_Obarred uint32 = 0x100019f   /* U+019F LATIN CAPITAL LETTER O WITH MIDDLE TILDE */
const KEY_xabovedot uint32 = 0x1001e8b /* U+1E8B LATIN SMALL LETTER X WITH DOT ABOVE */
const KEY_ibreve uint32 = 0x100012d    /* U+012D LATIN SMALL LETTER I WITH BREVE */
const KEY_zstroke uint32 = 0x10001b6   /* U+01B6 LATIN SMALL LETTER Z WITH STROKE */
const KEY_gcaron uint32 = 0x10001e7    /* U+01E7 LATIN SMALL LETTER G WITH CARON */
const KEY_ocaron uint32 = 0x10001d2    /* U+01D2 LATIN SMALL LETTER O WITH CARON */
const KEY_obarred uint32 = 0x1000275   /* U+0275 LATIN SMALL LETTER BARRED O */
const KEY_SCHWA uint32 = 0x100018f     /* U+018F LATIN CAPITAL LETTER SCHWA */
const KEY_schwa uint32 = 0x1000259     /* U+0259 LATIN SMALL LETTER SCHWA */
const KEY_EZH uint32 = 0x10001b7       /* U+01B7 LATIN CAPITAL LETTER EZH */
const KEY_ezh uint32 = 0x1000292       /* U+0292 LATIN SMALL LETTER EZH */
/* those are not really Caucasus */
/* For Inupiak */
const KEY_Lbelowdot uint32 = 0x1001e36 /* U+1E36 LATIN CAPITAL LETTER L WITH DOT BELOW */
const KEY_lbelowdot uint32 = 0x1001e37 /* U+1E37 LATIN SMALL LETTER L WITH DOT BELOW */

/*
 * Vietnamese
 */

const KEY_Abelowdot uint32 = 0x1001ea0           /* U+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW */
const KEY_abelowdot uint32 = 0x1001ea1           /* U+1EA1 LATIN SMALL LETTER A WITH DOT BELOW */
const KEY_Ahook uint32 = 0x1001ea2               /* U+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE */
const KEY_ahook uint32 = 0x1001ea3               /* U+1EA3 LATIN SMALL LETTER A WITH HOOK ABOVE */
const KEY_Acircumflexacute uint32 = 0x1001ea4    /* U+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE */
const KEY_acircumflexacute uint32 = 0x1001ea5    /* U+1EA5 LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE */
const KEY_Acircumflexgrave uint32 = 0x1001ea6    /* U+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE */
const KEY_acircumflexgrave uint32 = 0x1001ea7    /* U+1EA7 LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE */
const KEY_Acircumflexhook uint32 = 0x1001ea8     /* U+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE */
const KEY_acircumflexhook uint32 = 0x1001ea9     /* U+1EA9 LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE */
const KEY_Acircumflextilde uint32 = 0x1001eaa    /* U+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE */
const KEY_acircumflextilde uint32 = 0x1001eab    /* U+1EAB LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE */
const KEY_Acircumflexbelowdot uint32 = 0x1001eac /* U+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW */
const KEY_acircumflexbelowdot uint32 = 0x1001ead /* U+1EAD LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW */
const KEY_Abreveacute uint32 = 0x1001eae         /* U+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE */
const KEY_abreveacute uint32 = 0x1001eaf         /* U+1EAF LATIN SMALL LETTER A WITH BREVE AND ACUTE */
const KEY_Abrevegrave uint32 = 0x1001eb0         /* U+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE */
const KEY_abrevegrave uint32 = 0x1001eb1         /* U+1EB1 LATIN SMALL LETTER A WITH BREVE AND GRAVE */
const KEY_Abrevehook uint32 = 0x1001eb2          /* U+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE */
const KEY_abrevehook uint32 = 0x1001eb3          /* U+1EB3 LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE */
const KEY_Abrevetilde uint32 = 0x1001eb4         /* U+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE */
const KEY_abrevetilde uint32 = 0x1001eb5         /* U+1EB5 LATIN SMALL LETTER A WITH BREVE AND TILDE */
const KEY_Abrevebelowdot uint32 = 0x1001eb6      /* U+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW */
const KEY_abrevebelowdot uint32 = 0x1001eb7      /* U+1EB7 LATIN SMALL LETTER A WITH BREVE AND DOT BELOW */
const KEY_Ebelowdot uint32 = 0x1001eb8           /* U+1EB8 LATIN CAPITAL LETTER E WITH DOT BELOW */
const KEY_ebelowdot uint32 = 0x1001eb9           /* U+1EB9 LATIN SMALL LETTER E WITH DOT BELOW */
const KEY_Ehook uint32 = 0x1001eba               /* U+1EBA LATIN CAPITAL LETTER E WITH HOOK ABOVE */
const KEY_ehook uint32 = 0x1001ebb               /* U+1EBB LATIN SMALL LETTER E WITH HOOK ABOVE */
const KEY_Etilde uint32 = 0x1001ebc              /* U+1EBC LATIN CAPITAL LETTER E WITH TILDE */
const KEY_etilde uint32 = 0x1001ebd              /* U+1EBD LATIN SMALL LETTER E WITH TILDE */
const KEY_Ecircumflexacute uint32 = 0x1001ebe    /* U+1EBE LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE */
const KEY_ecircumflexacute uint32 = 0x1001ebf    /* U+1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE */
const KEY_Ecircumflexgrave uint32 = 0x1001ec0    /* U+1EC0 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE */
const KEY_ecircumflexgrave uint32 = 0x1001ec1    /* U+1EC1 LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE */
const KEY_Ecircumflexhook uint32 = 0x1001ec2     /* U+1EC2 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE */
const KEY_ecircumflexhook uint32 = 0x1001ec3     /* U+1EC3 LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE */
const KEY_Ecircumflextilde uint32 = 0x1001ec4    /* U+1EC4 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE */
const KEY_ecircumflextilde uint32 = 0x1001ec5    /* U+1EC5 LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE */
const KEY_Ecircumflexbelowdot uint32 = 0x1001ec6 /* U+1EC6 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW */
const KEY_ecircumflexbelowdot uint32 = 0x1001ec7 /* U+1EC7 LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW */
const KEY_Ihook uint32 = 0x1001ec8               /* U+1EC8 LATIN CAPITAL LETTER I WITH HOOK ABOVE */
const KEY_ihook uint32 = 0x1001ec9               /* U+1EC9 LATIN SMALL LETTER I WITH HOOK ABOVE */
const KEY_Ibelowdot uint32 = 0x1001eca           /* U+1ECA LATIN CAPITAL LETTER I WITH DOT BELOW */
const KEY_ibelowdot uint32 = 0x1001ecb           /* U+1ECB LATIN SMALL LETTER I WITH DOT BELOW */
const KEY_Obelowdot uint32 = 0x1001ecc           /* U+1ECC LATIN CAPITAL LETTER O WITH DOT BELOW */
const KEY_obelowdot uint32 = 0x1001ecd           /* U+1ECD LATIN SMALL LETTER O WITH DOT BELOW */
const KEY_Ohook uint32 = 0x1001ece               /* U+1ECE LATIN CAPITAL LETTER O WITH HOOK ABOVE */
const KEY_ohook uint32 = 0x1001ecf               /* U+1ECF LATIN SMALL LETTER O WITH HOOK ABOVE */
const KEY_Ocircumflexacute uint32 = 0x1001ed0    /* U+1ED0 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE */
const KEY_ocircumflexacute uint32 = 0x1001ed1    /* U+1ED1 LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE */
const KEY_Ocircumflexgrave uint32 = 0x1001ed2    /* U+1ED2 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE */
const KEY_ocircumflexgrave uint32 = 0x1001ed3    /* U+1ED3 LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE */
const KEY_Ocircumflexhook uint32 = 0x1001ed4     /* U+1ED4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE */
const KEY_ocircumflexhook uint32 = 0x1001ed5     /* U+1ED5 LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE */
const KEY_Ocircumflextilde uint32 = 0x1001ed6    /* U+1ED6 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE */
const KEY_ocircumflextilde uint32 = 0x1001ed7    /* U+1ED7 LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE */
const KEY_Ocircumflexbelowdot uint32 = 0x1001ed8 /* U+1ED8 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW */
const KEY_ocircumflexbelowdot uint32 = 0x1001ed9 /* U+1ED9 LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW */
const KEY_Ohornacute uint32 = 0x1001eda          /* U+1EDA LATIN CAPITAL LETTER O WITH HORN AND ACUTE */
const KEY_ohornacute uint32 = 0x1001edb          /* U+1EDB LATIN SMALL LETTER O WITH HORN AND ACUTE */
const KEY_Ohorngrave uint32 = 0x1001edc          /* U+1EDC LATIN CAPITAL LETTER O WITH HORN AND GRAVE */
const KEY_ohorngrave uint32 = 0x1001edd          /* U+1EDD LATIN SMALL LETTER O WITH HORN AND GRAVE */
const KEY_Ohornhook uint32 = 0x1001ede           /* U+1EDE LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE */
const KEY_ohornhook uint32 = 0x1001edf           /* U+1EDF LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE */
const KEY_Ohorntilde uint32 = 0x1001ee0          /* U+1EE0 LATIN CAPITAL LETTER O WITH HORN AND TILDE */
const KEY_ohorntilde uint32 = 0x1001ee1          /* U+1EE1 LATIN SMALL LETTER O WITH HORN AND TILDE */
const KEY_Ohornbelowdot uint32 = 0x1001ee2       /* U+1EE2 LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW */
const KEY_ohornbelowdot uint32 = 0x1001ee3       /* U+1EE3 LATIN SMALL LETTER O WITH HORN AND DOT BELOW */
const KEY_Ubelowdot uint32 = 0x1001ee4           /* U+1EE4 LATIN CAPITAL LETTER U WITH DOT BELOW */
const KEY_ubelowdot uint32 = 0x1001ee5           /* U+1EE5 LATIN SMALL LETTER U WITH DOT BELOW */
const KEY_Uhook uint32 = 0x1001ee6               /* U+1EE6 LATIN CAPITAL LETTER U WITH HOOK ABOVE */
const KEY_uhook uint32 = 0x1001ee7               /* U+1EE7 LATIN SMALL LETTER U WITH HOOK ABOVE */
const KEY_Uhornacute uint32 = 0x1001ee8          /* U+1EE8 LATIN CAPITAL LETTER U WITH HORN AND ACUTE */
const KEY_uhornacute uint32 = 0x1001ee9          /* U+1EE9 LATIN SMALL LETTER U WITH HORN AND ACUTE */
const KEY_Uhorngrave uint32 = 0x1001eea          /* U+1EEA LATIN CAPITAL LETTER U WITH HORN AND GRAVE */
const KEY_uhorngrave uint32 = 0x1001eeb          /* U+1EEB LATIN SMALL LETTER U WITH HORN AND GRAVE */
const KEY_Uhornhook uint32 = 0x1001eec           /* U+1EEC LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE */
const KEY_uhornhook uint32 = 0x1001eed           /* U+1EED LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE */
const KEY_Uhorntilde uint32 = 0x1001eee          /* U+1EEE LATIN CAPITAL LETTER U WITH HORN AND TILDE */
const KEY_uhorntilde uint32 = 0x1001eef          /* U+1EEF LATIN SMALL LETTER U WITH HORN AND TILDE */
const KEY_Uhornbelowdot uint32 = 0x1001ef0       /* U+1EF0 LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW */
const KEY_uhornbelowdot uint32 = 0x1001ef1       /* U+1EF1 LATIN SMALL LETTER U WITH HORN AND DOT BELOW */
const KEY_Ybelowdot uint32 = 0x1001ef4           /* U+1EF4 LATIN CAPITAL LETTER Y WITH DOT BELOW */
const KEY_ybelowdot uint32 = 0x1001ef5           /* U+1EF5 LATIN SMALL LETTER Y WITH DOT BELOW */
const KEY_Yhook uint32 = 0x1001ef6               /* U+1EF6 LATIN CAPITAL LETTER Y WITH HOOK ABOVE */
const KEY_yhook uint32 = 0x1001ef7               /* U+1EF7 LATIN SMALL LETTER Y WITH HOOK ABOVE */
const KEY_Ytilde uint32 = 0x1001ef8              /* U+1EF8 LATIN CAPITAL LETTER Y WITH TILDE */
const KEY_ytilde uint32 = 0x1001ef9              /* U+1EF9 LATIN SMALL LETTER Y WITH TILDE */
const KEY_Ohorn uint32 = 0x10001a0               /* U+01A0 LATIN CAPITAL LETTER O WITH HORN */
const KEY_ohorn uint32 = 0x10001a1               /* U+01A1 LATIN SMALL LETTER O WITH HORN */
const KEY_Uhorn uint32 = 0x10001af               /* U+01AF LATIN CAPITAL LETTER U WITH HORN */
const KEY_uhorn uint32 = 0x10001b0               /* U+01B0 LATIN SMALL LETTER U WITH HORN */
const KEY_combining_tilde uint32 = 0x1000303     /* U+0303 COMBINING TILDE */
const KEY_combining_grave uint32 = 0x1000300     /* U+0300 COMBINING GRAVE ACCENT */
const KEY_combining_acute uint32 = 0x1000301     /* U+0301 COMBINING ACUTE ACCENT */
const KEY_combining_hook uint32 = 0x1000309      /* U+0309 COMBINING HOOK ABOVE */
const KEY_combining_belowdot uint32 = 0x1000323  /* U+0323 COMBINING DOT BELOW */

const KEY_EcuSign uint32 = 0x10020a0       /* U+20A0 EURO-CURRENCY SIGN */
const KEY_ColonSign uint32 = 0x10020a1     /* U+20A1 COLON SIGN */
const KEY_CruzeiroSign uint32 = 0x10020a2  /* U+20A2 CRUZEIRO SIGN */
const KEY_FFrancSign uint32 = 0x10020a3    /* U+20A3 FRENCH FRANC SIGN */
const KEY_LiraSign uint32 = 0x10020a4      /* U+20A4 LIRA SIGN */
const KEY_MillSign uint32 = 0x10020a5      /* U+20A5 MILL SIGN */
const KEY_NairaSign uint32 = 0x10020a6     /* U+20A6 NAIRA SIGN */
const KEY_PesetaSign uint32 = 0x10020a7    /* U+20A7 PESETA SIGN */
const KEY_RupeeSign uint32 = 0x10020a8     /* U+20A8 RUPEE SIGN */
const KEY_WonSign uint32 = 0x10020a9       /* U+20A9 WON SIGN */
const KEY_NewSheqelSign uint32 = 0x10020aa /* U+20AA NEW SHEQEL SIGN */
const KEY_DongSign uint32 = 0x10020ab      /* U+20AB DONG SIGN */
const KEY_EuroSign uint32 = 0x20ac         /* U+20AC EURO SIGN */

/* one, two and three are defined above. */
const KEY_zerosuperior uint32 = 0x1002070     /* U+2070 SUPERSCRIPT ZERO */
const KEY_foursuperior uint32 = 0x1002074     /* U+2074 SUPERSCRIPT FOUR */
const KEY_fivesuperior uint32 = 0x1002075     /* U+2075 SUPERSCRIPT FIVE */
const KEY_sixsuperior uint32 = 0x1002076      /* U+2076 SUPERSCRIPT SIX */
const KEY_sevensuperior uint32 = 0x1002077    /* U+2077 SUPERSCRIPT SEVEN */
const KEY_eightsuperior uint32 = 0x1002078    /* U+2078 SUPERSCRIPT EIGHT */
const KEY_ninesuperior uint32 = 0x1002079     /* U+2079 SUPERSCRIPT NINE */
const KEY_zerosubscript uint32 = 0x1002080    /* U+2080 SUBSCRIPT ZERO */
const KEY_onesubscript uint32 = 0x1002081     /* U+2081 SUBSCRIPT ONE */
const KEY_twosubscript uint32 = 0x1002082     /* U+2082 SUBSCRIPT TWO */
const KEY_threesubscript uint32 = 0x1002083   /* U+2083 SUBSCRIPT THREE */
const KEY_foursubscript uint32 = 0x1002084    /* U+2084 SUBSCRIPT FOUR */
const KEY_fivesubscript uint32 = 0x1002085    /* U+2085 SUBSCRIPT FIVE */
const KEY_sixsubscript uint32 = 0x1002086     /* U+2086 SUBSCRIPT SIX */
const KEY_sevensubscript uint32 = 0x1002087   /* U+2087 SUBSCRIPT SEVEN */
const KEY_eightsubscript uint32 = 0x1002088   /* U+2088 SUBSCRIPT EIGHT */
const KEY_ninesubscript uint32 = 0x1002089    /* U+2089 SUBSCRIPT NINE */
const KEY_partdifferential uint32 = 0x1002202 /* U+2202 PARTIAL DIFFERENTIAL */
const KEY_emptyset uint32 = 0x1002205         /* U+2205 NULL SET */
const KEY_elementof uint32 = 0x1002208        /* U+2208 ELEMENT OF */
const KEY_notelementof uint32 = 0x1002209     /* U+2209 NOT AN ELEMENT OF */
const KEY_containsas uint32 = 0x100220B       /* U+220B CONTAINS AS MEMBER */
const KEY_squareroot uint32 = 0x100221A       /* U+221A SQUARE ROOT */
const KEY_cuberoot uint32 = 0x100221B         /* U+221B CUBE ROOT */
const KEY_fourthroot uint32 = 0x100221C       /* U+221C FOURTH ROOT */
const KEY_dintegral uint32 = 0x100222C        /* U+222C DOUBLE INTEGRAL */
const KEY_tintegral uint32 = 0x100222D        /* U+222D TRIPLE INTEGRAL */
const KEY_because uint32 = 0x1002235          /* U+2235 BECAUSE */
const KEY_approxeq uint32 = 0x1002248         /* U+2245 ALMOST EQUAL TO */
const KEY_notapproxeq uint32 = 0x1002247      /* U+2247 NOT ALMOST EQUAL TO */
const KEY_notidentical uint32 = 0x1002262     /* U+2262 NOT IDENTICAL TO */
const KEY_stricteq uint32 = 0x1002263         /* U+2263 STRICTLY EQUIVALENT TO */

const KEY_braille_dot_1 uint32 = 0xfff1
const KEY_braille_dot_2 uint32 = 0xfff2
const KEY_braille_dot_3 uint32 = 0xfff3
const KEY_braille_dot_4 uint32 = 0xfff4
const KEY_braille_dot_5 uint32 = 0xfff5
const KEY_braille_dot_6 uint32 = 0xfff6
const KEY_braille_dot_7 uint32 = 0xfff7
const KEY_braille_dot_8 uint32 = 0xfff8
const KEY_braille_dot_9 uint32 = 0xfff9
const KEY_braille_dot_10 uint32 = 0xfffa
const KEY_braille_blank uint32 = 0x1002800         /* U+2800 BRAILLE PATTERN BLANK */
const KEY_braille_dots_1 uint32 = 0x1002801        /* U+2801 BRAILLE PATTERN DOTS-1 */
const KEY_braille_dots_2 uint32 = 0x1002802        /* U+2802 BRAILLE PATTERN DOTS-2 */
const KEY_braille_dots_12 uint32 = 0x1002803       /* U+2803 BRAILLE PATTERN DOTS-12 */
const KEY_braille_dots_3 uint32 = 0x1002804        /* U+2804 BRAILLE PATTERN DOTS-3 */
const KEY_braille_dots_13 uint32 = 0x1002805       /* U+2805 BRAILLE PATTERN DOTS-13 */
const KEY_braille_dots_23 uint32 = 0x1002806       /* U+2806 BRAILLE PATTERN DOTS-23 */
const KEY_braille_dots_123 uint32 = 0x1002807      /* U+2807 BRAILLE PATTERN DOTS-123 */
const KEY_braille_dots_4 uint32 = 0x1002808        /* U+2808 BRAILLE PATTERN DOTS-4 */
const KEY_braille_dots_14 uint32 = 0x1002809       /* U+2809 BRAILLE PATTERN DOTS-14 */
const KEY_braille_dots_24 uint32 = 0x100280a       /* U+280a BRAILLE PATTERN DOTS-24 */
const KEY_braille_dots_124 uint32 = 0x100280b      /* U+280b BRAILLE PATTERN DOTS-124 */
const KEY_braille_dots_34 uint32 = 0x100280c       /* U+280c BRAILLE PATTERN DOTS-34 */
const KEY_braille_dots_134 uint32 = 0x100280d      /* U+280d BRAILLE PATTERN DOTS-134 */
const KEY_braille_dots_234 uint32 = 0x100280e      /* U+280e BRAILLE PATTERN DOTS-234 */
const KEY_braille_dots_1234 uint32 = 0x100280f     /* U+280f BRAILLE PATTERN DOTS-1234 */
const KEY_braille_dots_5 uint32 = 0x1002810        /* U+2810 BRAILLE PATTERN DOTS-5 */
const KEY_braille_dots_15 uint32 = 0x1002811       /* U+2811 BRAILLE PATTERN DOTS-15 */
const KEY_braille_dots_25 uint32 = 0x1002812       /* U+2812 BRAILLE PATTERN DOTS-25 */
const KEY_braille_dots_125 uint32 = 0x1002813      /* U+2813 BRAILLE PATTERN DOTS-125 */
const KEY_braille_dots_35 uint32 = 0x1002814       /* U+2814 BRAILLE PATTERN DOTS-35 */
const KEY_braille_dots_135 uint32 = 0x1002815      /* U+2815 BRAILLE PATTERN DOTS-135 */
const KEY_braille_dots_235 uint32 = 0x1002816      /* U+2816 BRAILLE PATTERN DOTS-235 */
const KEY_braille_dots_1235 uint32 = 0x1002817     /* U+2817 BRAILLE PATTERN DOTS-1235 */
const KEY_braille_dots_45 uint32 = 0x1002818       /* U+2818 BRAILLE PATTERN DOTS-45 */
const KEY_braille_dots_145 uint32 = 0x1002819      /* U+2819 BRAILLE PATTERN DOTS-145 */
const KEY_braille_dots_245 uint32 = 0x100281a      /* U+281a BRAILLE PATTERN DOTS-245 */
const KEY_braille_dots_1245 uint32 = 0x100281b     /* U+281b BRAILLE PATTERN DOTS-1245 */
const KEY_braille_dots_345 uint32 = 0x100281c      /* U+281c BRAILLE PATTERN DOTS-345 */
const KEY_braille_dots_1345 uint32 = 0x100281d     /* U+281d BRAILLE PATTERN DOTS-1345 */
const KEY_braille_dots_2345 uint32 = 0x100281e     /* U+281e BRAILLE PATTERN DOTS-2345 */
const KEY_braille_dots_12345 uint32 = 0x100281f    /* U+281f BRAILLE PATTERN DOTS-12345 */
const KEY_braille_dots_6 uint32 = 0x1002820        /* U+2820 BRAILLE PATTERN DOTS-6 */
const KEY_braille_dots_16 uint32 = 0x1002821       /* U+2821 BRAILLE PATTERN DOTS-16 */
const KEY_braille_dots_26 uint32 = 0x1002822       /* U+2822 BRAILLE PATTERN DOTS-26 */
const KEY_braille_dots_126 uint32 = 0x1002823      /* U+2823 BRAILLE PATTERN DOTS-126 */
const KEY_braille_dots_36 uint32 = 0x1002824       /* U+2824 BRAILLE PATTERN DOTS-36 */
const KEY_braille_dots_136 uint32 = 0x1002825      /* U+2825 BRAILLE PATTERN DOTS-136 */
const KEY_braille_dots_236 uint32 = 0x1002826      /* U+2826 BRAILLE PATTERN DOTS-236 */
const KEY_braille_dots_1236 uint32 = 0x1002827     /* U+2827 BRAILLE PATTERN DOTS-1236 */
const KEY_braille_dots_46 uint32 = 0x1002828       /* U+2828 BRAILLE PATTERN DOTS-46 */
const KEY_braille_dots_146 uint32 = 0x1002829      /* U+2829 BRAILLE PATTERN DOTS-146 */
const KEY_braille_dots_246 uint32 = 0x100282a      /* U+282a BRAILLE PATTERN DOTS-246 */
const KEY_braille_dots_1246 uint32 = 0x100282b     /* U+282b BRAILLE PATTERN DOTS-1246 */
const KEY_braille_dots_346 uint32 = 0x100282c      /* U+282c BRAILLE PATTERN DOTS-346 */
const KEY_braille_dots_1346 uint32 = 0x100282d     /* U+282d BRAILLE PATTERN DOTS-1346 */
const KEY_braille_dots_2346 uint32 = 0x100282e     /* U+282e BRAILLE PATTERN DOTS-2346 */
const KEY_braille_dots_12346 uint32 = 0x100282f    /* U+282f BRAILLE PATTERN DOTS-12346 */
const KEY_braille_dots_56 uint32 = 0x1002830       /* U+2830 BRAILLE PATTERN DOTS-56 */
const KEY_braille_dots_156 uint32 = 0x1002831      /* U+2831 BRAILLE PATTERN DOTS-156 */
const KEY_braille_dots_256 uint32 = 0x1002832      /* U+2832 BRAILLE PATTERN DOTS-256 */
const KEY_braille_dots_1256 uint32 = 0x1002833     /* U+2833 BRAILLE PATTERN DOTS-1256 */
const KEY_braille_dots_356 uint32 = 0x1002834      /* U+2834 BRAILLE PATTERN DOTS-356 */
const KEY_braille_dots_1356 uint32 = 0x1002835     /* U+2835 BRAILLE PATTERN DOTS-1356 */
const KEY_braille_dots_2356 uint32 = 0x1002836     /* U+2836 BRAILLE PATTERN DOTS-2356 */
const KEY_braille_dots_12356 uint32 = 0x1002837    /* U+2837 BRAILLE PATTERN DOTS-12356 */
const KEY_braille_dots_456 uint32 = 0x1002838      /* U+2838 BRAILLE PATTERN DOTS-456 */
const KEY_braille_dots_1456 uint32 = 0x1002839     /* U+2839 BRAILLE PATTERN DOTS-1456 */
const KEY_braille_dots_2456 uint32 = 0x100283a     /* U+283a BRAILLE PATTERN DOTS-2456 */
const KEY_braille_dots_12456 uint32 = 0x100283b    /* U+283b BRAILLE PATTERN DOTS-12456 */
const KEY_braille_dots_3456 uint32 = 0x100283c     /* U+283c BRAILLE PATTERN DOTS-3456 */
const KEY_braille_dots_13456 uint32 = 0x100283d    /* U+283d BRAILLE PATTERN DOTS-13456 */
const KEY_braille_dots_23456 uint32 = 0x100283e    /* U+283e BRAILLE PATTERN DOTS-23456 */
const KEY_braille_dots_123456 uint32 = 0x100283f   /* U+283f BRAILLE PATTERN DOTS-123456 */
const KEY_braille_dots_7 uint32 = 0x1002840        /* U+2840 BRAILLE PATTERN DOTS-7 */
const KEY_braille_dots_17 uint32 = 0x1002841       /* U+2841 BRAILLE PATTERN DOTS-17 */
const KEY_braille_dots_27 uint32 = 0x1002842       /* U+2842 BRAILLE PATTERN DOTS-27 */
const KEY_braille_dots_127 uint32 = 0x1002843      /* U+2843 BRAILLE PATTERN DOTS-127 */
const KEY_braille_dots_37 uint32 = 0x1002844       /* U+2844 BRAILLE PATTERN DOTS-37 */
const KEY_braille_dots_137 uint32 = 0x1002845      /* U+2845 BRAILLE PATTERN DOTS-137 */
const KEY_braille_dots_237 uint32 = 0x1002846      /* U+2846 BRAILLE PATTERN DOTS-237 */
const KEY_braille_dots_1237 uint32 = 0x1002847     /* U+2847 BRAILLE PATTERN DOTS-1237 */
const KEY_braille_dots_47 uint32 = 0x1002848       /* U+2848 BRAILLE PATTERN DOTS-47 */
const KEY_braille_dots_147 uint32 = 0x1002849      /* U+2849 BRAILLE PATTERN DOTS-147 */
const KEY_braille_dots_247 uint32 = 0x100284a      /* U+284a BRAILLE PATTERN DOTS-247 */
const KEY_braille_dots_1247 uint32 = 0x100284b     /* U+284b BRAILLE PATTERN DOTS-1247 */
const KEY_braille_dots_347 uint32 = 0x100284c      /* U+284c BRAILLE PATTERN DOTS-347 */
const KEY_braille_dots_1347 uint32 = 0x100284d     /* U+284d BRAILLE PATTERN DOTS-1347 */
const KEY_braille_dots_2347 uint32 = 0x100284e     /* U+284e BRAILLE PATTERN DOTS-2347 */
const KEY_braille_dots_12347 uint32 = 0x100284f    /* U+284f BRAILLE PATTERN DOTS-12347 */
const KEY_braille_dots_57 uint32 = 0x1002850       /* U+2850 BRAILLE PATTERN DOTS-57 */
const KEY_braille_dots_157 uint32 = 0x1002851      /* U+2851 BRAILLE PATTERN DOTS-157 */
const KEY_braille_dots_257 uint32 = 0x1002852      /* U+2852 BRAILLE PATTERN DOTS-257 */
const KEY_braille_dots_1257 uint32 = 0x1002853     /* U+2853 BRAILLE PATTERN DOTS-1257 */
const KEY_braille_dots_357 uint32 = 0x1002854      /* U+2854 BRAILLE PATTERN DOTS-357 */
const KEY_braille_dots_1357 uint32 = 0x1002855     /* U+2855 BRAILLE PATTERN DOTS-1357 */
const KEY_braille_dots_2357 uint32 = 0x1002856     /* U+2856 BRAILLE PATTERN DOTS-2357 */
const KEY_braille_dots_12357 uint32 = 0x1002857    /* U+2857 BRAILLE PATTERN DOTS-12357 */
const KEY_braille_dots_457 uint32 = 0x1002858      /* U+2858 BRAILLE PATTERN DOTS-457 */
const KEY_braille_dots_1457 uint32 = 0x1002859     /* U+2859 BRAILLE PATTERN DOTS-1457 */
const KEY_braille_dots_2457 uint32 = 0x100285a     /* U+285a BRAILLE PATTERN DOTS-2457 */
const KEY_braille_dots_12457 uint32 = 0x100285b    /* U+285b BRAILLE PATTERN DOTS-12457 */
const KEY_braille_dots_3457 uint32 = 0x100285c     /* U+285c BRAILLE PATTERN DOTS-3457 */
const KEY_braille_dots_13457 uint32 = 0x100285d    /* U+285d BRAILLE PATTERN DOTS-13457 */
const KEY_braille_dots_23457 uint32 = 0x100285e    /* U+285e BRAILLE PATTERN DOTS-23457 */
const KEY_braille_dots_123457 uint32 = 0x100285f   /* U+285f BRAILLE PATTERN DOTS-123457 */
const KEY_braille_dots_67 uint32 = 0x1002860       /* U+2860 BRAILLE PATTERN DOTS-67 */
const KEY_braille_dots_167 uint32 = 0x1002861      /* U+2861 BRAILLE PATTERN DOTS-167 */
const KEY_braille_dots_267 uint32 = 0x1002862      /* U+2862 BRAILLE PATTERN DOTS-267 */
const KEY_braille_dots_1267 uint32 = 0x1002863     /* U+2863 BRAILLE PATTERN DOTS-1267 */
const KEY_braille_dots_367 uint32 = 0x1002864      /* U+2864 BRAILLE PATTERN DOTS-367 */
const KEY_braille_dots_1367 uint32 = 0x1002865     /* U+2865 BRAILLE PATTERN DOTS-1367 */
const KEY_braille_dots_2367 uint32 = 0x1002866     /* U+2866 BRAILLE PATTERN DOTS-2367 */
const KEY_braille_dots_12367 uint32 = 0x1002867    /* U+2867 BRAILLE PATTERN DOTS-12367 */
const KEY_braille_dots_467 uint32 = 0x1002868      /* U+2868 BRAILLE PATTERN DOTS-467 */
const KEY_braille_dots_1467 uint32 = 0x1002869     /* U+2869 BRAILLE PATTERN DOTS-1467 */
const KEY_braille_dots_2467 uint32 = 0x100286a     /* U+286a BRAILLE PATTERN DOTS-2467 */
const KEY_braille_dots_12467 uint32 = 0x100286b    /* U+286b BRAILLE PATTERN DOTS-12467 */
const KEY_braille_dots_3467 uint32 = 0x100286c     /* U+286c BRAILLE PATTERN DOTS-3467 */
const KEY_braille_dots_13467 uint32 = 0x100286d    /* U+286d BRAILLE PATTERN DOTS-13467 */
const KEY_braille_dots_23467 uint32 = 0x100286e    /* U+286e BRAILLE PATTERN DOTS-23467 */
const KEY_braille_dots_123467 uint32 = 0x100286f   /* U+286f BRAILLE PATTERN DOTS-123467 */
const KEY_braille_dots_567 uint32 = 0x1002870      /* U+2870 BRAILLE PATTERN DOTS-567 */
const KEY_braille_dots_1567 uint32 = 0x1002871     /* U+2871 BRAILLE PATTERN DOTS-1567 */
const KEY_braille_dots_2567 uint32 = 0x1002872     /* U+2872 BRAILLE PATTERN DOTS-2567 */
const KEY_braille_dots_12567 uint32 = 0x1002873    /* U+2873 BRAILLE PATTERN DOTS-12567 */
const KEY_braille_dots_3567 uint32 = 0x1002874     /* U+2874 BRAILLE PATTERN DOTS-3567 */
const KEY_braille_dots_13567 uint32 = 0x1002875    /* U+2875 BRAILLE PATTERN DOTS-13567 */
const KEY_braille_dots_23567 uint32 = 0x1002876    /* U+2876 BRAILLE PATTERN DOTS-23567 */
const KEY_braille_dots_123567 uint32 = 0x1002877   /* U+2877 BRAILLE PATTERN DOTS-123567 */
const KEY_braille_dots_4567 uint32 = 0x1002878     /* U+2878 BRAILLE PATTERN DOTS-4567 */
const KEY_braille_dots_14567 uint32 = 0x1002879    /* U+2879 BRAILLE PATTERN DOTS-14567 */
const KEY_braille_dots_24567 uint32 = 0x100287a    /* U+287a BRAILLE PATTERN DOTS-24567 */
const KEY_braille_dots_124567 uint32 = 0x100287b   /* U+287b BRAILLE PATTERN DOTS-124567 */
const KEY_braille_dots_34567 uint32 = 0x100287c    /* U+287c BRAILLE PATTERN DOTS-34567 */
const KEY_braille_dots_134567 uint32 = 0x100287d   /* U+287d BRAILLE PATTERN DOTS-134567 */
const KEY_braille_dots_234567 uint32 = 0x100287e   /* U+287e BRAILLE PATTERN DOTS-234567 */
const KEY_braille_dots_1234567 uint32 = 0x100287f  /* U+287f BRAILLE PATTERN DOTS-1234567 */
const KEY_braille_dots_8 uint32 = 0x1002880        /* U+2880 BRAILLE PATTERN DOTS-8 */
const KEY_braille_dots_18 uint32 = 0x1002881       /* U+2881 BRAILLE PATTERN DOTS-18 */
const KEY_braille_dots_28 uint32 = 0x1002882       /* U+2882 BRAILLE PATTERN DOTS-28 */
const KEY_braille_dots_128 uint32 = 0x1002883      /* U+2883 BRAILLE PATTERN DOTS-128 */
const KEY_braille_dots_38 uint32 = 0x1002884       /* U+2884 BRAILLE PATTERN DOTS-38 */
const KEY_braille_dots_138 uint32 = 0x1002885      /* U+2885 BRAILLE PATTERN DOTS-138 */
const KEY_braille_dots_238 uint32 = 0x1002886      /* U+2886 BRAILLE PATTERN DOTS-238 */
const KEY_braille_dots_1238 uint32 = 0x1002887     /* U+2887 BRAILLE PATTERN DOTS-1238 */
const KEY_braille_dots_48 uint32 = 0x1002888       /* U+2888 BRAILLE PATTERN DOTS-48 */
const KEY_braille_dots_148 uint32 = 0x1002889      /* U+2889 BRAILLE PATTERN DOTS-148 */
const KEY_braille_dots_248 uint32 = 0x100288a      /* U+288a BRAILLE PATTERN DOTS-248 */
const KEY_braille_dots_1248 uint32 = 0x100288b     /* U+288b BRAILLE PATTERN DOTS-1248 */
const KEY_braille_dots_348 uint32 = 0x100288c      /* U+288c BRAILLE PATTERN DOTS-348 */
const KEY_braille_dots_1348 uint32 = 0x100288d     /* U+288d BRAILLE PATTERN DOTS-1348 */
const KEY_braille_dots_2348 uint32 = 0x100288e     /* U+288e BRAILLE PATTERN DOTS-2348 */
const KEY_braille_dots_12348 uint32 = 0x100288f    /* U+288f BRAILLE PATTERN DOTS-12348 */
const KEY_braille_dots_58 uint32 = 0x1002890       /* U+2890 BRAILLE PATTERN DOTS-58 */
const KEY_braille_dots_158 uint32 = 0x1002891      /* U+2891 BRAILLE PATTERN DOTS-158 */
const KEY_braille_dots_258 uint32 = 0x1002892      /* U+2892 BRAILLE PATTERN DOTS-258 */
const KEY_braille_dots_1258 uint32 = 0x1002893     /* U+2893 BRAILLE PATTERN DOTS-1258 */
const KEY_braille_dots_358 uint32 = 0x1002894      /* U+2894 BRAILLE PATTERN DOTS-358 */
const KEY_braille_dots_1358 uint32 = 0x1002895     /* U+2895 BRAILLE PATTERN DOTS-1358 */
const KEY_braille_dots_2358 uint32 = 0x1002896     /* U+2896 BRAILLE PATTERN DOTS-2358 */
const KEY_braille_dots_12358 uint32 = 0x1002897    /* U+2897 BRAILLE PATTERN DOTS-12358 */
const KEY_braille_dots_458 uint32 = 0x1002898      /* U+2898 BRAILLE PATTERN DOTS-458 */
const KEY_braille_dots_1458 uint32 = 0x1002899     /* U+2899 BRAILLE PATTERN DOTS-1458 */
const KEY_braille_dots_2458 uint32 = 0x100289a     /* U+289a BRAILLE PATTERN DOTS-2458 */
const KEY_braille_dots_12458 uint32 = 0x100289b    /* U+289b BRAILLE PATTERN DOTS-12458 */
const KEY_braille_dots_3458 uint32 = 0x100289c     /* U+289c BRAILLE PATTERN DOTS-3458 */
const KEY_braille_dots_13458 uint32 = 0x100289d    /* U+289d BRAILLE PATTERN DOTS-13458 */
const KEY_braille_dots_23458 uint32 = 0x100289e    /* U+289e BRAILLE PATTERN DOTS-23458 */
const KEY_braille_dots_123458 uint32 = 0x100289f   /* U+289f BRAILLE PATTERN DOTS-123458 */
const KEY_braille_dots_68 uint32 = 0x10028a0       /* U+28a0 BRAILLE PATTERN DOTS-68 */
const KEY_braille_dots_168 uint32 = 0x10028a1      /* U+28a1 BRAILLE PATTERN DOTS-168 */
const KEY_braille_dots_268 uint32 = 0x10028a2      /* U+28a2 BRAILLE PATTERN DOTS-268 */
const KEY_braille_dots_1268 uint32 = 0x10028a3     /* U+28a3 BRAILLE PATTERN DOTS-1268 */
const KEY_braille_dots_368 uint32 = 0x10028a4      /* U+28a4 BRAILLE PATTERN DOTS-368 */
const KEY_braille_dots_1368 uint32 = 0x10028a5     /* U+28a5 BRAILLE PATTERN DOTS-1368 */
const KEY_braille_dots_2368 uint32 = 0x10028a6     /* U+28a6 BRAILLE PATTERN DOTS-2368 */
const KEY_braille_dots_12368 uint32 = 0x10028a7    /* U+28a7 BRAILLE PATTERN DOTS-12368 */
const KEY_braille_dots_468 uint32 = 0x10028a8      /* U+28a8 BRAILLE PATTERN DOTS-468 */
const KEY_braille_dots_1468 uint32 = 0x10028a9     /* U+28a9 BRAILLE PATTERN DOTS-1468 */
const KEY_braille_dots_2468 uint32 = 0x10028aa     /* U+28aa BRAILLE PATTERN DOTS-2468 */
const KEY_braille_dots_12468 uint32 = 0x10028ab    /* U+28ab BRAILLE PATTERN DOTS-12468 */
const KEY_braille_dots_3468 uint32 = 0x10028ac     /* U+28ac BRAILLE PATTERN DOTS-3468 */
const KEY_braille_dots_13468 uint32 = 0x10028ad    /* U+28ad BRAILLE PATTERN DOTS-13468 */
const KEY_braille_dots_23468 uint32 = 0x10028ae    /* U+28ae BRAILLE PATTERN DOTS-23468 */
const KEY_braille_dots_123468 uint32 = 0x10028af   /* U+28af BRAILLE PATTERN DOTS-123468 */
const KEY_braille_dots_568 uint32 = 0x10028b0      /* U+28b0 BRAILLE PATTERN DOTS-568 */
const KEY_braille_dots_1568 uint32 = 0x10028b1     /* U+28b1 BRAILLE PATTERN DOTS-1568 */
const KEY_braille_dots_2568 uint32 = 0x10028b2     /* U+28b2 BRAILLE PATTERN DOTS-2568 */
const KEY_braille_dots_12568 uint32 = 0x10028b3    /* U+28b3 BRAILLE PATTERN DOTS-12568 */
const KEY_braille_dots_3568 uint32 = 0x10028b4     /* U+28b4 BRAILLE PATTERN DOTS-3568 */
const KEY_braille_dots_13568 uint32 = 0x10028b5    /* U+28b5 BRAILLE PATTERN DOTS-13568 */
const KEY_braille_dots_23568 uint32 = 0x10028b6    /* U+28b6 BRAILLE PATTERN DOTS-23568 */
const KEY_braille_dots_123568 uint32 = 0x10028b7   /* U+28b7 BRAILLE PATTERN DOTS-123568 */
const KEY_braille_dots_4568 uint32 = 0x10028b8     /* U+28b8 BRAILLE PATTERN DOTS-4568 */
const KEY_braille_dots_14568 uint32 = 0x10028b9    /* U+28b9 BRAILLE PATTERN DOTS-14568 */
const KEY_braille_dots_24568 uint32 = 0x10028ba    /* U+28ba BRAILLE PATTERN DOTS-24568 */
const KEY_braille_dots_124568 uint32 = 0x10028bb   /* U+28bb BRAILLE PATTERN DOTS-124568 */
const KEY_braille_dots_34568 uint32 = 0x10028bc    /* U+28bc BRAILLE PATTERN DOTS-34568 */
const KEY_braille_dots_134568 uint32 = 0x10028bd   /* U+28bd BRAILLE PATTERN DOTS-134568 */
const KEY_braille_dots_234568 uint32 = 0x10028be   /* U+28be BRAILLE PATTERN DOTS-234568 */
const KEY_braille_dots_1234568 uint32 = 0x10028bf  /* U+28bf BRAILLE PATTERN DOTS-1234568 */
const KEY_braille_dots_78 uint32 = 0x10028c0       /* U+28c0 BRAILLE PATTERN DOTS-78 */
const KEY_braille_dots_178 uint32 = 0x10028c1      /* U+28c1 BRAILLE PATTERN DOTS-178 */
const KEY_braille_dots_278 uint32 = 0x10028c2      /* U+28c2 BRAILLE PATTERN DOTS-278 */
const KEY_braille_dots_1278 uint32 = 0x10028c3     /* U+28c3 BRAILLE PATTERN DOTS-1278 */
const KEY_braille_dots_378 uint32 = 0x10028c4      /* U+28c4 BRAILLE PATTERN DOTS-378 */
const KEY_braille_dots_1378 uint32 = 0x10028c5     /* U+28c5 BRAILLE PATTERN DOTS-1378 */
const KEY_braille_dots_2378 uint32 = 0x10028c6     /* U+28c6 BRAILLE PATTERN DOTS-2378 */
const KEY_braille_dots_12378 uint32 = 0x10028c7    /* U+28c7 BRAILLE PATTERN DOTS-12378 */
const KEY_braille_dots_478 uint32 = 0x10028c8      /* U+28c8 BRAILLE PATTERN DOTS-478 */
const KEY_braille_dots_1478 uint32 = 0x10028c9     /* U+28c9 BRAILLE PATTERN DOTS-1478 */
const KEY_braille_dots_2478 uint32 = 0x10028ca     /* U+28ca BRAILLE PATTERN DOTS-2478 */
const KEY_braille_dots_12478 uint32 = 0x10028cb    /* U+28cb BRAILLE PATTERN DOTS-12478 */
const KEY_braille_dots_3478 uint32 = 0x10028cc     /* U+28cc BRAILLE PATTERN DOTS-3478 */
const KEY_braille_dots_13478 uint32 = 0x10028cd    /* U+28cd BRAILLE PATTERN DOTS-13478 */
const KEY_braille_dots_23478 uint32 = 0x10028ce    /* U+28ce BRAILLE PATTERN DOTS-23478 */
const KEY_braille_dots_123478 uint32 = 0x10028cf   /* U+28cf BRAILLE PATTERN DOTS-123478 */
const KEY_braille_dots_578 uint32 = 0x10028d0      /* U+28d0 BRAILLE PATTERN DOTS-578 */
const KEY_braille_dots_1578 uint32 = 0x10028d1     /* U+28d1 BRAILLE PATTERN DOTS-1578 */
const KEY_braille_dots_2578 uint32 = 0x10028d2     /* U+28d2 BRAILLE PATTERN DOTS-2578 */
const KEY_braille_dots_12578 uint32 = 0x10028d3    /* U+28d3 BRAILLE PATTERN DOTS-12578 */
const KEY_braille_dots_3578 uint32 = 0x10028d4     /* U+28d4 BRAILLE PATTERN DOTS-3578 */
const KEY_braille_dots_13578 uint32 = 0x10028d5    /* U+28d5 BRAILLE PATTERN DOTS-13578 */
const KEY_braille_dots_23578 uint32 = 0x10028d6    /* U+28d6 BRAILLE PATTERN DOTS-23578 */
const KEY_braille_dots_123578 uint32 = 0x10028d7   /* U+28d7 BRAILLE PATTERN DOTS-123578 */
const KEY_braille_dots_4578 uint32 = 0x10028d8     /* U+28d8 BRAILLE PATTERN DOTS-4578 */
const KEY_braille_dots_14578 uint32 = 0x10028d9    /* U+28d9 BRAILLE PATTERN DOTS-14578 */
const KEY_braille_dots_24578 uint32 = 0x10028da    /* U+28da BRAILLE PATTERN DOTS-24578 */
const KEY_braille_dots_124578 uint32 = 0x10028db   /* U+28db BRAILLE PATTERN DOTS-124578 */
const KEY_braille_dots_34578 uint32 = 0x10028dc    /* U+28dc BRAILLE PATTERN DOTS-34578 */
const KEY_braille_dots_134578 uint32 = 0x10028dd   /* U+28dd BRAILLE PATTERN DOTS-134578 */
const KEY_braille_dots_234578 uint32 = 0x10028de   /* U+28de BRAILLE PATTERN DOTS-234578 */
const KEY_braille_dots_1234578 uint32 = 0x10028df  /* U+28df BRAILLE PATTERN DOTS-1234578 */
const KEY_braille_dots_678 uint32 = 0x10028e0      /* U+28e0 BRAILLE PATTERN DOTS-678 */
const KEY_braille_dots_1678 uint32 = 0x10028e1     /* U+28e1 BRAILLE PATTERN DOTS-1678 */
const KEY_braille_dots_2678 uint32 = 0x10028e2     /* U+28e2 BRAILLE PATTERN DOTS-2678 */
const KEY_braille_dots_12678 uint32 = 0x10028e3    /* U+28e3 BRAILLE PATTERN DOTS-12678 */
const KEY_braille_dots_3678 uint32 = 0x10028e4     /* U+28e4 BRAILLE PATTERN DOTS-3678 */
const KEY_braille_dots_13678 uint32 = 0x10028e5    /* U+28e5 BRAILLE PATTERN DOTS-13678 */
const KEY_braille_dots_23678 uint32 = 0x10028e6    /* U+28e6 BRAILLE PATTERN DOTS-23678 */
const KEY_braille_dots_123678 uint32 = 0x10028e7   /* U+28e7 BRAILLE PATTERN DOTS-123678 */
const KEY_braille_dots_4678 uint32 = 0x10028e8     /* U+28e8 BRAILLE PATTERN DOTS-4678 */
const KEY_braille_dots_14678 uint32 = 0x10028e9    /* U+28e9 BRAILLE PATTERN DOTS-14678 */
const KEY_braille_dots_24678 uint32 = 0x10028ea    /* U+28ea BRAILLE PATTERN DOTS-24678 */
const KEY_braille_dots_124678 uint32 = 0x10028eb   /* U+28eb BRAILLE PATTERN DOTS-124678 */
const KEY_braille_dots_34678 uint32 = 0x10028ec    /* U+28ec BRAILLE PATTERN DOTS-34678 */
const KEY_braille_dots_134678 uint32 = 0x10028ed   /* U+28ed BRAILLE PATTERN DOTS-134678 */
const KEY_braille_dots_234678 uint32 = 0x10028ee   /* U+28ee BRAILLE PATTERN DOTS-234678 */
const KEY_braille_dots_1234678 uint32 = 0x10028ef  /* U+28ef BRAILLE PATTERN DOTS-1234678 */
const KEY_braille_dots_5678 uint32 = 0x10028f0     /* U+28f0 BRAILLE PATTERN DOTS-5678 */
const KEY_braille_dots_15678 uint32 = 0x10028f1    /* U+28f1 BRAILLE PATTERN DOTS-15678 */
const KEY_braille_dots_25678 uint32 = 0x10028f2    /* U+28f2 BRAILLE PATTERN DOTS-25678 */
const KEY_braille_dots_125678 uint32 = 0x10028f3   /* U+28f3 BRAILLE PATTERN DOTS-125678 */
const KEY_braille_dots_35678 uint32 = 0x10028f4    /* U+28f4 BRAILLE PATTERN DOTS-35678 */
const KEY_braille_dots_135678 uint32 = 0x10028f5   /* U+28f5 BRAILLE PATTERN DOTS-135678 */
const KEY_braille_dots_235678 uint32 = 0x10028f6   /* U+28f6 BRAILLE PATTERN DOTS-235678 */
const KEY_braille_dots_1235678 uint32 = 0x10028f7  /* U+28f7 BRAILLE PATTERN DOTS-1235678 */
const KEY_braille_dots_45678 uint32 = 0x10028f8    /* U+28f8 BRAILLE PATTERN DOTS-45678 */
const KEY_braille_dots_145678 uint32 = 0x10028f9   /* U+28f9 BRAILLE PATTERN DOTS-145678 */
const KEY_braille_dots_245678 uint32 = 0x10028fa   /* U+28fa BRAILLE PATTERN DOTS-245678 */
const KEY_braille_dots_1245678 uint32 = 0x10028fb  /* U+28fb BRAILLE PATTERN DOTS-1245678 */
const KEY_braille_dots_345678 uint32 = 0x10028fc   /* U+28fc BRAILLE PATTERN DOTS-345678 */
const KEY_braille_dots_1345678 uint32 = 0x10028fd  /* U+28fd BRAILLE PATTERN DOTS-1345678 */
const KEY_braille_dots_2345678 uint32 = 0x10028fe  /* U+28fe BRAILLE PATTERN DOTS-2345678 */
const KEY_braille_dots_12345678 uint32 = 0x10028ff /* U+28ff BRAILLE PATTERN DOTS-12345678 */

/*
 * Sinhala (http://unicode.org/charts/PDF/U0D80.pdf)
 * http://www.nongnu.org/sinhala/doc/transliteration/sinhala-transliteration_6.html
 */

const KEY_Sinh_ng uint32 = 0x1000d82         /* U+0D82 SINHALA ANUSVARAYA */
const KEY_Sinh_h2 uint32 = 0x1000d83         /* U+0D83 SINHALA VISARGAYA */
const KEY_Sinh_a uint32 = 0x1000d85          /* U+0D85 SINHALA AYANNA */
const KEY_Sinh_aa uint32 = 0x1000d86         /* U+0D86 SINHALA AAYANNA */
const KEY_Sinh_ae uint32 = 0x1000d87         /* U+0D87 SINHALA AEYANNA */
const KEY_Sinh_aee uint32 = 0x1000d88        /* U+0D88 SINHALA AEEYANNA */
const KEY_Sinh_i uint32 = 0x1000d89          /* U+0D89 SINHALA IYANNA */
const KEY_Sinh_ii uint32 = 0x1000d8a         /* U+0D8A SINHALA IIYANNA */
const KEY_Sinh_u uint32 = 0x1000d8b          /* U+0D8B SINHALA UYANNA */
const KEY_Sinh_uu uint32 = 0x1000d8c         /* U+0D8C SINHALA UUYANNA */
const KEY_Sinh_ri uint32 = 0x1000d8d         /* U+0D8D SINHALA IRUYANNA */
const KEY_Sinh_rii uint32 = 0x1000d8e        /* U+0D8E SINHALA IRUUYANNA */
const KEY_Sinh_lu uint32 = 0x1000d8f         /* U+0D8F SINHALA ILUYANNA */
const KEY_Sinh_luu uint32 = 0x1000d90        /* U+0D90 SINHALA ILUUYANNA */
const KEY_Sinh_e uint32 = 0x1000d91          /* U+0D91 SINHALA EYANNA */
const KEY_Sinh_ee uint32 = 0x1000d92         /* U+0D92 SINHALA EEYANNA */
const KEY_Sinh_ai uint32 = 0x1000d93         /* U+0D93 SINHALA AIYANNA */
const KEY_Sinh_o uint32 = 0x1000d94          /* U+0D94 SINHALA OYANNA */
const KEY_Sinh_oo uint32 = 0x1000d95         /* U+0D95 SINHALA OOYANNA */
const KEY_Sinh_au uint32 = 0x1000d96         /* U+0D96 SINHALA AUYANNA */
const KEY_Sinh_ka uint32 = 0x1000d9a         /* U+0D9A SINHALA KAYANNA */
const KEY_Sinh_kha uint32 = 0x1000d9b        /* U+0D9B SINHALA MAHA. KAYANNA */
const KEY_Sinh_ga uint32 = 0x1000d9c         /* U+0D9C SINHALA GAYANNA */
const KEY_Sinh_gha uint32 = 0x1000d9d        /* U+0D9D SINHALA MAHA. GAYANNA */
const KEY_Sinh_ng2 uint32 = 0x1000d9e        /* U+0D9E SINHALA KANTAJA NAASIKYAYA */
const KEY_Sinh_nga uint32 = 0x1000d9f        /* U+0D9F SINHALA SANYAKA GAYANNA */
const KEY_Sinh_ca uint32 = 0x1000da0         /* U+0DA0 SINHALA CAYANNA */
const KEY_Sinh_cha uint32 = 0x1000da1        /* U+0DA1 SINHALA MAHA. CAYANNA */
const KEY_Sinh_ja uint32 = 0x1000da2         /* U+0DA2 SINHALA JAYANNA */
const KEY_Sinh_jha uint32 = 0x1000da3        /* U+0DA3 SINHALA MAHA. JAYANNA */
const KEY_Sinh_nya uint32 = 0x1000da4        /* U+0DA4 SINHALA TAALUJA NAASIKYAYA */
const KEY_Sinh_jnya uint32 = 0x1000da5       /* U+0DA5 SINHALA TAALUJA SANYOOGA NAASIKYAYA */
const KEY_Sinh_nja uint32 = 0x1000da6        /* U+0DA6 SINHALA SANYAKA JAYANNA */
const KEY_Sinh_tta uint32 = 0x1000da7        /* U+0DA7 SINHALA TTAYANNA */
const KEY_Sinh_ttha uint32 = 0x1000da8       /* U+0DA8 SINHALA MAHA. TTAYANNA */
const KEY_Sinh_dda uint32 = 0x1000da9        /* U+0DA9 SINHALA DDAYANNA */
const KEY_Sinh_ddha uint32 = 0x1000daa       /* U+0DAA SINHALA MAHA. DDAYANNA */
const KEY_Sinh_nna uint32 = 0x1000dab        /* U+0DAB SINHALA MUURDHAJA NAYANNA */
const KEY_Sinh_ndda uint32 = 0x1000dac       /* U+0DAC SINHALA SANYAKA DDAYANNA */
const KEY_Sinh_tha uint32 = 0x1000dad        /* U+0DAD SINHALA TAYANNA */
const KEY_Sinh_thha uint32 = 0x1000dae       /* U+0DAE SINHALA MAHA. TAYANNA */
const KEY_Sinh_dha uint32 = 0x1000daf        /* U+0DAF SINHALA DAYANNA */
const KEY_Sinh_dhha uint32 = 0x1000db0       /* U+0DB0 SINHALA MAHA. DAYANNA */
const KEY_Sinh_na uint32 = 0x1000db1         /* U+0DB1 SINHALA DANTAJA NAYANNA */
const KEY_Sinh_ndha uint32 = 0x1000db3       /* U+0DB3 SINHALA SANYAKA DAYANNA */
const KEY_Sinh_pa uint32 = 0x1000db4         /* U+0DB4 SINHALA PAYANNA */
const KEY_Sinh_pha uint32 = 0x1000db5        /* U+0DB5 SINHALA MAHA. PAYANNA */
const KEY_Sinh_ba uint32 = 0x1000db6         /* U+0DB6 SINHALA BAYANNA */
const KEY_Sinh_bha uint32 = 0x1000db7        /* U+0DB7 SINHALA MAHA. BAYANNA */
const KEY_Sinh_ma uint32 = 0x1000db8         /* U+0DB8 SINHALA MAYANNA */
const KEY_Sinh_mba uint32 = 0x1000db9        /* U+0DB9 SINHALA AMBA BAYANNA */
const KEY_Sinh_ya uint32 = 0x1000dba         /* U+0DBA SINHALA YAYANNA */
const KEY_Sinh_ra uint32 = 0x1000dbb         /* U+0DBB SINHALA RAYANNA */
const KEY_Sinh_la uint32 = 0x1000dbd         /* U+0DBD SINHALA DANTAJA LAYANNA */
const KEY_Sinh_va uint32 = 0x1000dc0         /* U+0DC0 SINHALA VAYANNA */
const KEY_Sinh_sha uint32 = 0x1000dc1        /* U+0DC1 SINHALA TAALUJA SAYANNA */
const KEY_Sinh_ssha uint32 = 0x1000dc2       /* U+0DC2 SINHALA MUURDHAJA SAYANNA */
const KEY_Sinh_sa uint32 = 0x1000dc3         /* U+0DC3 SINHALA DANTAJA SAYANNA */
const KEY_Sinh_ha uint32 = 0x1000dc4         /* U+0DC4 SINHALA HAYANNA */
const KEY_Sinh_lla uint32 = 0x1000dc5        /* U+0DC5 SINHALA MUURDHAJA LAYANNA */
const KEY_Sinh_fa uint32 = 0x1000dc6         /* U+0DC6 SINHALA FAYANNA */
const KEY_Sinh_al uint32 = 0x1000dca         /* U+0DCA SINHALA AL-LAKUNA */
const KEY_Sinh_aa2 uint32 = 0x1000dcf        /* U+0DCF SINHALA AELA-PILLA */
const KEY_Sinh_ae2 uint32 = 0x1000dd0        /* U+0DD0 SINHALA AEDA-PILLA */
const KEY_Sinh_aee2 uint32 = 0x1000dd1       /* U+0DD1 SINHALA DIGA AEDA-PILLA */
const KEY_Sinh_i2 uint32 = 0x1000dd2         /* U+0DD2 SINHALA IS-PILLA */
const KEY_Sinh_ii2 uint32 = 0x1000dd3        /* U+0DD3 SINHALA DIGA IS-PILLA */
const KEY_Sinh_u2 uint32 = 0x1000dd4         /* U+0DD4 SINHALA PAA-PILLA */
const KEY_Sinh_uu2 uint32 = 0x1000dd6        /* U+0DD6 SINHALA DIGA PAA-PILLA */
const KEY_Sinh_ru2 uint32 = 0x1000dd8        /* U+0DD8 SINHALA GAETTA-PILLA */
const KEY_Sinh_e2 uint32 = 0x1000dd9         /* U+0DD9 SINHALA KOMBUVA */
const KEY_Sinh_ee2 uint32 = 0x1000dda        /* U+0DDA SINHALA DIGA KOMBUVA */
const KEY_Sinh_ai2 uint32 = 0x1000ddb        /* U+0DDB SINHALA KOMBU DEKA */
const KEY_Sinh_o2 uint32 = 0x1000ddc         /* U+0DDC SINHALA KOMBUVA HAA AELA-PILLA*/
const KEY_Sinh_oo2 uint32 = 0x1000ddd        /* U+0DDD SINHALA KOMBUVA HAA DIGA AELA-PILLA*/
const KEY_Sinh_au2 uint32 = 0x1000dde        /* U+0DDE SINHALA KOMBUVA HAA GAYANUKITTA */
const KEY_Sinh_lu2 uint32 = 0x1000ddf        /* U+0DDF SINHALA GAYANUKITTA */
const KEY_Sinh_ruu2 uint32 = 0x1000df2       /* U+0DF2 SINHALA DIGA GAETTA-PILLA */
const KEY_Sinh_luu2 uint32 = 0x1000df3       /* U+0DF3 SINHALA DIGA GAYANUKITTA */
const KEY_Sinh_kunddaliya uint32 = 0x1000df4 /* U+0DF4 SINHALA KUNDDALIYA */
/*
 * XFree86 vendor specific keysyms.
 *
 * The XFree86 keysym range is 0x10080001 - 0x1008FFFF.
 *
 * The XF86 set of keysyms is a catch-all set of defines for keysyms found
 * on various multimedia keyboards. Originally specific to XFree86 they have
 * been been adopted over time and are considered a "standard" part of X
 * keysym definitions.
 * XFree86 never properly commented these keysyms, so we have done our
 * best to explain the semantic meaning of these keys.
 *
 * XFree86 has removed their mail archives of the period, that might have
 * shed more light on some of these definitions. Until/unless we resurrect
 * these archives, these are from memory and usage.
 */

/*
 * ModeLock
 *
 * This one is old, and not really used any more since XKB offers this
 * functionality.
 */

const KEY_XF86ModeLock uint32 = 0x1008FF01 /* Mode Switch Lock */

/* Backlight controls. */
const KEY_XF86MonBrightnessUp uint32 = 0x1008FF02   /* Monitor/panel brightness */
const KEY_XF86MonBrightnessDown uint32 = 0x1008FF03 /* Monitor/panel brightness */
const KEY_XF86KbdLightOnOff uint32 = 0x1008FF04     /* Keyboards may be lit     */
const KEY_XF86KbdBrightnessUp uint32 = 0x1008FF05   /* Keyboards may be lit     */
const KEY_XF86KbdBrightnessDown uint32 = 0x1008FF06 /* Keyboards may be lit     */
const KEY_XF86MonBrightnessCycleuint32 = 0x1008FF07 /* Monitor/panel brightness */

/*
 * Keys found on some "Internet" keyboards.
 */
const KEY_XF86Standby uint32 = 0x1008FF10          /* System into standby mode   */
const KEY_XF86AudioLowerVolume uint32 = 0x1008FF11 /* Volume control down        */
const KEY_XF86AudioMute uint32 = 0x1008FF12        /* Mute sound from the system */
const KEY_XF86AudioRaiseVolume uint32 = 0x1008FF13 /* Volume control up          */
const KEY_XF86AudioPlay uint32 = 0x1008FF14        /* Start playing of audio >   */
const KEY_XF86AudioStop uint32 = 0x1008FF15        /* Stop playing audio         */
const KEY_XF86AudioPrev uint32 = 0x1008FF16        /* Previous track             */
const KEY_XF86AudioNext uint32 = 0x1008FF17        /* Next track                 */
const KEY_XF86HomePage uint32 = 0x1008FF18         /* Display user's home page   */
const KEY_XF86Mail uint32 = 0x1008FF19             /* Invoke user's mail program */
const KEY_XF86Start uint32 = 0x1008FF1A            /* Start application          */
const KEY_XF86Search uint32 = 0x1008FF1B           /* Search                     */
const KEY_XF86AudioRecord uint32 = 0x1008FF1C      /* Record audio application   */

/* These are sometimes found on PDA's (e.g. Palm, PocketPC or elsewhere)   */
const KEY_XF86Calculator uint32 = 0x1008FF1D     /* Invoke calculator program  */
const KEY_XF86Memo uint32 = 0x1008FF1E           /* Invoke Memo taking program */
const KEY_XF86ToDoList uint32 = 0x1008FF1F       /* Invoke To Do List program  */
const KEY_XF86Calendar uint32 = 0x1008FF20       /* Invoke Calendar program    */
const KEY_XF86PowerDown uint32 = 0x1008FF21      /* Deep sleep the system      */
const KEY_XF86ContrastAdjust uint32 = 0x1008FF22 /* Adjust screen contrast     */
const KEY_XF86RockerUp uint32 = 0x1008FF23       /* Rocker switches exist up   */
const KEY_XF86RockerDown uint32 = 0x1008FF24     /* and down                   */
const KEY_XF86RockerEnter uint32 = 0x1008FF25    /* and let you press them     */

/* Some more "Internet" keyboard symbols */
const KEY_XF86Back uint32 = 0x1008FF26             /* Like back on a browser     */
const KEY_XF86Forward uint32 = 0x1008FF27          /* Like forward on a browser  */
const KEY_XF86Stop uint32 = 0x1008FF28             /* Stop current operation     */
const KEY_XF86Refresh uint32 = 0x1008FF29          /* Refresh the page           */
const KEY_XF86PowerOff uint32 = 0x1008FF2A         /* Power off system entirely  */
const KEY_XF86WakeUp uint32 = 0x1008FF2B           /* Wake up system from sleep  */
const KEY_XF86Eject uint32 = 0x1008FF2C            /* Eject device (e.g. DVD)    */
const KEY_XF86ScreenSaver uint32 = 0x1008FF2D      /* Invoke screensaver         */
const KEY_XF86WWW uint32 = 0x1008FF2E              /* Invoke web browser         */
const KEY_XF86Sleep uint32 = 0x1008FF2F            /* Put system to sleep        */
const KEY_XF86Favorites uint32 = 0x1008FF30        /* Show favorite locations    */
const KEY_XF86AudioPause uint32 = 0x1008FF31       /* Pause audio playing        */
const KEY_XF86AudioMedia uint32 = 0x1008FF32       /* Launch media collection app */
const KEY_XF86MyComputer uint32 = 0x1008FF33       /* Display "My Computer" window */
const KEY_XF86VendorHome uint32 = 0x1008FF34       /* Display vendor home web site */
const KEY_XF86LightBulb uint32 = 0x1008FF35        /* Light bulb keys exist       */
const KEY_XF86Shop uint32 = 0x1008FF36             /* Display shopping web site   */
const KEY_XF86History uint32 = 0x1008FF37          /* Show history of web surfing */
const KEY_XF86OpenURL uint32 = 0x1008FF38          /* Open selected URL           */
const KEY_XF86AddFavorite uint32 = 0x1008FF39      /* Add URL to favorites list   */
const KEY_XF86HotLinks uint32 = 0x1008FF3A         /* Show "hot" links            */
const KEY_XF86BrightnessAdjust uint32 = 0x1008FF3B /* Invoke brightness adj. UI   */
const KEY_XF86Finance uint32 = 0x1008FF3C          /* Display financial site      */
const KEY_XF86Community uint32 = 0x1008FF3D        /* Display user's community    */
const KEY_XF86AudioRewind uint32 = 0x1008FF3E      /* "rewind" audio track        */
const KEY_XF86BackForward uint32 = 0x1008FF3F      /* ??? */
const KEY_XF86Launch0 uint32 = 0x1008FF40          /* Launch Application          */
const KEY_XF86Launch1 uint32 = 0x1008FF41          /* Launch Application          */
const KEY_XF86Launch2 uint32 = 0x1008FF42          /* Launch Application          */
const KEY_XF86Launch3 uint32 = 0x1008FF43          /* Launch Application          */
const KEY_XF86Launch4 uint32 = 0x1008FF44          /* Launch Application          */
const KEY_XF86Launch5 uint32 = 0x1008FF45          /* Launch Application          */
const KEY_XF86Launch6 uint32 = 0x1008FF46          /* Launch Application          */
const KEY_XF86Launch7 uint32 = 0x1008FF47          /* Launch Application          */
const KEY_XF86Launch8 uint32 = 0x1008FF48          /* Launch Application          */
const KEY_XF86Launch9 uint32 = 0x1008FF49          /* Launch Application          */
const KEY_XF86LaunchA uint32 = 0x1008FF4A          /* Launch Application          */
const KEY_XF86LaunchB uint32 = 0x1008FF4B          /* Launch Application          */
const KEY_XF86LaunchC uint32 = 0x1008FF4C          /* Launch Application          */
const KEY_XF86LaunchD uint32 = 0x1008FF4D          /* Launch Application          */
const KEY_XF86LaunchE uint32 = 0x1008FF4E          /* Launch Application          */
const KEY_XF86LaunchF uint32 = 0x1008FF4F          /* Launch Application          */

const KEY_XF86ApplicationLeft uint32 = 0x1008FF50  /* switch to application, left */
const KEY_XF86ApplicationRight uint32 = 0x1008FF51 /* switch to application, right*/
const KEY_XF86Book uint32 = 0x1008FF52             /* Launch bookreader           */
const KEY_XF86CD uint32 = 0x1008FF53               /* Launch CD/DVD player        */
const KEY_XF86Calculater uint32 = 0x1008FF54       /* Launch Calculater           */
const KEY_XF86Clear uint32 = 0x1008FF55            /* Clear window, screen        */
const KEY_XF86Close uint32 = 0x1008FF56            /* Close window                */
const KEY_XF86Copy uint32 = 0x1008FF57             /* Copy selection              */
const KEY_XF86Cut uint32 = 0x1008FF58              /* Cut selection               */
const KEY_XF86Display uint32 = 0x1008FF59          /* Output switch key           */
const KEY_XF86DOS uint32 = 0x1008FF5A              /* Launch DOS (emulation)      */
const KEY_XF86Documents uint32 = 0x1008FF5B        /* Open documents window       */
const KEY_XF86Excel uint32 = 0x1008FF5C            /* Launch spread sheet         */
const KEY_XF86Explorer uint32 = 0x1008FF5D         /* Launch file explorer        */
const KEY_XF86Game uint32 = 0x1008FF5E             /* Launch game                 */
const KEY_XF86Go uint32 = 0x1008FF5F               /* Go to URL                   */
const KEY_XF86iTouch uint32 = 0x1008FF60           /* Logitech iTouch- don't use  */
const KEY_XF86LogOff uint32 = 0x1008FF61           /* Log off system              */
const KEY_XF86Market uint32 = 0x1008FF62           /* ??                          */
const KEY_XF86Meeting uint32 = 0x1008FF63          /* enter meeting in calendar   */
const KEY_XF86MenuKB uint32 = 0x1008FF65           /* distinguish keyboard from PB */
const KEY_XF86MenuPB uint32 = 0x1008FF66           /* distinguish PB from keyboard */
const KEY_XF86MySites uint32 = 0x1008FF67          /* Favourites                  */
const KEY_XF86New uint32 = 0x1008FF68              /* New (folder, document...    */
const KEY_XF86News uint32 = 0x1008FF69             /* News                        */
const KEY_XF86OfficeHome uint32 = 0x1008FF6A       /* Office home (old Staroffice)*/
const KEY_XF86Open uint32 = 0x1008FF6B             /* Open                        */
const KEY_XF86Option uint32 = 0x1008FF6C           /* ?? */
const KEY_XF86Paste uint32 = 0x1008FF6D            /* Paste                       */
const KEY_XF86Phone uint32 = 0x1008FF6E            /* Launch phone; dial number   */
const KEY_XF86Q uint32 = 0x1008FF70                /* Compaq's Q - don't use      */
const KEY_XF86Reply uint32 = 0x1008FF72            /* Reply e.g., mail            */
const KEY_XF86Reload uint32 = 0x1008FF73           /* Reload web page, file, etc. */
const KEY_XF86RotateWindows uint32 = 0x1008FF74    /* Rotate windows e.g. xrandr  */
const KEY_XF86RotationPB uint32 = 0x1008FF75       /* don't use                   */
const KEY_XF86RotationKB uint32 = 0x1008FF76       /* don't use                   */
const KEY_XF86Save uint32 = 0x1008FF77             /* Save (file, document, state */
const KEY_XF86ScrollUp uint32 = 0x1008FF78         /* Scroll window/contents up   */
const KEY_XF86ScrollDown uint32 = 0x1008FF79       /* Scrool window/contentd down */
const KEY_XF86ScrollClick uint32 = 0x1008FF7A      /* Use XKB mousekeys instead   */
const KEY_XF86Send uint32 = 0x1008FF7B             /* Send mail, file, object     */
const KEY_XF86Spell uint32 = 0x1008FF7C            /* Spell checker               */
const KEY_XF86SplitScreen uint32 = 0x1008FF7D      /* Split window or screen      */
const KEY_XF86Support uint32 = 0x1008FF7E          /* Get support (??)            */
const KEY_XF86TaskPane uint32 = 0x1008FF7F         /* Show tasks */
const KEY_XF86Terminal uint32 = 0x1008FF80         /* Launch terminal emulator    */
const KEY_XF86Tools uint32 = 0x1008FF81            /* toolbox of desktop/app.     */
const KEY_XF86Travel uint32 = 0x1008FF82           /* ?? */
const KEY_XF86UserPB uint32 = 0x1008FF84           /* ?? */
const KEY_XF86User1KB uint32 = 0x1008FF85          /* ?? */
const KEY_XF86User2KB uint32 = 0x1008FF86          /* ?? */
const KEY_XF86Video uint32 = 0x1008FF87            /* Launch video player       */
const KEY_XF86WheelButton uint32 = 0x1008FF88      /* button from a mouse wheel */
const KEY_XF86Word uint32 = 0x1008FF89             /* Launch word processor     */
const KEY_XF86Xfer uint32 = 0x1008FF8A
const KEY_XF86ZoomIn uint32 = 0x1008FF8B  /* zoom in view, map, etc.   */
const KEY_XF86ZoomOut uint32 = 0x1008FF8C /* zoom out view, map, etc.  */

const KEY_XF86Away uint32 = 0x1008FF8D        /* mark yourself as away     */
const KEY_XF86Messenger uint32 = 0x1008FF8E   /* as in instant messaging   */
const KEY_XF86WebCam uint32 = 0x1008FF8F      /* Launch web camera app.    */
const KEY_XF86MailForward uint32 = 0x1008FF90 /* Forward in mail           */
const KEY_XF86Pictures uint32 = 0x1008FF91    /* Show pictures             */
const KEY_XF86Music uint32 = 0x1008FF92       /* Launch music application  */

const KEY_XF86Battery uint32 = 0x1008FF93   /* Display battery information */
const KEY_XF86Bluetooth uint32 = 0x1008FF94 /* Enable/disable Bluetooth    */
const KEY_XF86WLAN uint32 = 0x1008FF95      /* Enable/disable WLAN         */
const KEY_XF86UWB uint32 = 0x1008FF96       /* Enable/disable UWB	    */

const KEY_XF86AudioForward uint32 = 0x1008FF97    /* fast-forward audio track    */
const KEY_XF86AudioRepeat uint32 = 0x1008FF98     /* toggle repeat mode          */
const KEY_XF86AudioRandomPlay uint32 = 0x1008FF99 /* toggle shuffle mode         */
const KEY_XF86Subtitle uint32 = 0x1008FF9A        /* cycle through subtitle      */
const KEY_XF86AudioCycleTrack uint32 = 0x1008FF9B /* cycle through audio tracks  */
const KEY_XF86CycleAngle uint32 = 0x1008FF9C      /* cycle through angles        */
const KEY_XF86FrameBack uint32 = 0x1008FF9D       /* video: go one frame back    */
const KEY_XF86FrameForward uint32 = 0x1008FF9E    /* video: go one frame forward */
const KEY_XF86Time uint32 = 0x1008FF9F            /* display, or shows an entry for time seeking */
const KEY_XF86Select uint32 = 0x1008FFA0          /* Select button on joypads and remotes */
const KEY_XF86View uint32 = 0x1008FFA1            /* Show a view options/properties */
const KEY_XF86TopMenu uint32 = 0x1008FFA2         /* Go to a top-level menu in a video */

const KEY_XF86Red uint32 = 0x1008FFA3    /* Red button                  */
const KEY_XF86Green uint32 = 0x1008FFA4  /* Green button                */
const KEY_XF86Yellow uint32 = 0x1008FFA5 /* Yellow button               */
const KEY_XF86Blue uint32 = 0x1008FFA6   /* Blue button                 */

const KEY_XF86Suspend uint32 = 0x1008FFA7        /* Sleep to RAM                */
const KEY_XF86Hibernate uint32 = 0x1008FFA8      /* Sleep to disk               */
const KEY_XF86TouchpadToggle uint32 = 0x1008FFA9 /* Toggle between touchpad/trackstick */
const KEY_XF86TouchpadOn uint32 = 0x1008FFB0     /* The touchpad got switched on */
const KEY_XF86TouchpadOff uint32 = 0x1008FFB1    /* The touchpad got switched off */

const KEY_XF86AudioMicMute uint32 = 0x1008FFB2 /* Mute the Mic from the system */

const KEY_XF86Keyboard uint32 = 0x1008FFB3 /* User defined keyboard related action */

const KEY_XF86WWAN uint32 = 0x1008FFB4   /* Toggle WWAN (LTE, UMTS, etc.) radio */
const KEY_XF86RFKill uint32 = 0x1008FFB5 /* Toggle radios on/off */

const KEY_XF86AudioPreset uint32 = 0x1008FFB6 /* Select equalizer preset, e.g. theatre-mode */

const KEY_XF86RotationLockToggle uint32 = 0x1008FFB7 /* Toggle screen rotation lock on/off */

const KEY_XF86FullScreen uint32 = 0x1008FFB8 /* Toggle fullscreen */

/* Keys for special action keys (hot keys) */
/* Virtual terminals on some operating systems */
const KEY_XF86Switch_VT_1 uint32 = 0x1008FE01
const KEY_XF86Switch_VT_2 uint32 = 0x1008FE02
const KEY_XF86Switch_VT_3 uint32 = 0x1008FE03
const KEY_XF86Switch_VT_4 uint32 = 0x1008FE04
const KEY_XF86Switch_VT_5 uint32 = 0x1008FE05
const KEY_XF86Switch_VT_6 uint32 = 0x1008FE06
const KEY_XF86Switch_VT_7 uint32 = 0x1008FE07
const KEY_XF86Switch_VT_8 uint32 = 0x1008FE08
const KEY_XF86Switch_VT_9 uint32 = 0x1008FE09
const KEY_XF86Switch_VT_10 uint32 = 0x1008FE0A
const KEY_XF86Switch_VT_11 uint32 = 0x1008FE0B
const KEY_XF86Switch_VT_12 uint32 = 0x1008FE0C

const KEY_XF86Ungrab uint32 = 0x1008FE20        /* force ungrab               */
const KEY_XF86ClearGrab uint32 = 0x1008FE21     /* kill application with grab */
const KEY_XF86Next_VMode uint32 = 0x1008FE22    /* next video mode available  */
const KEY_XF86Prev_VMode uint32 = 0x1008FE23    /* prev. video mode available */
const KEY_XF86LogWindowTree uint32 = 0x1008FE24 /* print window tree to log   */
const KEY_XF86LogGrabInfo uint32 = 0x1008FE25   /* print all active grabs to log */

/*
 * Reserved range for evdev symbols: 0x10081000-0x10081FFF
 *
 * Key syms within this range must match the Linux kernel
 * input-event-codes.h file in the format:
 *     XF86XK_CamelCaseKernelName	_EVDEVK(kernel value)
 * For example, the kernel
 *   #define KEY_MACRO_RECORD_START	uint32 =0x2b0
 * effectively ends up as:
 *   const KEY_XF86MacroRecordStart	uint32 =0x100812b0
 *
 * For historical reasons, some keysyms within the reserved range will be
 * missing, most notably all "normal" keys that are mapped through default
 * XKB layouts (e.g. KEY_Q).
 *
 * CamelCasing is done with a human control as last authority, e.g. see VOD
 * instead of Vod for the Video on Demand key.
 *
 * The format for #defines is strict:
 *
 * const KEY_XF86FOO<tab...>_EVDEVK(0xABC)<tab><tab> |* kver KEY_FOO *|
 *
 * Where
 * - alignment by tabs
 * - the _EVDEVK macro must be used
 * - the hex code must be in uppercase hex
 * - the kernel version (kver) is in the form v5.10
 * - kver and key name are within a slash-star comment (a pipe is used in
 *   this example for technical reasons)
 * These #defines are parsed by scripts. Do not stray from the given format.
 *
 * Where the evdev keycode is mapped to a different symbol, please add a
 * comment line starting with Use: but otherwise the same format, e.g.
 *  Use: XF86XK_RotationLockToggle	_EVDEVK(0x231)		   v4.16 KEY_ROTATE_LOCK_TOGGLE
 *
 */
/* Use: XF86XK_Eject			_EVDEVK(0x0A2)		         KEY_EJECTCLOSECD */
/* Use: XF86XK_New			_EVDEVK(0x0B5)		   v2.6.14 KEY_NEW */
/* Use: XK_Redo				_EVDEVK(0x0B6)		   v2.6.14 KEY_REDO */
/* KEY_DASHBOARD has been mapped to LaunchB in xkeyboard-config since 2011 */
/* Use: XF86XK_LaunchB			_EVDEVK(0x0CC)		   v2.6.28 KEY_DASHBOARD */
/* Use: XF86XK_Display			_EVDEVK(0x0E3)		   v2.6.12 KEY_SWITCHVIDEOMODE */
/* Use: XF86XK_KbdLightOnOff		_EVDEVK(0x0E4)		   v2.6.12 KEY_KBDILLUMTOGGLE */
/* Use: XF86XK_KbdBrightnessDown	_EVDEVK(0x0E5)		   v2.6.12 KEY_KBDILLUMDOWN */
/* Use: XF86XK_KbdBrightnessUp		_EVDEVK(0x0E6)		   v2.6.12 KEY_KBDILLUMUP */
/* Use: XF86XK_Send			_EVDEVK(0x0E7)		   v2.6.14 KEY_SEND */
/* Use: XF86XK_Reply			_EVDEVK(0x0E8)		   v2.6.14 KEY_REPLY */
/* Use: XF86XK_MailForward		_EVDEVK(0x0E9)		   v2.6.14 KEY_FORWARDMAIL */
/* Use: XF86XK_Save			_EVDEVK(0x0EA)		   v2.6.14 KEY_SAVE */
/* Use: XF86XK_Documents		_EVDEVK(0x0EB)		   v2.6.14 KEY_DOCUMENTS */
/* Use: XF86XK_Battery			_EVDEVK(0x0EC)		   v2.6.17 KEY_BATTERY */
/* Use: XF86XK_Bluetooth		_EVDEVK(0x0ED)		   v2.6.19 KEY_BLUETOOTH */
/* Use: XF86XK_WLAN			_EVDEVK(0x0EE)		   v2.6.19 KEY_WLAN */
/* Use: XF86XK_UWB			_EVDEVK(0x0EF)		   v2.6.24 KEY_UWB */
/* Use: XF86XK_Next_VMode		_EVDEVK(0x0F1)		   v2.6.23 KEY_VIDEO_NEXT */
/* Use: XF86XK_Prev_VMode		_EVDEVK(0x0F2)		   v2.6.23 KEY_VIDEO_PREV */
/* Use: XF86XK_MonBrightnessCycle	_EVDEVK(0x0F3)		   v2.6.23 KEY_BRIGHTNESS_CYCLE */
const KEY_XF86BrightnessAuto uint32 = 0x100810f4 /* v3.16 KEY_BRIGHTNESS_AUTO */
const KEY_XF86DisplayOff uint32 = 0x100810f5     /* v2.6.23 KEY_DISPLAY_OFF */
/* Use: XF86XK_WWAN			_EVDEVK(0x0F6)		   v3.13 KEY_WWAN */
/* Use: XF86XK_RFKill			_EVDEVK(0x0F7)		   v2.6.33 KEY_RFKILL */
/* Use: XF86XK_AudioMicMute		_EVDEVK(0x0F8)		   v3.1  KEY_MICMUTE */
const KEY_XF86Info uint32 = 0x10081166 /*       KEY_INFO */
/* Use: XF86XK_CycleAngle		_EVDEVK(0x173)		         KEY_ANGLE */
/* Use: XF86XK_FullScreen		_EVDEVK(0x174)		   v5.1  KEY_FULL_SCREEN */
const KEY_XF86AspectRatio uint32 = 0x10081177 /* v5.1  KEY_ASPECT_RATIO */
const KEY_XF86DVD uint32 = 0x10081185         /*       KEY_DVD */
const KEY_XF86Audio uint32 = 0x10081188       /*       KEY_AUDIO */
/* Use: XF86XK_Video			_EVDEVK(0x189)		         KEY_VIDEO */
/* Use: XF86XK_Calendar			_EVDEVK(0x18D)		         KEY_CALENDAR */
const KEY_XF86ChannelUp uint32 = 0x10081192   /*       KEY_CHANNELUP */
const KEY_XF86ChannelDown uint32 = 0x10081193 /*       KEY_CHANNELDOWN */
/* Use: XF86XK_AudioRandomPlay		_EVDEVK(0x19A)		         KEY_SHUFFLE */
const KEY_XF86Break uint32 = 0x1008119b      /*       KEY_BREAK */
const KEY_XF86VideoPhone uint32 = 0x100811a0 /* v2.6.20 KEY_VIDEOPHONE */
/* Use: XF86XK_Game			_EVDEVK(0x1A1)		   v2.6.20 KEY_GAMES */
/* Use: XF86XK_ZoomIn			_EVDEVK(0x1A2)		   v2.6.20 KEY_ZOOMIN */
/* Use: XF86XK_ZoomOut			_EVDEVK(0x1A3)		   v2.6.20 KEY_ZOOMOUT */
const KEY_XF86ZoomReset uint32 = 0x100811a4 /* v2.6.20 KEY_ZOOMRESET */
/* Use: XF86XK_Word			_EVDEVK(0x1A5)		   v2.6.20 KEY_WORDPROCESSOR */
const KEY_XF86Editor uint32 = 0x100811a6 /* v2.6.20 KEY_EDITOR */
/* Use: XF86XK_Excel			_EVDEVK(0x1A7)		   v2.6.20 KEY_SPREADSHEET */
const KEY_XF86GraphicsEditor uint32 = 0x100811a8 /* v2.6.20 KEY_GRAPHICSEDITOR */
const KEY_XF86Presentation uint32 = 0x100811a9   /* v2.6.20 KEY_PRESENTATION */
const KEY_XF86Database uint32 = 0x100811aa       /* v2.6.20 KEY_DATABASE */
/* Use: XF86XK_News			_EVDEVK(0x1AB)		   v2.6.20 KEY_NEWS */
const KEY_XF86Voicemail uint32 = 0x100811ac   /* v2.6.20 KEY_VOICEMAIL */
const KEY_XF86Addressbook uint32 = 0x100811ad /* v2.6.20 KEY_ADDRESSBOOK */
/* Use: XF86XK_Messenger		_EVDEVK(0x1AE)		   v2.6.20 KEY_MESSENGER */
const KEY_XF86DisplayToggle uint32 = 0x100811af /* v2.6.20 KEY_DISPLAYTOGGLE */
const KEY_XF86SpellCheck uint32 = 0x100811b0    /* v2.6.24 KEY_SPELLCHECK */
/* Use: XF86XK_LogOff			_EVDEVK(0x1B1)		   v2.6.24 KEY_LOGOFF */
/* Use: XK_dollar			_EVDEVK(0x1B2)		   v2.6.24 KEY_DOLLAR */
/* Use: XK_EuroSign			_EVDEVK(0x1B3)		   v2.6.24 KEY_EURO */
/* Use: XF86XK_FrameBack		_EVDEVK(0x1B4)		   v2.6.24 KEY_FRAMEBACK */
/* Use: XF86XK_FrameForward		_EVDEVK(0x1B5)		   v2.6.24 KEY_FRAMEFORWARD */
const KEY_XF86ContextMenu uint32 = 0x100811b6        /* v2.6.24 KEY_CONTEXT_MENU */
const KEY_XF86MediaRepeat uint32 = 0x100811b7        /* v2.6.26 KEY_MEDIA_REPEAT */
const KEY_XF8610ChannelsUp uint32 = 0x100811b8       /* v2.6.38 KEY_10CHANNELSUP */
const KEY_XF8610ChannelsDown uint32 = 0x100811b9     /* v2.6.38 KEY_10CHANNELSDOWN */
const KEY_XF86Images uint32 = 0x100811ba             /* v2.6.39 KEY_IMAGES */
const KEY_XF86NotificationCenter uint32 = 0x100811bc /* v5.10 KEY_NOTIFICATION_CENTER */
const KEY_XF86PickupPhone uint32 = 0x100811bd        /* v5.10 KEY_PICKUP_PHONE */
const KEY_XF86HangupPhone uint32 = 0x100811be        /* v5.10 KEY_HANGUP_PHONE */
const KEY_XF86Fn uint32 = 0x100811d0                 /*       KEY_FN */
const KEY_XF86Fn_Esc uint32 = 0x100811d1             /*       KEY_FN_ESC */
const KEY_XF86FnRightShift uint32 = 0x100811e5       /* v5.10 KEY_FN_RIGHT_SHIFT */
/* Use: XK_braille_dot_1		_EVDEVK(0x1F1)		   v2.6.17 KEY_BRL_DOT1 */
/* Use: XK_braille_dot_2		_EVDEVK(0x1F2)		   v2.6.17 KEY_BRL_DOT2 */
/* Use: XK_braille_dot_3		_EVDEVK(0x1F3)		   v2.6.17 KEY_BRL_DOT3 */
/* Use: XK_braille_dot_4		_EVDEVK(0x1F4)		   v2.6.17 KEY_BRL_DOT4 */
/* Use: XK_braille_dot_5		_EVDEVK(0x1F5)		   v2.6.17 KEY_BRL_DOT5 */
/* Use: XK_braille_dot_6		_EVDEVK(0x1F6)		   v2.6.17 KEY_BRL_DOT6 */
/* Use: XK_braille_dot_7		_EVDEVK(0x1F7)		   v2.6.17 KEY_BRL_DOT7 */
/* Use: XK_braille_dot_8		_EVDEVK(0x1F8)		   v2.6.17 KEY_BRL_DOT8 */
/* Use: XK_braille_dot_9		_EVDEVK(0x1F9)		   v2.6.23 KEY_BRL_DOT9 */
/* Use: XK_braille_dot_1		_EVDEVK(0x1FA)		   v2.6.23 KEY_BRL_DOT10 */
const KEY_XF86Numeric0 uint32 = 0x10081200     /* v2.6.28 KEY_NUMERIC_0 */
const KEY_XF86Numeric1 uint32 = 0x10081201     /* v2.6.28 KEY_NUMERIC_1 */
const KEY_XF86Numeric2 uint32 = 0x10081202     /* v2.6.28 KEY_NUMERIC_2 */
const KEY_XF86Numeric3 uint32 = 0x10081203     /* v2.6.28 KEY_NUMERIC_3 */
const KEY_XF86Numeric4 uint32 = 0x10081204     /* v2.6.28 KEY_NUMERIC_4 */
const KEY_XF86Numeric5 uint32 = 0x10081205     /* v2.6.28 KEY_NUMERIC_5 */
const KEY_XF86Numeric6 uint32 = 0x10081206     /* v2.6.28 KEY_NUMERIC_6 */
const KEY_XF86Numeric7 uint32 = 0x10081207     /* v2.6.28 KEY_NUMERIC_7 */
const KEY_XF86Numeric8 uint32 = 0x10081208     /* v2.6.28 KEY_NUMERIC_8 */
const KEY_XF86Numeric9 uint32 = 0x10081209     /* v2.6.28 KEY_NUMERIC_9 */
const KEY_XF86NumericStar uint32 = 0x1008120a  /* v2.6.28 KEY_NUMERIC_STAR */
const KEY_XF86NumericPound uint32 = 0x1008120b /* v2.6.28 KEY_NUMERIC_POUND */
const KEY_XF86NumericA uint32 = 0x1008120c     /* v4.1  KEY_NUMERIC_A */
const KEY_XF86NumericB uint32 = 0x1008120d     /* v4.1  KEY_NUMERIC_B */
const KEY_XF86NumericC uint32 = 0x1008120e     /* v4.1  KEY_NUMERIC_C */
const KEY_XF86NumericD uint32 = 0x1008120f     /* v4.1  KEY_NUMERIC_D */
const KEY_XF86CameraFocus uint32 = 0x10081210  /* v2.6.33 KEY_CAMERA_FOCUS */
const KEY_XF86WPSButton uint32 = 0x10081211    /* v2.6.34 KEY_WPS_BUTTON */
/* Use: XF86XK_TouchpadToggle		_EVDEVK(0x212)		   v2.6.37 KEY_TOUCHPAD_TOGGLE */
/* Use: XF86XK_TouchpadOn		_EVDEVK(0x213)		   v2.6.37 KEY_TOUCHPAD_ON */
/* Use: XF86XK_TouchpadOff		_EVDEVK(0x214)		   v2.6.37 KEY_TOUCHPAD_OFF */
const KEY_XF86CameraZoomIn uint32 = 0x10081215    /* v2.6.39 KEY_CAMERA_ZOOMIN */
const KEY_XF86CameraZoomOut uint32 = 0x10081216   /* v2.6.39 KEY_CAMERA_ZOOMOUT */
const KEY_XF86CameraUp uint32 = 0x10081217        /* v2.6.39 KEY_CAMERA_UP */
const KEY_XF86CameraDown uint32 = 0x10081218      /* v2.6.39 KEY_CAMERA_DOWN */
const KEY_XF86CameraLeft uint32 = 0x10081219      /* v2.6.39 KEY_CAMERA_LEFT */
const KEY_XF86CameraRight uint32 = 0x1008121a     /* v2.6.39 KEY_CAMERA_RIGHT */
const KEY_XF86AttendantOn uint32 = 0x1008121b     /* v3.10 KEY_ATTENDANT_ON */
const KEY_XF86AttendantOff uint32 = 0x1008121c    /* v3.10 KEY_ATTENDANT_OFF */
const KEY_XF86AttendantToggle uint32 = 0x1008121d /* v3.10 KEY_ATTENDANT_TOGGLE */
const KEY_XF86LightsToggle uint32 = 0x1008121e    /* v3.10 KEY_LIGHTS_TOGGLE */
const KEY_XF86ALSToggle uint32 = 0x10081230       /* v3.13 KEY_ALS_TOGGLE */
/* Use: XF86XK_RotationLockToggle	_EVDEVK(0x231)		   v4.16 KEY_ROTATE_LOCK_TOGGLE */
const KEY_XF86Buttonconfig uint32 = 0x10081240 /* v3.16 KEY_BUTTONCONFIG */
const KEY_XF86Taskmanager uint32 = 0x10081241  /* v3.16 KEY_TASKMANAGER */
const KEY_XF86Journal uint32 = 0x10081242      /* v3.16 KEY_JOURNAL */
const KEY_XF86ControlPanel uint32 = 0x10081243 /* v3.16 KEY_CONTROLPANEL */
const KEY_XF86AppSelect uint32 = 0x10081244    /* v3.16 KEY_APPSELECT */
const KEY_XF86Screensaver uint32 = 0x10081245  /* v3.16 KEY_SCREENSAVER */
const KEY_XF86VoiceCommand uint32 = 0x10081246 /* v3.16 KEY_VOICECOMMAND */
const KEY_XF86Assistant uint32 = 0x10081247    /* v4.13 KEY_ASSISTANT */
/* Use: XK_ISO_Next_Group		_EVDEVK(0x248)		   v5.2  KEY_KBD_LAYOUT_NEXT */
const KEY_XF86BrightnessMin uint32 = 0x10081250           /* v3.16 KEY_BRIGHTNESS_MIN */
const KEY_XF86BrightnessMax uint32 = 0x10081251           /* v3.16 KEY_BRIGHTNESS_MAX */
const KEY_XF86KbdInputAssistPrev uint32 = 0x10081260      /* v3.18 KEY_KBDINPUTASSIST_PREV */
const KEY_XF86KbdInputAssistNext uint32 = 0x10081261      /* v3.18 KEY_KBDINPUTASSIST_NEXT */
const KEY_XF86KbdInputAssistPrevgroup uint32 = 0x10081262 /* v3.18 KEY_KBDINPUTASSIST_PREVGROUP */
const KEY_XF86KbdInputAssistNextgroup uint32 = 0x10081263 /* v3.18 KEY_KBDINPUTASSIST_NEXTGROUP */
const KEY_XF86KbdInputAssistAccept uint32 = 0x10081264    /* v3.18 KEY_KBDINPUTASSIST_ACCEPT */
const KEY_XF86KbdInputAssistCancel uint32 = 0x10081265    /* v3.18 KEY_KBDINPUTASSIST_CANCEL */
const KEY_XF86RightUp uint32 = 0x10081266                 /* v4.7  KEY_RIGHT_UP */
const KEY_XF86RightDown uint32 = 0x10081267               /* v4.7  KEY_RIGHT_DOWN */
const KEY_XF86LeftUp uint32 = 0x10081268                  /* v4.7  KEY_LEFT_UP */
const KEY_XF86LeftDown uint32 = 0x10081269                /* v4.7  KEY_LEFT_DOWN */
const KEY_XF86RootMenu uint32 = 0x1008126a                /* v4.7  KEY_ROOT_MENU */
const KEY_XF86MediaTopMenu uint32 = 0x1008126b            /* v4.7  KEY_MEDIA_TOP_MENU */
const KEY_XF86Numeric11 uint32 = 0x1008126c               /* v4.7  KEY_NUMERIC_11 */
const KEY_XF86Numeric12 uint32 = 0x1008126d               /* v4.7  KEY_NUMERIC_12 */
const KEY_XF86AudioDesc uint32 = 0x1008126e               /* v4.7  KEY_AUDIO_DESC */
const KEY_XF863DMode uint32 = 0x1008126f                  /* v4.7  KEY_3D_MODE */
const KEY_XF86NextFavorite uint32 = 0x10081270            /* v4.7  KEY_NEXT_FAVORITE */
const KEY_XF86StopRecord uint32 = 0x10081271              /* v4.7  KEY_STOP_RECORD */
const KEY_XF86PauseRecord uint32 = 0x10081272             /* v4.7  KEY_PAUSE_RECORD */
const KEY_XF86VOD uint32 = 0x10081273                     /* v4.7  KEY_VOD */
const KEY_XF86Unmute uint32 = 0x10081274                  /* v4.7  KEY_UNMUTE */
const KEY_XF86FastReverse uint32 = 0x10081275             /* v4.7  KEY_FASTREVERSE */
const KEY_XF86SlowReverse uint32 = 0x10081276             /* v4.7  KEY_SLOWREVERSE */
const KEY_XF86Data uint32 = 0x10081277                    /* v4.7  KEY_DATA */
const KEY_XF86OnScreenKeyboard uint32 = 0x10081278        /* v4.12 KEY_ONSCREEN_KEYBOARD */
const KEY_XF86PrivacyScreenToggle uint32 = 0x10081279     /* v5.5  KEY_PRIVACY_SCREEN_TOGGLE */
const KEY_XF86SelectiveScreenshot uint32 = 0x1008127a     /* v5.6  KEY_SELECTIVE_SCREENSHOT */
const KEY_XF86Macro1 uint32 = 0x10081290                  /* v5.5  KEY_MACRO1 */
const KEY_XF86Macro2 uint32 = 0x10081291                  /* v5.5  KEY_MACRO2 */
const KEY_XF86Macro3 uint32 = 0x10081292                  /* v5.5  KEY_MACRO3 */
const KEY_XF86Macro4 uint32 = 0x10081293                  /* v5.5  KEY_MACRO4 */
const KEY_XF86Macro5 uint32 = 0x10081294                  /* v5.5  KEY_MACRO5 */
const KEY_XF86Macro6 uint32 = 0x10081295                  /* v5.5  KEY_MACRO6 */
const KEY_XF86Macro7 uint32 = 0x10081296                  /* v5.5  KEY_MACRO7 */
const KEY_XF86Macro8 uint32 = 0x10081297                  /* v5.5  KEY_MACRO8 */
const KEY_XF86Macro9 uint32 = 0x10081298                  /* v5.5  KEY_MACRO9 */
const KEY_XF86Macro10 uint32 = 0x10081299                 /* v5.5  KEY_MACRO10 */
const KEY_XF86Macro11 uint32 = 0x1008129a                 /* v5.5  KEY_MACRO11 */
const KEY_XF86Macro12 uint32 = 0x1008129b                 /* v5.5  KEY_MACRO12 */
const KEY_XF86Macro13 uint32 = 0x1008129c                 /* v5.5  KEY_MACRO13 */
const KEY_XF86Macro14 uint32 = 0x1008129d                 /* v5.5  KEY_MACRO14 */
const KEY_XF86Macro15 uint32 = 0x1008129e                 /* v5.5  KEY_MACRO15 */
const KEY_XF86Macro16 uint32 = 0x1008129f                 /* v5.5  KEY_MACRO16 */
const KEY_XF86Macro17 uint32 = 0x100812a0                 /* v5.5  KEY_MACRO17 */
const KEY_XF86Macro18 uint32 = 0x100812a1                 /* v5.5  KEY_MACRO18 */
const KEY_XF86Macro19 uint32 = 0x100812a2                 /* v5.5  KEY_MACRO19 */
const KEY_XF86Macro20 uint32 = 0x100812a3                 /* v5.5  KEY_MACRO20 */
const KEY_XF86Macro21 uint32 = 0x100812a4                 /* v5.5  KEY_MACRO21 */
const KEY_XF86Macro22 uint32 = 0x100812a5                 /* v5.5  KEY_MACRO22 */
const KEY_XF86Macro23 uint32 = 0x100812a6                 /* v5.5  KEY_MACRO23 */
const KEY_XF86Macro24 uint32 = 0x100812a7                 /* v5.5  KEY_MACRO24 */
const KEY_XF86Macro25 uint32 = 0x100812a8                 /* v5.5  KEY_MACRO25 */
const KEY_XF86Macro26 uint32 = 0x100812a9                 /* v5.5  KEY_MACRO26 */
const KEY_XF86Macro27 uint32 = 0x100812aa                 /* v5.5  KEY_MACRO27 */
const KEY_XF86Macro28 uint32 = 0x100812ab                 /* v5.5  KEY_MACRO28 */
const KEY_XF86Macro29 uint32 = 0x100812ac                 /* v5.5  KEY_MACRO29 */
const KEY_XF86Macro30 uint32 = 0x100812ad                 /* v5.5  KEY_MACRO30 */
const KEY_XF86MacroRecordStart uint32 = 0x100812b0        /* v5.5  KEY_MACRO_RECORD_START */
const KEY_XF86MacroRecordStop uint32 = 0x100812b1         /* v5.5  KEY_MACRO_RECORD_STOP */
const KEY_XF86MacroPresetCycle uint32 = 0x100812b2        /* v5.5  KEY_MACRO_PRESET_CYCLE */
const KEY_XF86MacroPreset1 uint32 = 0x100812b3            /* v5.5  KEY_MACRO_PRESET1 */
const KEY_XF86MacroPreset2 uint32 = 0x100812b4            /* v5.5  KEY_MACRO_PRESET2 */
const KEY_XF86MacroPreset3 uint32 = 0x100812b5            /* v5.5  KEY_MACRO_PRESET3 */
const KEY_XF86KbdLcdMenu1 uint32 = 0x100812b8             /* v5.5  KEY_KBD_LCD_MENU1 */
const KEY_XF86KbdLcdMenu2 uint32 = 0x100812b9             /* v5.5  KEY_KBD_LCD_MENU2 */
const KEY_XF86KbdLcdMenu3 uint32 = 0x100812ba             /* v5.5  KEY_KBD_LCD_MENU3 */
const KEY_XF86KbdLcdMenu4 uint32 = 0x100812bb             /* v5.5  KEY_KBD_LCD_MENU4 */
const KEY_XF86KbdLcdMenu5 uint32 = 0x100812bc             /* v5.5  KEY_KBD_LCD_MENU5 */

/*
 * Copyright (c) 1991, Oracle and/or its affiliates. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
/************************************************************

Copyright 1991, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

***********************************************************/

/*
 * Floating Accent
 */

const KEY_SunFA_Grave uint32 = 0x1005FF00
const KEY_SunFA_Circum uint32 = 0x1005FF01
const KEY_SunFA_Tilde uint32 = 0x1005FF02
const KEY_SunFA_Acute uint32 = 0x1005FF03
const KEY_SunFA_Diaeresis uint32 = 0x1005FF04
const KEY_SunFA_Cedilla uint32 = 0x1005FF05

/*
 * Miscellaneous Functions
 */

const KEY_SunF36 uint32 = 0x1005FF10 /* Labeled F11 */
const KEY_SunF37 uint32 = 0x1005FF11 /* Labeled F12 */

const KEY_SunSys_Req uint32 = 0x1005FF60
const KEY_SunPrint_Screen uint32 = 0x0000FF61 /* Same as XK_Print */

/*
 * International & Multi-Key Character Composition
 */

const KEY_SunCompose uint32 = 0x0000FF20  /* Same as XK_Multi_key */
const KEY_SunAltGraph uint32 = 0x0000FF7E /* Same as XK_Mode_switch */

/*
 * Cursor Control
 */

const KEY_SunPageUp uint32 = 0x0000FF55   /* Same as XK_Prior */
const KEY_SunPageDown uint32 = 0x0000FF56 /* Same as XK_Next */

/*
 * Open Look Functions
 */

const KEY_SunUndo uint32 = 0x0000FF65  /* Same as XK_Undo */
const KEY_SunAgain uint32 = 0x0000FF66 /* Same as XK_Redo */
const KEY_SunFind uint32 = 0x0000FF68  /* Same as XK_Find */
const KEY_SunStop uint32 = 0x0000FF69  /* Same as XK_Cancel */
const KEY_SunProps uint32 = 0x1005FF70
const KEY_SunFront uint32 = 0x1005FF71
const KEY_SunCopy uint32 = 0x1005FF72
const KEY_SunOpen uint32 = 0x1005FF73
const KEY_SunPaste uint32 = 0x1005FF74
const KEY_SunCut uint32 = 0x1005FF75

const KEY_SunPowerSwitch uint32 = 0x1005FF76
const KEY_SunAudioLowerVolume uint32 = 0x1005FF77
const KEY_SunAudioMute uint32 = 0x1005FF78
const KEY_SunAudioRaiseVolume uint32 = 0x1005FF79
const KEY_SunVideoDegauss uint32 = 0x1005FF7A
const KEY_SunVideoLowerBrightness uint32 = 0x1005FF7B
const KEY_SunVideoRaiseBrightness uint32 = 0x1005FF7C
const KEY_SunPowerSwitchShift uint32 = 0x1005FF7D

/***********************************************************

Copyright 1988, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.


Copyright 1988 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * DEC private keysyms
 * (29th bit set)
 */

/* two-key compose sequence initiators, chosen to map to Latin1 characters */

const KEY_Dring_accent uint32 = 0x1000FEB0
const KEY_Dcircumflex_accent uint32 = 0x1000FE5E
const KEY_Dcedilla_accent uint32 = 0x1000FE2C
const KEY_Dacute_accent uint32 = 0x1000FE27
const KEY_Dgrave_accent uint32 = 0x1000FE60
const KEY_Dtilde uint32 = 0x1000FE7E
const KEY_Ddiaeresis uint32 = 0x1000FE22

/* special keysym for LK2** "Remove" key on editing keypad */

const KEY_DRemove uint32 = 0x1000FF00 /* Remove */
/*

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts,

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the names of Hewlett Packard
or Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

HEWLETT-PACKARD MAKES NO WARRANTY OF ANY KIND WITH REGARD
TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  Hewlett-Packard shall not be liable for errors
contained herein or direct, indirect, special, incidental or
consequential damages in connection with the furnishing,
performance, or use of this material.

*/

const KEY_hpClearLine uint32 = 0x1000FF6F
const KEY_hpInsertLine uint32 = 0x1000FF70
const KEY_hpDeleteLine uint32 = 0x1000FF71
const KEY_hpInsertChar uint32 = 0x1000FF72
const KEY_hpDeleteChar uint32 = 0x1000FF73
const KEY_hpBackTab uint32 = 0x1000FF74
const KEY_hpKP_BackTab uint32 = 0x1000FF75
const KEY_hpModelock1 uint32 = 0x1000FF48
const KEY_hpModelock2 uint32 = 0x1000FF49
const KEY_hpReset uint32 = 0x1000FF6C
const KEY_hpSystem uint32 = 0x1000FF6D
const KEY_hpUser uint32 = 0x1000FF6E
const KEY_hpmute_acute uint32 = 0x100000A8
const KEY_hpmute_grave uint32 = 0x100000A9
const KEY_hpmute_asciicircum uint32 = 0x100000AA
const KEY_hpmute_diaeresis uint32 = 0x100000AB
const KEY_hpmute_asciitilde uint32 = 0x100000AC
const KEY_hplira uint32 = 0x100000AF
const KEY_hpguilder uint32 = 0x100000BE
const KEY_hpYdiaeresis uint32 = 0x100000EE
const KEY_hpIO uint32 = 0x100000EE
const KEY_hplongminus uint32 = 0x100000F6
const KEY_hpblock uint32 = 0x100000FC

const KEY_osfCopy uint32 = 0x1004FF02
const KEY_osfCut uint32 = 0x1004FF03
const KEY_osfPaste uint32 = 0x1004FF04
const KEY_osfBackTab uint32 = 0x1004FF07
const KEY_osfBackSpace uint32 = 0x1004FF08
const KEY_osfClear uint32 = 0x1004FF0B
const KEY_osfEscape uint32 = 0x1004FF1B
const KEY_osfAddMode uint32 = 0x1004FF31
const KEY_osfPrimaryPaste uint32 = 0x1004FF32
const KEY_osfQuickPaste uint32 = 0x1004FF33
const KEY_osfPageLeft uint32 = 0x1004FF40
const KEY_osfPageUp uint32 = 0x1004FF41
const KEY_osfPageDown uint32 = 0x1004FF42
const KEY_osfPageRight uint32 = 0x1004FF43
const KEY_osfActivate uint32 = 0x1004FF44
const KEY_osfMenuBar uint32 = 0x1004FF45
const KEY_osfLeft uint32 = 0x1004FF51
const KEY_osfUp uint32 = 0x1004FF52
const KEY_osfRight uint32 = 0x1004FF53
const KEY_osfDown uint32 = 0x1004FF54
const KEY_osfEndLine uint32 = 0x1004FF57
const KEY_osfBeginLine uint32 = 0x1004FF58
const KEY_osfEndData uint32 = 0x1004FF59
const KEY_osfBeginData uint32 = 0x1004FF5A
const KEY_osfPrevMenu uint32 = 0x1004FF5B
const KEY_osfNextMenu uint32 = 0x1004FF5C
const KEY_osfPrevField uint32 = 0x1004FF5D
const KEY_osfNextField uint32 = 0x1004FF5E
const KEY_osfSelect uint32 = 0x1004FF60
const KEY_osfInsert uint32 = 0x1004FF63
const KEY_osfUndo uint32 = 0x1004FF65
const KEY_osfMenu uint32 = 0x1004FF67
const KEY_osfCancel uint32 = 0x1004FF69
const KEY_osfHelp uint32 = 0x1004FF6A
const KEY_osfSelectAll uint32 = 0x1004FF71
const KEY_osfDeselectAll uint32 = 0x1004FF72
const KEY_osfReselect uint32 = 0x1004FF73
const KEY_osfExtend uint32 = 0x1004FF74
const KEY_osfRestore uint32 = 0x1004FF78
const KEY_osfDelete uint32 = 0x1004FFFF

/**************************************************************
 * The use of the following macros is deprecated.
 * They are listed below only for backwards compatibility.
 */
const KEY_Reset uint32 = 0x1000FF6C
const KEY_System uint32 = 0x1000FF6D
const KEY_User uint32 = 0x1000FF6E
const KEY_ClearLine uint32 = 0x1000FF6F
const KEY_InsertLine uint32 = 0x1000FF70
const KEY_DeleteLine uint32 = 0x1000FF71
const KEY_InsertChar uint32 = 0x1000FF72
const KEY_DeleteChar uint32 = 0x1000FF73
const KEY_BackTab uint32 = 0x1000FF74
const KEY_KP_BackTab uint32 = 0x1000FF75
const KEY_Ext16bit_L uint32 = 0x1000FF76
const KEY_Ext16bit_R uint32 = 0x1000FF77
const KEY_mute_acute uint32 = 0x100000a8
const KEY_mute_grave uint32 = 0x100000a9
const KEY_mute_asciicircum uint32 = 0x100000aa
const KEY_mute_diaeresis uint32 = 0x100000ab
const KEY_mute_asciitilde uint32 = 0x100000ac
const KEY_lira uint32 = 0x100000af
const KEY_guilder uint32 = 0x100000be
const KEY_IO uint32 = 0x100000ee
const KEY_longminus uint32 = 0x100000f6
const KEY_block uint32 = 0x100000fc
